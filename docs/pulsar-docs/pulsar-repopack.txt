================================================================
REPOPACK OUTPUT FILE
================================================================

This file was generated by Repopack on: 2024-09-17T11:01:01.395Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Multiple file entries, each consisting of:
   a. A separator line (================)
   b. The file path (File: path/to/file)
   c. Another separator line
   d. The full contents of the file
   e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
   original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
   distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
   the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation.
- Code comments have been removed.


For more information about Repopack, visit: https://github.com/yamadashy/repopack

Additional User-Provided Header:
--------------------------------
Pulsar repo

================================================================
Repository Files
================================================================

================
File: .jsdoc.json
================
{
    "recurseDepth": 10,
    "source": {
        "include": ["src", "packages"],
        "exclude": ["node_modules"],
        "excludePattern": "((^|\\/|\\\\)_|node_modules)"
    },
    "opts": {
        "recurse": true
    }
}

================
File: Building.md
================
## Building

There are two ways of building and staring hacking on Pulsar's core. One is following the documentation of the flight manual:

* [Linux](https://flight-manual.atom.io/hacking-atom/sections/hacking-on-atom-core/#platform-linux)
* [macOS](https://flight-manual.atom.io/hacking-atom/sections/hacking-on-atom-core/#platform-mac)
* [Windows](https://flight-manual.atom.io/hacking-atom/sections/hacking-on-atom-core/#platform-windows)

### Alternative method

First, install `yarn`. Pulsar currently does not work with `npm` (although it will
probably work in the future). Be sure you're using Node.JS versions between 10 and 16, and
then run:

```shell
yarn install
yarn build
yarn build:apm
```

_If a Windows user it is recommended to install Pulsar on a path with no Spaces_

This will install the packages, rebuild them for Electron, and build the Atom Package
Manager. Finally, you can run the editor with `yarn start`. This command will accept the
same arguments as the final binary.

### Running tests

You can run tests for the editor (both the core editor, or specific packages) the same way
you would run with the final binary: by issuing `yarn --test <path-to-test>`.

================
File: Documentation.md
================
## Documentation

Visit [atom.io](https://atom.io) to learn more or visit the [Atom forum](https://github.com/atom/atom/discussions).

Follow [@AtomEditor](https://twitter.com/atomeditor) on Twitter for important
announcements.

If you want to read about using Atom or developing packages in Atom, the [Atom Flight Manual](https://flight-manual.atom.io) is free and available online. You can find the source to the manual in [atom/flight-manual.atom.io](https://github.com/atom/flight-manual.atom.io).

The [API reference](https://atom.io/docs/api) for developing packages is also documented on Atom.io.

================
File: Installation.md
================
## Installing Atom Community
<!-- ### Prerequisites
- [Git](https://git-scm.com)

### macOS

Download the latest [Atom release](https://github.com/atom/atom/releases/latest).

Atom will automatically update when a new release is available.

### Windows

Download the latest [Atom installer](https://github.com/atom/atom/releases/latest). `AtomSetup.exe` is 32-bit. For 64-bit systems, download `AtomSetup-x64.exe`.

Atom will automatically update when a new release is available.

You can also download `atom-windows.zip` (32-bit) or `atom-x64-windows.zip` (64-bit) from the [releases page](https://github.com/atom/atom/releases/latest).
The `.zip` version will not automatically update.

Using [Chocolatey](https://chocolatey.org)? Run `cinst Atom` to install the latest version of Atom.

### Linux

Atom is only available for 64-bit Linux systems.

Configure your distribution's package manager to install and update Atom by following the [Linux installation instructions](https://flight-manual.atom.io/getting-started/sections/installing-atom/#platform-linux) in the Flight Manual.  You will also find instructions on how to install Atom's official Linux packages without using a package repository, though you will not get automatic updates after installing Atom this way.

#### Archive extraction

An archive is available for people who don't want to install `atom` as root.

This version enables you to install multiple Atom versions in parallel. It has been built on Ubuntu 64-bit,
but should be compatible with other Linux distributions.

1. Install dependencies (on Ubuntu):
```sh
sudo apt install git libasound2 libcurl4 libgbm1 libgcrypt20 libgtk-3-0 libnotify4 libnss3 libglib2.0-bin xdg-utils libx11-xcb1 libxcb-dri3-0 libxss1 libxtst6 libxkbfile1
```
2. Download `atom-amd64.tar.gz` from the [Atom releases page](https://github.com/atom/atom/releases/latest).
3. Run `tar xf atom-amd64.tar.gz` in the directory where you want to extract the Atom folder.
4. Launch Atom using the installed `atom` command from the newly extracted directory.

The Linux version does not currently automatically update so you will need to
repeat these steps to upgrade to future releases. -->
Currently, to get binaries based on code by the Atom community:

1. browse our [_Release Branch Build_ Azure Pipeline](https://dev.azure.com/atomcommunity/atomcommunity/_build/latest?definitionId=10&branchName=master);
2. select the Job named after your OS (eg. _Linux_);
3. at the bottom of the now visible log pane, make sure `100% tests passed` is visible and then select the `artifacts produced` link to browse the `Published artifacts` page;
4. pick a file which is compatible with your system and click on the "3 dots" menu that appears when hovering the mouse on the file name (right side of the page), then:
  - click on the `Download artifacts` menu option and wait for the download to start in your web browser or
  - click on `Copy download URL` to feed the file URL to a download manager.
5. after the download is complete, extract the archive and run the executable.

================
File: Pulsar-API-Documentation.md
================
## Classes

<dl>
<dt><a href="#AtomEnvironment">AtomEnvironment</a></dt>
<dd><p>Pulsar global for dealing with packages, themes, menus, and the window.</p>
<p>An instance of this class is always available as the <code>atom</code> global.</p>
</dd>
<dt><a href="#Clipboard">Clipboard</a></dt>
<dd></dd>
<dt><a href="#Container">Container</a></dt>
<dd><p>A container capture. When another capture&#39;s node is contained by the
definition capture&#39;s node, it gets added to this instance.</p>
</dd>
<dt><a href="#CaptureOrganizer">CaptureOrganizer</a></dt>
<dd><p>Keeps track of @definition.* captures and the captures they may contain.</p>
</dd>
<dt><a href="#InvalidProviderError">InvalidProviderError</a> ⇐ <code>Error</code></dt>
<dd><p>An error thrown when a newly added symbol provider does not conform to its
contract.</p>
</dd>
<dt><a href="#ListController">ListController</a></dt>
<dd><p>A class for setting various UI properties on a symbol list palette. This is a
privilege given to the “main” (or <em>exclusive</em>) provider for a given task.</p>
<p>This is how we allow a provider to communicate its state to the UI without
giving it full control over the <code>SelectListView</code> used to show results.</p>
</dd>
</dl>

## Constants

<dl>
<dt><a href="#etch">etch</a></dt>
<dd></dd>
<dt><a href="#css">css</a></dt>
<dd><p>This file will manage the updating of <code>autocomplete-css</code> <code>completions.json</code>.
  We will mainly utilize <code>@webref/css</code>.listAll() function that returns a full CSS
  list of all properties seperated by their spec shortname. An example
  of this format is defined below for ease of future modifications.</p>
<p>  Some important notes about the data contained here:
    - Often times the <code>value</code> within the <code>property</code> will be in the following format:
      <code>&lt;valueGroupName&gt;</code> or even <code>&lt;valueGroupName&gt; | value | value2</code> or just <code>value | value2</code>
      It will be important to build a parser that can handle this format.
      The <code>&lt;valueGroupName&gt;</code> then can be realized via that specs <code>values</code> where
      <code>values[x].name</code> will match the <code>&lt;valueGroupName&gt;</code>. Another important note about
      handling values here is that oftentimes <code>values[x].values[]</code> won&#39;t actually
      contain all possible values. And instead this must be handled by checking
      <code>values[x].value</code> which is another string of <code>&lt;valueGroupName&gt; | value</code>.
      So this should be handled by the same parser.
    - Additionally an important note is that nowhere in this data do we get any kind
      of description about the data that could lend a hand in being documentation.
      So the documentation must be gathered seperatly. Likely the best way to collect
      our documentation data is via <code>mdn/content</code>.
      Within <code>content/files/en-us/web/css</code> is a directory of folders titled
      by the name of properties.</p>
<pre><code>The last important thing to note here:
  MDN doesn&#39;t have docs on everything. And that&#39;s a good thing. But it means
  many of our items don&#39;t have any kind of description. For this situation
  we have `manual-property-desc.json` which is a list of manually updated
  descriptions for properties where there are none. This was a last resort
  intended to provide the highest quality of completions possible.
  Overtime many items on this list will likely be able to be removed just as
  new ones are added. After running the update script you&#39;ll see a warning
  saying how many properties are without completions that would then need to
  be added to the JSON file.
</code></pre>
<p>  &quot;spec-shortname&quot;: {
    &quot;spec&quot;: {
      &quot;title&quot;: &quot;&quot;,
      &quot;url&quot;: &quot;&quot;
    },
    &quot;properties&quot;: [
      {
        &quot;name&quot;: &quot;&quot;,
        &quot;value&quot;: &quot;&quot;,
        &quot;initial&quot;: &quot;&quot;,
        &quot;appliesTo&quot;: &quot;&quot;,
        &quot;percentages&quot;: &quot;&quot;,
        &quot;computedValue&quot;: &quot;&quot;,
        &quot;canonicalOrder&quot;: &quot;&quot;,
        &quot;animationType&quot;: &quot;&quot;,
        &quot;media&quot;: &quot;&quot;,
        &quot;styleDeclaration&quot;: [ &quot;&quot;, &quot;&quot;, &quot;&quot; ]
      }
    ],
    &quot;atrules&quot;: [
      {
        &quot;name&quot;: &quot;&quot;,
        &quot;descriptors&quot;: [
          {
            &quot;name&quot;: &quot;&quot;,
            &quot;for&quot;: &quot;&quot;,
            &quot;value&quot;: &quot;&quot;,
            &quot;type&quot;: &quot;&quot;
          }
        ]
      }
    ],
    &quot;selectors&quot;: [],
    &quot;values&quot;: [
      {
        &quot;name&quot;: &quot;&quot;,
        &quot;type&quot;: &quot;&quot;,
        &quot;prose&quot;: &quot;Optional description&quot;,
        &quot;value&quot;: &quot;&quot;,
        &quot;values&quot;: [
          {
            &quot;name&quot;: &quot;&quot;,
            &quot;prose&quot;: &quot;Optional Description&quot;,
            &quot;type&quot;: &quot;&quot;,
            &quot;value&quot;: &quot;&quot;
          }
        ]
      }
    ],
    &quot;warnings&quot;: []
  }</p>
</dd>
<dt><a href="#chromiumElementsShim">chromiumElementsShim</a></dt>
<dd><p>This file will manage the updating of <code>autocomplete-html</code> <code>completions.json</code>
  We will partially utilize <code>@webref/elements</code> <code>.listAll()</code> function that returns
  a full list of HTML Elements along with a defined <code>interface</code>.
  To use this <code>interface</code> in any meaningful way, we will utilize the dataset
  of Attributes that apply to each <code>interface</code> from Chromiums DevTools resource
  <code>https://github.com/ChromeDevTools/devtools-frontend</code>.
  Finally from here we will utilize <code>https://github.com/mdn/content</code> to parse
  the Markdown docs of MDN&#39;s website to retreive descriptions for each element.</p>
<p>  Now for a summary of our <code>completions.json</code> file we aim to generate.
  There are two top level elements, <code>tags</code> and <code>attributes</code>, both objects.
  Within <code>tags</code> we expect the following:
  &quot;tags&quot;: {
    &quot;a&quot;: {
      &quot;attributes&quot;: [ &quot;href&quot;, &quot;hreflang&quot;, &quot;media&quot;, &quot;rel&quot;, &quot;target&quot;, &quot;type&quot; ],
      &quot;description&quot;: &quot;.....&quot;
    }
  };</p>
<p>  When an entry contains no <code>attributes</code> there is no empty array, the element
  simply doesn&#39;t exist.</p>
<p>  The <code>attributes</code> object contains keys of different elements that themselves
  are objects that can contain several valid keys.</p>
<ul>
<li>global: Seems to be used exclusively for Global Attributes. Is a boolean
    which when false, the key does not appear.</li>
<li>type: A ?type? for the attribute. It&#39;s meaning is not immediately known.
  Nor a way to reliabley programatically collect it. Some discovered values:</li>
</ul>
<p>cssStyle: Exclusively used for <code>class</code> attribute
boolean: Attributes that only accept <code>true</code> or <code>false</code>
flag: For attributes that don&#39;t require or accept values. eg autoplay
cssId: Exclusively used for the <code>id</code> attribute
color: Exclusively used for the <code>bgcolor</code> attribute
style: Exclusively used for the <code>style</code> attribute</p>
<ul>
<li>description: A text description of the attribute</li>
<li>attribOption: A string array of valid values that can exist within the attribute.
          Such as the case with <code>rel</code> where only so many valid options exist.</li>
</ul>
<p>  Although with our data sources mentioned above, we are able to collect nearly
  all the data needed. Except the <code>type</code> that is defined within our
  <code>completions.json</code> as well as the <code>attribOption</code> within our completions.</p>
<p>  Studying these closer reveals that all attributes listing with our <code>completions.json</code>
  do not appear elsewhere, and are nearly all global attributes.</p>
<p>  In this case since there is no sane way to collect this data, we will leave this
  list as a manually maintained section of our <code>completions.json</code>.
  This does mean that <code>curated-attributes.json</code> is a static document that
  will require manual updating in the future. Or most ideally, will find a way
  to automatically generate the needed data.</p>
</dd>
<dt><a href="#update">update</a></dt>
<dd><p>This file aims to run some short simple tests against <code>update.js</code>. Focusing
 mainly on the Regex used within <code>sanitizeDescription()</code></p>
</dd>
<dt><a href="#fs">fs</a></dt>
<dd></dd>
<dt><a href="#dalek">dalek</a></dt>
<dd></dd>
<dt><a href="#assert">assert</a></dt>
<dd></dd>
<dt><a href="#path">path</a></dt>
<dd></dd>
<dt><a href="#path">path</a></dt>
<dd></dd>
<dt><a href="#path">path</a></dt>
<dd></dd>
<dt><a href="#_">_</a></dt>
<dd></dd>
<dt><a href="#path">path</a></dt>
<dd></dd>
</dl>

## Functions

<dl>
<dt><a href="#renderMarkdown">renderMarkdown(content, givenOpts)</a> ⇒ <code>string</code></dt>
<dd><p>Takes a Markdown document and renders it as HTML.</p>
</dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#conditionPromise">conditionPromise()</a></dt>
<dd></dd>
<dt><a href="#conditionPromise">conditionPromise()</a></dt>
<dd></dd>
<dt><a href="#destroy">destroy()</a></dt>
<dd></dd>
<dt><a href="#destroyChildren">destroyChildren()</a></dt>
<dd></dd>
<dt><a href="#releaseChildren">releaseChildren()</a></dt>
<dd></dd>
<dt><a href="#subscribeToRepository">subscribeToRepository()</a></dt>
<dd></dd>
<dt><a href="#updateDiffs">updateDiffs()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#isIterable">isIterable(obj)</a> ⇒ <code>Boolean</code></dt>
<dd><p>Ensures an object can be iterated over.</p>
<p>The contract with the symbol providers is that they return an object that
gives us symbol objects when we iterate over it. It&#39;ll probably be an array,
but we&#39;re cool with anything iterable.</p>
</dd>
<dt><a href="#timeout">timeout(ms)</a> ⇒ <code>Promise.&lt;true&gt;</code></dt>
<dd><p>Returns a promise that resolves after a given number of milliseconds.</p>
</dd>
<dt><a href="#getBadgeTextVariant">getBadgeTextVariant(text)</a> ⇒ <code>String</code></dt>
<dd><p>Given a string of text, returns a hexadecimal character from <code>0</code> to <code>f</code> to
represent a classification “bucket.” This is used when assigning colors to
various symbol badges.</p>
</dd>
<dt><a href="#badge">badge(text, options)</a> ⇒ <code>Element</code></dt>
<dd><p>Return a DOM element for a badge for a given symbol tag name.</p>
</dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#conditionPromise">conditionPromise()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
</dl>

<a name="AtomEnvironment"></a>

## AtomEnvironment
Pulsar global for dealing with packages, themes, menus, and the window.

An instance of this class is always available as the `atom` global.

**Kind**: global class  

* [AtomEnvironment](#AtomEnvironment)
    * _instance_
        * [.clipboard](#AtomEnvironment+clipboard) : [<code>Clipboard</code>](#Clipboard)
        * [.deserializers](#AtomEnvironment+deserializers) : <code>DeserializerManager</code>
        * [.views](#AtomEnvironment+views) : <code>ViewRegistry</code>
        * [.notifications](#AtomEnvironment+notifications) : <code>NotificationManager</code>
        * [.config](#AtomEnvironment+config) : <code>Config</code>
        * [.keymaps](#AtomEnvironment+keymaps) : <code>KeymapManager</code>
        * [.tooltips](#AtomEnvironment+tooltips) : <code>TooltipManager</code>
        * [.commands](#AtomEnvironment+commands) : <code>CommandRegistry</code>
        * [.grammars](#AtomEnvironment+grammars) : <code>GrammarRegistry</code>
        * [.styles](#AtomEnvironment+styles) : <code>StyleManager</code>
        * [.packages](#AtomEnvironment+packages) : <code>PackageManager</code>
        * [.themes](#AtomEnvironment+themes) : <code>ThemeManager</code>
        * [.menu](#AtomEnvironment+menu) : <code>MenuManager</code>
        * [.contextMenu](#AtomEnvironment+contextMenu) : <code>ContextMenuManager</code>
        * [.project](#AtomEnvironment+project) : <code>Project</code>
        * [.textEditors](#AtomEnvironment+textEditors) : <code>TextEditorRegistry</code>
        * [.workspace](#AtomEnvironment+workspace) : <code>Workspace</code>
        * [.history](#AtomEnvironment+history) : <code>HistoryManager</code>
        * _Messaging the User_
            * [.beep()](#AtomEnvironment+beep)
    * _static_
        * _Event Subscription_
            * [.onDidBeep(callback)](#AtomEnvironment.onDidBeep) ⇒ <code>Disposable</code>

<a name="AtomEnvironment+clipboard"></a>

### atomEnvironment.clipboard : [<code>Clipboard</code>](#Clipboard)
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+deserializers"></a>

### atomEnvironment.deserializers : <code>DeserializerManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+views"></a>

### atomEnvironment.views : <code>ViewRegistry</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+notifications"></a>

### atomEnvironment.notifications : <code>NotificationManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+config"></a>

### atomEnvironment.config : <code>Config</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+keymaps"></a>

### atomEnvironment.keymaps : <code>KeymapManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+tooltips"></a>

### atomEnvironment.tooltips : <code>TooltipManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+commands"></a>

### atomEnvironment.commands : <code>CommandRegistry</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+grammars"></a>

### atomEnvironment.grammars : <code>GrammarRegistry</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+styles"></a>

### atomEnvironment.styles : <code>StyleManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+packages"></a>

### atomEnvironment.packages : <code>PackageManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+themes"></a>

### atomEnvironment.themes : <code>ThemeManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+menu"></a>

### atomEnvironment.menu : <code>MenuManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+contextMenu"></a>

### atomEnvironment.contextMenu : <code>ContextMenuManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+project"></a>

### atomEnvironment.project : <code>Project</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+textEditors"></a>

### atomEnvironment.textEditors : <code>TextEditorRegistry</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+workspace"></a>

### atomEnvironment.workspace : <code>Workspace</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+history"></a>

### atomEnvironment.history : <code>HistoryManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+beep"></a>

### atomEnvironment.beep()
Visually and audibly trigger a beep.

**Kind**: instance method of [<code>AtomEnvironment</code>](#AtomEnvironment)  
**Category**: Messaging the User  
**Emits**: <code>event:beep</code>  
<a name="AtomEnvironment.onDidBeep"></a>

### AtomEnvironment.onDidBeep(callback) ⇒ <code>Disposable</code>
Invoke the given callback whenever [::beep](::beep) is called.

**Kind**: static method of [<code>AtomEnvironment</code>](#AtomEnvironment)  
**Returns**: <code>Disposable</code> - on which `.dispose()` can be called to unsubscribe.  
**Category**: Event Subscription  

| Param | Type | Description |
| --- | --- | --- |
| callback | <code>function</code> | Function to be called whenever [::beep](::beep) is called. |

<a name="Clipboard"></a>

## Clipboard
**Kind**: global class  
<a name="new_Clipboard_new"></a>

### new Clipboard()
Represents the clipboard used for copying and pasting in Pulsar.

An instance of this class is always available as the `atom.clipboard` global.

**Example**  
```js
// returns 'hello'
atom.clipboard.write('hello');

console.log(atom.clipboard.read());
```
<a name="Container"></a>

## Container
A container capture. When another capture's node is contained by the
definition capture's node, it gets added to this instance.

**Kind**: global class  
<a name="CaptureOrganizer"></a>

## CaptureOrganizer
Keeps track of @definition.* captures and the captures they may contain.

**Kind**: global class  
<a name="InvalidProviderError"></a>

## InvalidProviderError ⇐ <code>Error</code>
An error thrown when a newly added symbol provider does not conform to its
contract.

**Kind**: global class  
**Extends**: <code>Error</code>  
<a name="ListController"></a>

## ListController
A class for setting various UI properties on a symbol list palette. This is a
privilege given to the “main” (or _exclusive_) provider for a given task.

This is how we allow a provider to communicate its state to the UI without
giving it full control over the `SelectListView` used to show results.

**Kind**: global class  
<a name="etch"></a>

## etch
**Kind**: global constant  
**Jsx**: etch.dom  
<a name="css"></a>

## css
This file will manage the updating of `autocomplete-css` `completions.json`.
  We will mainly utilize `@webref/css`.listAll() function that returns a full CSS
  list of all properties seperated by their spec shortname. An example
  of this format is defined below for ease of future modifications.

  Some important notes about the data contained here:
    - Often times the `value` within the `property` will be in the following format:
      `<valueGroupName>` or even `<valueGroupName> | value | value2` or just `value | value2`
      It will be important to build a parser that can handle this format.
      The `<valueGroupName>` then can be realized via that specs `values` where
      `values[x].name` will match the `<valueGroupName>`. Another important note about
      handling values here is that oftentimes `values[x].values[]` won't actually
      contain all possible values. And instead this must be handled by checking
      `values[x].value` which is another string of `<valueGroupName> | value`.
      So this should be handled by the same parser.
    - Additionally an important note is that nowhere in this data do we get any kind
      of description about the data that could lend a hand in being documentation.
      So the documentation must be gathered seperatly. Likely the best way to collect
      our documentation data is via `mdn/content`.
      Within `content/files/en-us/web/css` is a directory of folders titled
      by the name of properties.

    The last important thing to note here:
      MDN doesn't have docs on everything. And that's a good thing. But it means
      many of our items don't have any kind of description. For this situation
      we have `manual-property-desc.json` which is a list of manually updated
      descriptions for properties where there are none. This was a last resort
      intended to provide the highest quality of completions possible.
      Overtime many items on this list will likely be able to be removed just as
      new ones are added. After running the update script you'll see a warning
      saying how many properties are without completions that would then need to
      be added to the JSON file.

  "spec-shortname": {
    "spec": {
      "title": "",
      "url": ""
    },
    "properties": [
      {
        "name": "",
        "value": "",
        "initial": "",
        "appliesTo": "",
        "percentages": "",
        "computedValue": "",
        "canonicalOrder": "",
        "animationType": "",
        "media": "",
        "styleDeclaration": [ "", "", "" ]
      }
    ],
    "atrules": [
      {
        "name": "",
        "descriptors": [
          {
            "name": "",
            "for": "",
            "value": "",
            "type": ""
          }
        ]
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "",
        "type": "",
        "prose": "Optional description",
        "value": "",
        "values": [
          {
            "name": "",
            "prose": "Optional Description",
            "type": "",
            "value": ""
          }
        ]
      }
    ],
    "warnings": []
  }

**Kind**: global constant  
<a name="chromiumElementsShim"></a>

## chromiumElementsShim
This file will manage the updating of `autocomplete-html` `completions.json`
  We will partially utilize `@webref/elements` `.listAll()` function that returns
  a full list of HTML Elements along with a defined `interface`.
  To use this `interface` in any meaningful way, we will utilize the dataset
  of Attributes that apply to each `interface` from Chromiums DevTools resource
  `https://github.com/ChromeDevTools/devtools-frontend`.
  Finally from here we will utilize `https://github.com/mdn/content` to parse
  the Markdown docs of MDN's website to retreive descriptions for each element.

  Now for a summary of our `completions.json` file we aim to generate.
  There are two top level elements, `tags` and `attributes`, both objects.
  Within `tags` we expect the following:
  "tags": {
    "a": {
      "attributes": [ "href", "hreflang", "media", "rel", "target", "type" ],
      "description": "....."
    }
  };

  When an entry contains no `attributes` there is no empty array, the element
  simply doesn't exist.

  The `attributes` object contains keys of different elements that themselves
  are objects that can contain several valid keys.
  - global: Seems to be used exclusively for Global Attributes. Is a boolean
            which when false, the key does not appear.
  - type: A ?type? for the attribute. It's meaning is not immediately known.
          Nor a way to reliabley programatically collect it. Some discovered values:
cssStyle: Exclusively used for `class` attribute
boolean: Attributes that only accept `true` or `false`
flag: For attributes that don't require or accept values. eg autoplay
cssId: Exclusively used for the `id` attribute
color: Exclusively used for the `bgcolor` attribute
style: Exclusively used for the `style` attribute
  - description: A text description of the attribute
  - attribOption: A string array of valid values that can exist within the attribute.
                  Such as the case with `rel` where only so many valid options exist.

  Although with our data sources mentioned above, we are able to collect nearly
  all the data needed. Except the `type` that is defined within our
  `completions.json` as well as the `attribOption` within our completions.

  Studying these closer reveals that all attributes listing with our `completions.json`
  do not appear elsewhere, and are nearly all global attributes.

  In this case since there is no sane way to collect this data, we will leave this
  list as a manually maintained section of our `completions.json`.
  This does mean that `curated-attributes.json` is a static document that
  will require manual updating in the future. Or most ideally, will find a way
  to automatically generate the needed data.

**Kind**: global constant  
<a name="update"></a>

## update
This file aims to run some short simple tests against `update.js`. Focusing
 mainly on the Regex used within `sanitizeDescription()`

**Kind**: global constant  
<a name="fs"></a>

## fs
**Kind**: global constant  
**Babel**:   
<a name="dalek"></a>

## dalek
**Kind**: global constant  
**Babel**:   
<a name="assert"></a>

## assert
**Kind**: global constant  
**Babel**:   
<a name="path"></a>

## path
**Kind**: global constant  
**Babel**:   
<a name="path"></a>

## path
**Kind**: global constant  
**Babel**:   
<a name="path"></a>

## path
**Kind**: global constant  
**Babel**:   
<a name="_"></a>

## \_
**Kind**: global constant  
**Babel**:   
<a name="path"></a>

## path
**Kind**: global constant  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="conditionPromise"></a>

## conditionPromise()
**Kind**: global function  
**Babel**:   
<a name="conditionPromise"></a>

## conditionPromise()
**Kind**: global function  
**Babel**:   
<a name="destroy"></a>

## destroy()
**Kind**: global function  
**Describe**: Handles tear down of destructables and subscriptions.
  Does not handle release of memory. This method should only be called
  just before this object is freed, and should only tear down the main
  object components that are guarunteed to exist at all times.  
<a name="destroyChildren"></a>

## destroyChildren()
**Kind**: global function  
**Describe**: Destroys this objects children (non-freeing), it's intended
  to be an ease-of use function for maintaing this object. This method
  should only tear down objects that are selectively allocated upon
  repository discovery.

  Example: this.diffs only exists when we have a repository.  
<a name="releaseChildren"></a>

## releaseChildren()
**Kind**: global function  
**Describe**: The memory releasing complement function of `destroyChildren`.
  frees the memory allocated at all child object storage locations
  when there is no repository.  
<a name="subscribeToRepository"></a>

## subscribeToRepository()
**Kind**: global function  
**Describe**: handles all subscriptions based on the repository in focus  
<a name="updateDiffs"></a>

## updateDiffs()
**Kind**: global function  
**Describe**: Uses text markers in the target editor to visualize
  git modifications, additions, and deletions. The current algorithm
  just redraws the markers each call.  
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="isIterable"></a>

## isIterable(obj) ⇒ <code>Boolean</code>
Ensures an object can be iterated over.

The contract with the symbol providers is that they return an object that
gives us symbol objects when we iterate over it. It'll probably be an array,
but we're cool with anything iterable.

**Kind**: global function  
**Returns**: <code>Boolean</code> - Whether the item will respond correctly to a `for..of`
  loop.  

| Param | Type | Description |
| --- | --- | --- |
| obj | <code>?</code> | Anything. |

<a name="timeout"></a>

## timeout(ms) ⇒ <code>Promise.&lt;true&gt;</code>
Returns a promise that resolves after a given number of milliseconds.

**Kind**: global function  
**Returns**: <code>Promise.&lt;true&gt;</code> - A promise that resolves with `true` as its argument.  

| Param | Type | Description |
| --- | --- | --- |
| ms | <code>Number</code> | Number of milliseconds after which to resolve. |

<a name="getBadgeTextVariant"></a>

## getBadgeTextVariant(text) ⇒ <code>String</code>
Given a string of text, returns a hexadecimal character from `0` to `f` to
represent a classification “bucket.” This is used when assigning colors to
various symbol badges.

**Kind**: global function  
**Returns**: <code>String</code> - A single character that represents a hexadecimal digit.  

| Param | Type | Description |
| --- | --- | --- |
| text | <code>String</code> | The text of the badge. |

<a name="badge"></a>

## badge(text, options) ⇒ <code>Element</code>
Return a DOM element for a badge for a given symbol tag name.

**Kind**: global function  
**Returns**: <code>Element</code> - An element for adding to an `atom-select-view` entry.  

| Param | Type | Description |
| --- | --- | --- |
| text | <code>String</code> | The text of the tag. |
| options | <code>Object</code> | Options. Defaults to an empty object. |
| options.variant | <code>Boolean</code> | Whether to add a class name for the badge's   “variant.” If enabled, this will attempt to assign a different badge color   for each kind of tag. Optional; defaults to `false`. |

<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="conditionPromise"></a>

## conditionPromise()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:

================
File: README.md
================
# Pulsar Docs

![Atom](https://cloud.githubusercontent.com/assets/72919/2874231/3af1db48-d3dd-11e3-98dc-6066f8bc766f.png)

Most of the Pulsar/Atom user and developer documentation is contained on the [Pulsar Website](https://pulsar-edit.dev/docs/launch-manual/).

While the Pulsar website does not yet have the Pulsar API documentation, this is partially available within [Pulsar API Documentation](./Pulsar-API-Documentation.md) or otherwise the original docs are available from community members [here](https://atom-flight-manual-archive.github.io/).

There is also general guidance on the internal [stucture and behavior](./architecture/README.md) of Pulsar available.

## Build documentation

Instructions for building Atom on various platforms from source.

* Moved to [the Flight Manual](https://pulsar-edit.dev/docs/launch-manual/sections/core-hacking/)
    * Linux
    * macOS
    * Windows

## Other documentation

[Native Profiling on macOS](./native-profiling.md)

================
File: Source-Code-Documentation.md
================
## Classes

<dl>
<dt><a href="#AtomEnvironment">AtomEnvironment</a></dt>
<dd><p>Pulsar global for dealing with packages, themes, menus, and the window.</p>
<p>An instance of this class is always available as the <code>atom</code> global.</p>
</dd>
<dt><a href="#Clipboard">Clipboard</a></dt>
<dd></dd>
<dt><a href="#Container">Container</a></dt>
<dd><p>A container capture. When another capture&#39;s node is contained by the
definition capture&#39;s node, it gets added to this instance.</p>
</dd>
<dt><a href="#CaptureOrganizer">CaptureOrganizer</a></dt>
<dd><p>Keeps track of @definition.* captures and the captures they may contain.</p>
</dd>
<dt><a href="#InvalidProviderError">InvalidProviderError</a> ⇐ <code>Error</code></dt>
<dd><p>An error thrown when a newly added symbol provider does not conform to its
contract.</p>
</dd>
<dt><a href="#ListController">ListController</a></dt>
<dd><p>A class for setting various UI properties on a symbol list palette. This is a
privilege given to the “main” (or <em>exclusive</em>) provider for a given task.</p>
<p>This is how we allow a provider to communicate its state to the UI without
giving it full control over the <code>SelectListView</code> used to show results.</p>
</dd>
</dl>

## Constants

<dl>
<dt><a href="#etch">etch</a></dt>
<dd></dd>
<dt><a href="#css">css</a></dt>
<dd><p>This file will manage the updating of <code>autocomplete-css</code> <code>completions.json</code>.
  We will mainly utilize <code>@webref/css</code>.listAll() function that returns a full CSS
  list of all properties seperated by their spec shortname. An example
  of this format is defined below for ease of future modifications.</p>
<p>  Some important notes about the data contained here:
    - Often times the <code>value</code> within the <code>property</code> will be in the following format:
      <code>&lt;valueGroupName&gt;</code> or even <code>&lt;valueGroupName&gt; | value | value2</code> or just <code>value | value2</code>
      It will be important to build a parser that can handle this format.
      The <code>&lt;valueGroupName&gt;</code> then can be realized via that specs <code>values</code> where
      <code>values[x].name</code> will match the <code>&lt;valueGroupName&gt;</code>. Another important note about
      handling values here is that oftentimes <code>values[x].values[]</code> won&#39;t actually
      contain all possible values. And instead this must be handled by checking
      <code>values[x].value</code> which is another string of <code>&lt;valueGroupName&gt; | value</code>.
      So this should be handled by the same parser.
    - Additionally an important note is that nowhere in this data do we get any kind
      of description about the data that could lend a hand in being documentation.
      So the documentation must be gathered seperatly. Likely the best way to collect
      our documentation data is via <code>mdn/content</code>.
      Within <code>content/files/en-us/web/css</code> is a directory of folders titled
      by the name of properties.</p>
<pre><code>The last important thing to note here:
  MDN doesn&#39;t have docs on everything. And that&#39;s a good thing. But it means
  many of our items don&#39;t have any kind of description. For this situation
  we have `manual-property-desc.json` which is a list of manually updated
  descriptions for properties where there are none. This was a last resort
  intended to provide the highest quality of completions possible.
  Overtime many items on this list will likely be able to be removed just as
  new ones are added. After running the update script you&#39;ll see a warning
  saying how many properties are without completions that would then need to
  be added to the JSON file.
</code></pre>
<p>  &quot;spec-shortname&quot;: {
    &quot;spec&quot;: {
      &quot;title&quot;: &quot;&quot;,
      &quot;url&quot;: &quot;&quot;
    },
    &quot;properties&quot;: [
      {
        &quot;name&quot;: &quot;&quot;,
        &quot;value&quot;: &quot;&quot;,
        &quot;initial&quot;: &quot;&quot;,
        &quot;appliesTo&quot;: &quot;&quot;,
        &quot;percentages&quot;: &quot;&quot;,
        &quot;computedValue&quot;: &quot;&quot;,
        &quot;canonicalOrder&quot;: &quot;&quot;,
        &quot;animationType&quot;: &quot;&quot;,
        &quot;media&quot;: &quot;&quot;,
        &quot;styleDeclaration&quot;: [ &quot;&quot;, &quot;&quot;, &quot;&quot; ]
      }
    ],
    &quot;atrules&quot;: [
      {
        &quot;name&quot;: &quot;&quot;,
        &quot;descriptors&quot;: [
          {
            &quot;name&quot;: &quot;&quot;,
            &quot;for&quot;: &quot;&quot;,
            &quot;value&quot;: &quot;&quot;,
            &quot;type&quot;: &quot;&quot;
          }
        ]
      }
    ],
    &quot;selectors&quot;: [],
    &quot;values&quot;: [
      {
        &quot;name&quot;: &quot;&quot;,
        &quot;type&quot;: &quot;&quot;,
        &quot;prose&quot;: &quot;Optional description&quot;,
        &quot;value&quot;: &quot;&quot;,
        &quot;values&quot;: [
          {
            &quot;name&quot;: &quot;&quot;,
            &quot;prose&quot;: &quot;Optional Description&quot;,
            &quot;type&quot;: &quot;&quot;,
            &quot;value&quot;: &quot;&quot;
          }
        ]
      }
    ],
    &quot;warnings&quot;: []
  }</p>
</dd>
<dt><a href="#chromiumElementsShim">chromiumElementsShim</a></dt>
<dd><p>This file will manage the updating of <code>autocomplete-html</code> <code>completions.json</code>
  We will partially utilize <code>@webref/elements</code> <code>.listAll()</code> function that returns
  a full list of HTML Elements along with a defined <code>interface</code>.
  To use this <code>interface</code> in any meaningful way, we will utilize the dataset
  of Attributes that apply to each <code>interface</code> from Chromiums DevTools resource
  <code>https://github.com/ChromeDevTools/devtools-frontend</code>.
  Finally from here we will utilize <code>https://github.com/mdn/content</code> to parse
  the Markdown docs of MDN&#39;s website to retreive descriptions for each element.</p>
<p>  Now for a summary of our <code>completions.json</code> file we aim to generate.
  There are two top level elements, <code>tags</code> and <code>attributes</code>, both objects.
  Within <code>tags</code> we expect the following:
  &quot;tags&quot;: {
    &quot;a&quot;: {
      &quot;attributes&quot;: [ &quot;href&quot;, &quot;hreflang&quot;, &quot;media&quot;, &quot;rel&quot;, &quot;target&quot;, &quot;type&quot; ],
      &quot;description&quot;: &quot;.....&quot;
    }
  };</p>
<p>  When an entry contains no <code>attributes</code> there is no empty array, the element
  simply doesn&#39;t exist.</p>
<p>  The <code>attributes</code> object contains keys of different elements that themselves
  are objects that can contain several valid keys.</p>
<ul>
<li>global: Seems to be used exclusively for Global Attributes. Is a boolean
    which when false, the key does not appear.</li>
<li>type: A ?type? for the attribute. It&#39;s meaning is not immediately known.
  Nor a way to reliabley programatically collect it. Some discovered values:</li>
</ul>
<p>cssStyle: Exclusively used for <code>class</code> attribute
boolean: Attributes that only accept <code>true</code> or <code>false</code>
flag: For attributes that don&#39;t require or accept values. eg autoplay
cssId: Exclusively used for the <code>id</code> attribute
color: Exclusively used for the <code>bgcolor</code> attribute
style: Exclusively used for the <code>style</code> attribute</p>
<ul>
<li>description: A text description of the attribute</li>
<li>attribOption: A string array of valid values that can exist within the attribute.
          Such as the case with <code>rel</code> where only so many valid options exist.</li>
</ul>
<p>  Although with our data sources mentioned above, we are able to collect nearly
  all the data needed. Except the <code>type</code> that is defined within our
  <code>completions.json</code> as well as the <code>attribOption</code> within our completions.</p>
<p>  Studying these closer reveals that all attributes listing with our <code>completions.json</code>
  do not appear elsewhere, and are nearly all global attributes.</p>
<p>  In this case since there is no sane way to collect this data, we will leave this
  list as a manually maintained section of our <code>completions.json</code>.
  This does mean that <code>curated-attributes.json</code> is a static document that
  will require manual updating in the future. Or most ideally, will find a way
  to automatically generate the needed data.</p>
</dd>
<dt><a href="#update">update</a></dt>
<dd><p>This file aims to run some short simple tests against <code>update.js</code>. Focusing
 mainly on the Regex used within <code>sanitizeDescription()</code></p>
</dd>
<dt><a href="#fs">fs</a></dt>
<dd></dd>
<dt><a href="#dalek">dalek</a></dt>
<dd></dd>
<dt><a href="#assert">assert</a></dt>
<dd></dd>
<dt><a href="#path">path</a></dt>
<dd></dd>
<dt><a href="#path">path</a></dt>
<dd></dd>
<dt><a href="#path">path</a></dt>
<dd></dd>
<dt><a href="#_">_</a></dt>
<dd></dd>
<dt><a href="#path">path</a></dt>
<dd></dd>
</dl>

## Functions

<dl>
<dt><a href="#renderMarkdown">renderMarkdown(content, givenOpts)</a> ⇒ <code>string</code></dt>
<dd><p>Takes a Markdown document and renders it as HTML.</p>
</dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#conditionPromise">conditionPromise()</a></dt>
<dd></dd>
<dt><a href="#conditionPromise">conditionPromise()</a></dt>
<dd></dd>
<dt><a href="#destroy">destroy()</a></dt>
<dd></dd>
<dt><a href="#destroyChildren">destroyChildren()</a></dt>
<dd></dd>
<dt><a href="#releaseChildren">releaseChildren()</a></dt>
<dd></dd>
<dt><a href="#subscribeToRepository">subscribeToRepository()</a></dt>
<dd></dd>
<dt><a href="#updateDiffs">updateDiffs()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#isIterable">isIterable(obj)</a> ⇒ <code>Boolean</code></dt>
<dd><p>Ensures an object can be iterated over.</p>
<p>The contract with the symbol providers is that they return an object that
gives us symbol objects when we iterate over it. It&#39;ll probably be an array,
but we&#39;re cool with anything iterable.</p>
</dd>
<dt><a href="#timeout">timeout(ms)</a> ⇒ <code>Promise.&lt;true&gt;</code></dt>
<dd><p>Returns a promise that resolves after a given number of milliseconds.</p>
</dd>
<dt><a href="#getBadgeTextVariant">getBadgeTextVariant(text)</a> ⇒ <code>String</code></dt>
<dd><p>Given a string of text, returns a hexadecimal character from <code>0</code> to <code>f</code> to
represent a classification “bucket.” This is used when assigning colors to
various symbol badges.</p>
</dd>
<dt><a href="#badge">badge(text, options)</a> ⇒ <code>Element</code></dt>
<dd><p>Return a DOM element for a badge for a given symbol tag name.</p>
</dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
<dt><a href="#conditionPromise">conditionPromise()</a></dt>
<dd></dd>
<dt><a href="#beforeEach">beforeEach()</a></dt>
<dd></dd>
</dl>

<a name="AtomEnvironment"></a>

## AtomEnvironment
Pulsar global for dealing with packages, themes, menus, and the window.

An instance of this class is always available as the `atom` global.

**Kind**: global class  

* [AtomEnvironment](#AtomEnvironment)
    * _instance_
        * [.clipboard](#AtomEnvironment+clipboard) : [<code>Clipboard</code>](#Clipboard)
        * [.deserializers](#AtomEnvironment+deserializers) : <code>DeserializerManager</code>
        * [.views](#AtomEnvironment+views) : <code>ViewRegistry</code>
        * [.notifications](#AtomEnvironment+notifications) : <code>NotificationManager</code>
        * [.config](#AtomEnvironment+config) : <code>Config</code>
        * [.keymaps](#AtomEnvironment+keymaps) : <code>KeymapManager</code>
        * [.tooltips](#AtomEnvironment+tooltips) : <code>TooltipManager</code>
        * [.commands](#AtomEnvironment+commands) : <code>CommandRegistry</code>
        * [.grammars](#AtomEnvironment+grammars) : <code>GrammarRegistry</code>
        * [.styles](#AtomEnvironment+styles) : <code>StyleManager</code>
        * [.packages](#AtomEnvironment+packages) : <code>PackageManager</code>
        * [.themes](#AtomEnvironment+themes) : <code>ThemeManager</code>
        * [.menu](#AtomEnvironment+menu) : <code>MenuManager</code>
        * [.contextMenu](#AtomEnvironment+contextMenu) : <code>ContextMenuManager</code>
        * [.project](#AtomEnvironment+project) : <code>Project</code>
        * [.textEditors](#AtomEnvironment+textEditors) : <code>TextEditorRegistry</code>
        * [.workspace](#AtomEnvironment+workspace) : <code>Workspace</code>
        * [.history](#AtomEnvironment+history) : <code>HistoryManager</code>
        * _Messaging the User_
            * [.beep()](#AtomEnvironment+beep)
    * _static_
        * [.preloadPackages](#AtomEnvironment.preloadPackages) ℗
        * _Event Subscription_
            * [.onDidBeep(callback)](#AtomEnvironment.onDidBeep) ⇒ <code>Disposable</code>

<a name="AtomEnvironment+clipboard"></a>

### atomEnvironment.clipboard : [<code>Clipboard</code>](#Clipboard)
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+deserializers"></a>

### atomEnvironment.deserializers : <code>DeserializerManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+views"></a>

### atomEnvironment.views : <code>ViewRegistry</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+notifications"></a>

### atomEnvironment.notifications : <code>NotificationManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+config"></a>

### atomEnvironment.config : <code>Config</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+keymaps"></a>

### atomEnvironment.keymaps : <code>KeymapManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+tooltips"></a>

### atomEnvironment.tooltips : <code>TooltipManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+commands"></a>

### atomEnvironment.commands : <code>CommandRegistry</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+grammars"></a>

### atomEnvironment.grammars : <code>GrammarRegistry</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+styles"></a>

### atomEnvironment.styles : <code>StyleManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+packages"></a>

### atomEnvironment.packages : <code>PackageManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+themes"></a>

### atomEnvironment.themes : <code>ThemeManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+menu"></a>

### atomEnvironment.menu : <code>MenuManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+contextMenu"></a>

### atomEnvironment.contextMenu : <code>ContextMenuManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+project"></a>

### atomEnvironment.project : <code>Project</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+textEditors"></a>

### atomEnvironment.textEditors : <code>TextEditorRegistry</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+workspace"></a>

### atomEnvironment.workspace : <code>Workspace</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+history"></a>

### atomEnvironment.history : <code>HistoryManager</code>
**Kind**: instance property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
<a name="AtomEnvironment+beep"></a>

### atomEnvironment.beep()
Visually and audibly trigger a beep.

**Kind**: instance method of [<code>AtomEnvironment</code>](#AtomEnvironment)  
**Category**: Messaging the User  
**Emits**: <code>event:beep</code>  
<a name="AtomEnvironment.preloadPackages"></a>

### AtomEnvironment.preloadPackages ℗
Returns output of `preloadPackages()` for this Classes Instance of `Packages`.

**Kind**: static property of [<code>AtomEnvironment</code>](#AtomEnvironment)  
**Access**: private  
<a name="AtomEnvironment.onDidBeep"></a>

### AtomEnvironment.onDidBeep(callback) ⇒ <code>Disposable</code>
Invoke the given callback whenever [::beep](::beep) is called.

**Kind**: static method of [<code>AtomEnvironment</code>](#AtomEnvironment)  
**Returns**: <code>Disposable</code> - on which `.dispose()` can be called to unsubscribe.  
**Category**: Event Subscription  

| Param | Type | Description |
| --- | --- | --- |
| callback | <code>function</code> | Function to be called whenever [::beep](::beep) is called. |

<a name="Clipboard"></a>

## Clipboard
**Kind**: global class  
<a name="new_Clipboard_new"></a>

### new Clipboard()
Represents the clipboard used for copying and pasting in Pulsar.

An instance of this class is always available as the `atom.clipboard` global.

**Example**  
```js
// returns 'hello'
atom.clipboard.write('hello');

console.log(atom.clipboard.read());
```
<a name="Container"></a>

## Container
A container capture. When another capture's node is contained by the
definition capture's node, it gets added to this instance.

**Kind**: global class  
<a name="CaptureOrganizer"></a>

## CaptureOrganizer
Keeps track of @definition.* captures and the captures they may contain.

**Kind**: global class  
<a name="InvalidProviderError"></a>

## InvalidProviderError ⇐ <code>Error</code>
An error thrown when a newly added symbol provider does not conform to its
contract.

**Kind**: global class  
**Extends**: <code>Error</code>  
<a name="ListController"></a>

## ListController
A class for setting various UI properties on a symbol list palette. This is a
privilege given to the “main” (or _exclusive_) provider for a given task.

This is how we allow a provider to communicate its state to the UI without
giving it full control over the `SelectListView` used to show results.

**Kind**: global class  
<a name="etch"></a>

## etch
**Kind**: global constant  
**Jsx**: etch.dom  
<a name="css"></a>

## css
This file will manage the updating of `autocomplete-css` `completions.json`.
  We will mainly utilize `@webref/css`.listAll() function that returns a full CSS
  list of all properties seperated by their spec shortname. An example
  of this format is defined below for ease of future modifications.

  Some important notes about the data contained here:
    - Often times the `value` within the `property` will be in the following format:
      `<valueGroupName>` or even `<valueGroupName> | value | value2` or just `value | value2`
      It will be important to build a parser that can handle this format.
      The `<valueGroupName>` then can be realized via that specs `values` where
      `values[x].name` will match the `<valueGroupName>`. Another important note about
      handling values here is that oftentimes `values[x].values[]` won't actually
      contain all possible values. And instead this must be handled by checking
      `values[x].value` which is another string of `<valueGroupName> | value`.
      So this should be handled by the same parser.
    - Additionally an important note is that nowhere in this data do we get any kind
      of description about the data that could lend a hand in being documentation.
      So the documentation must be gathered seperatly. Likely the best way to collect
      our documentation data is via `mdn/content`.
      Within `content/files/en-us/web/css` is a directory of folders titled
      by the name of properties.

    The last important thing to note here:
      MDN doesn't have docs on everything. And that's a good thing. But it means
      many of our items don't have any kind of description. For this situation
      we have `manual-property-desc.json` which is a list of manually updated
      descriptions for properties where there are none. This was a last resort
      intended to provide the highest quality of completions possible.
      Overtime many items on this list will likely be able to be removed just as
      new ones are added. After running the update script you'll see a warning
      saying how many properties are without completions that would then need to
      be added to the JSON file.

  "spec-shortname": {
    "spec": {
      "title": "",
      "url": ""
    },
    "properties": [
      {
        "name": "",
        "value": "",
        "initial": "",
        "appliesTo": "",
        "percentages": "",
        "computedValue": "",
        "canonicalOrder": "",
        "animationType": "",
        "media": "",
        "styleDeclaration": [ "", "", "" ]
      }
    ],
    "atrules": [
      {
        "name": "",
        "descriptors": [
          {
            "name": "",
            "for": "",
            "value": "",
            "type": ""
          }
        ]
      }
    ],
    "selectors": [],
    "values": [
      {
        "name": "",
        "type": "",
        "prose": "Optional description",
        "value": "",
        "values": [
          {
            "name": "",
            "prose": "Optional Description",
            "type": "",
            "value": ""
          }
        ]
      }
    ],
    "warnings": []
  }

**Kind**: global constant  
<a name="chromiumElementsShim"></a>

## chromiumElementsShim
This file will manage the updating of `autocomplete-html` `completions.json`
  We will partially utilize `@webref/elements` `.listAll()` function that returns
  a full list of HTML Elements along with a defined `interface`.
  To use this `interface` in any meaningful way, we will utilize the dataset
  of Attributes that apply to each `interface` from Chromiums DevTools resource
  `https://github.com/ChromeDevTools/devtools-frontend`.
  Finally from here we will utilize `https://github.com/mdn/content` to parse
  the Markdown docs of MDN's website to retreive descriptions for each element.

  Now for a summary of our `completions.json` file we aim to generate.
  There are two top level elements, `tags` and `attributes`, both objects.
  Within `tags` we expect the following:
  "tags": {
    "a": {
      "attributes": [ "href", "hreflang", "media", "rel", "target", "type" ],
      "description": "....."
    }
  };

  When an entry contains no `attributes` there is no empty array, the element
  simply doesn't exist.

  The `attributes` object contains keys of different elements that themselves
  are objects that can contain several valid keys.
  - global: Seems to be used exclusively for Global Attributes. Is a boolean
            which when false, the key does not appear.
  - type: A ?type? for the attribute. It's meaning is not immediately known.
          Nor a way to reliabley programatically collect it. Some discovered values:
cssStyle: Exclusively used for `class` attribute
boolean: Attributes that only accept `true` or `false`
flag: For attributes that don't require or accept values. eg autoplay
cssId: Exclusively used for the `id` attribute
color: Exclusively used for the `bgcolor` attribute
style: Exclusively used for the `style` attribute
  - description: A text description of the attribute
  - attribOption: A string array of valid values that can exist within the attribute.
                  Such as the case with `rel` where only so many valid options exist.

  Although with our data sources mentioned above, we are able to collect nearly
  all the data needed. Except the `type` that is defined within our
  `completions.json` as well as the `attribOption` within our completions.

  Studying these closer reveals that all attributes listing with our `completions.json`
  do not appear elsewhere, and are nearly all global attributes.

  In this case since there is no sane way to collect this data, we will leave this
  list as a manually maintained section of our `completions.json`.
  This does mean that `curated-attributes.json` is a static document that
  will require manual updating in the future. Or most ideally, will find a way
  to automatically generate the needed data.

**Kind**: global constant  
<a name="update"></a>

## update
This file aims to run some short simple tests against `update.js`. Focusing
 mainly on the Regex used within `sanitizeDescription()`

**Kind**: global constant  
<a name="fs"></a>

## fs
**Kind**: global constant  
**Babel**:   
<a name="dalek"></a>

## dalek
**Kind**: global constant  
**Babel**:   
<a name="assert"></a>

## assert
**Kind**: global constant  
**Babel**:   
<a name="path"></a>

## path
**Kind**: global constant  
**Babel**:   
<a name="path"></a>

## path
**Kind**: global constant  
**Babel**:   
<a name="path"></a>

## path
**Kind**: global constant  
**Babel**:   
<a name="_"></a>

## \_
**Kind**: global constant  
**Babel**:   
<a name="path"></a>

## path
**Kind**: global constant  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="conditionPromise"></a>

## conditionPromise()
**Kind**: global function  
**Babel**:   
<a name="conditionPromise"></a>

## conditionPromise()
**Kind**: global function  
**Babel**:   
<a name="destroy"></a>

## destroy()
**Kind**: global function  
**Describe**: Handles tear down of destructables and subscriptions.
  Does not handle release of memory. This method should only be called
  just before this object is freed, and should only tear down the main
  object components that are guarunteed to exist at all times.  
<a name="destroyChildren"></a>

## destroyChildren()
**Kind**: global function  
**Describe**: Destroys this objects children (non-freeing), it's intended
  to be an ease-of use function for maintaing this object. This method
  should only tear down objects that are selectively allocated upon
  repository discovery.

  Example: this.diffs only exists when we have a repository.  
<a name="releaseChildren"></a>

## releaseChildren()
**Kind**: global function  
**Describe**: The memory releasing complement function of `destroyChildren`.
  frees the memory allocated at all child object storage locations
  when there is no repository.  
<a name="subscribeToRepository"></a>

## subscribeToRepository()
**Kind**: global function  
**Describe**: handles all subscriptions based on the repository in focus  
<a name="updateDiffs"></a>

## updateDiffs()
**Kind**: global function  
**Describe**: Uses text markers in the target editor to visualize
  git modifications, additions, and deletions. The current algorithm
  just redraws the markers each call.  
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="isIterable"></a>

## isIterable(obj) ⇒ <code>Boolean</code>
Ensures an object can be iterated over.

The contract with the symbol providers is that they return an object that
gives us symbol objects when we iterate over it. It'll probably be an array,
but we're cool with anything iterable.

**Kind**: global function  
**Returns**: <code>Boolean</code> - Whether the item will respond correctly to a `for..of`
  loop.  

| Param | Type | Description |
| --- | --- | --- |
| obj | <code>?</code> | Anything. |

<a name="timeout"></a>

## timeout(ms) ⇒ <code>Promise.&lt;true&gt;</code>
Returns a promise that resolves after a given number of milliseconds.

**Kind**: global function  
**Returns**: <code>Promise.&lt;true&gt;</code> - A promise that resolves with `true` as its argument.  

| Param | Type | Description |
| --- | --- | --- |
| ms | <code>Number</code> | Number of milliseconds after which to resolve. |

<a name="getBadgeTextVariant"></a>

## getBadgeTextVariant(text) ⇒ <code>String</code>
Given a string of text, returns a hexadecimal character from `0` to `f` to
represent a classification “bucket.” This is used when assigning colors to
various symbol badges.

**Kind**: global function  
**Returns**: <code>String</code> - A single character that represents a hexadecimal digit.  

| Param | Type | Description |
| --- | --- | --- |
| text | <code>String</code> | The text of the badge. |

<a name="badge"></a>

## badge(text, options) ⇒ <code>Element</code>
Return a DOM element for a badge for a given symbol tag name.

**Kind**: global function  
**Returns**: <code>Element</code> - An element for adding to an `atom-select-view` entry.  

| Param | Type | Description |
| --- | --- | --- |
| text | <code>String</code> | The text of the tag. |
| options | <code>Object</code> | Options. Defaults to an empty object. |
| options.variant | <code>Boolean</code> | Whether to add a class name for the badge's   “variant.” If enabled, this will attempt to assign a different badge color   for each kind of tag. Optional; defaults to `false`. |

<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:   
<a name="conditionPromise"></a>

## conditionPromise()
**Kind**: global function  
**Babel**:   
<a name="beforeEach"></a>

## beforeEach()
**Kind**: global function  
**Babel**:

================
File: apm-rest-api.md
================
# Atom.io package and update API

The information that was here has been moved to [a permanent home inside Atom's Flight Manual.](https://flight-manual.atom.io/atom-server-side-apis/)

================
File: architecture/README.md
================
# Pulsar Architecture

This directory contains a collection of files and diagrams, that aim to easily explain some of the core components or behaviors of Pulsar.

Remember that keeping this charts up to date is best effort, and the age of these files should be taken into consideration.

## Contents
  - [Startup Overview](./overview.md)
  - ['The World'](./the-world.md)
  - [Package Preload](./package-preload.md)

================
File: architecture/assets/how-everything-connects.svg
================
<?xml version="1.0" encoding="us-ascii" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="1646px" preserveAspectRatio="none" style="width:1371px;height:1646px;background:#FFFFFF;" version="1.1" viewBox="0 0 1371 1646" width="1371px" zoomAndPan="magnify"><defs/><g><line style="stroke:#181818;stroke-width:1.5;" x1="1218" x2="1218" y1="63.9688" y2="83.9688"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="63" x="1186.5" y="83.9688"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="43" x="1196.5" y="105.1074">Startup</text><line style="stroke:#181818;stroke-width:1.5;" x1="1208" x2="1218" y1="149.9219" y2="149.9219"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="136" x="1072" y="132.9375"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="116" x="1082" y="154.0762">Main Process Tests</text><line style="stroke:#181818;stroke-width:1.5;" x1="177.5" x2="1218" y1="198.8906" y2="198.8906"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="133" x="44.5" y="181.9063"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="113" x="54.5" y="203.0449">Application Startup</text><line style="stroke:#181818;stroke-width:1.5;" x1="101" x2="111" y1="247.8594" y2="247.8594"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="91" x="10" y="230.875"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="71" x="20" y="252.0137">Test Runner</text><line style="stroke:#181818;stroke-width:1.5;" x1="111" x2="121" y1="247.8594" y2="247.8594"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="190" x="121" y="230.875"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="170" x="131" y="252.0137">Initialize Application Window</text><line style="stroke:#181818;stroke-width:1.5;" x1="216" x2="783" y1="296.8281" y2="296.8281"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="88" x="783" y="279.8438"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="68" x="793" y="300.9824">'The World'</text><line style="stroke:#181818;stroke-width:1.5;" x1="713" x2="827" y1="345.7969" y2="345.7969"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="58" x="655" y="328.8125"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="38" x="665" y="349.9512">Config</text><line style="stroke:#181818;stroke-width:1.5;" x1="684" x2="694" y1="394.7656" y2="394.7656"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="123" x="694" y="377.7813"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="103" x="704" y="398.9199">ScopeDescriptor</text><line style="stroke:#181818;stroke-width:1.5;" x1="684" x2="684" y1="362.7813" y2="394.7656"/><line style="stroke:#181818;stroke-width:1.5;" x1="817" x2="827" y1="443.7344" y2="443.7344"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="129" x="688" y="426.75"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="109" x="698" y="447.8887">CommandRegistry</text><line style="stroke:#181818;stroke-width:1.5;" x1="817" x2="827" y1="492.7031" y2="492.7031"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="135" x="682" y="475.7188"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="115" x="692" y="496.8574">URIHandlerRegistry</text><line style="stroke:#181818;stroke-width:1.5;" x1="759" x2="827" y1="541.6719" y2="541.6719"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="104" x="655" y="524.6875"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="84" x="665" y="545.8262">MenuManager</text><line style="stroke:#181818;stroke-width:1.5;" x1="707" x2="717" y1="590.6406" y2="590.6406"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="100" x="717" y="573.6563"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="80" x="727" y="594.7949">MenuHelpers</text><line style="stroke:#181818;stroke-width:1.5;" x1="707" x2="707" y1="558.6563" y2="590.6406"/><line style="stroke:#181818;stroke-width:1.5;" x1="749" x2="827" y1="639.6094" y2="639.6094"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="130" x="619" y="622.625"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="110" x="629" y="643.7637">TextEditorRegistry</text><line style="stroke:#181818;stroke-width:1.5;" x1="684" x2="694" y1="688.5781" y2="688.5781"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="81" x="694" y="671.5938"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="61" x="704" y="692.7324">TextEditor</text><line style="stroke:#181818;stroke-width:1.5;" x1="684" x2="694" y1="737.5469" y2="737.5469"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="123" x="694" y="720.5625"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="103" x="704" y="741.7012">ScopeDescriptor</text><line style="stroke:#181818;stroke-width:1.5;" x1="684" x2="684" y1="656.5938" y2="737.5469"/><line style="stroke:#181818;stroke-width:1.5;" x1="817" x2="827" y1="786.5156" y2="786.5156"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="145" x="672" y="769.5313"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="125" x="682" y="790.6699">DeserializerManager</text><line style="stroke:#181818;stroke-width:1.5;" x1="817" x2="827" y1="835.4844" y2="835.4844"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="98" x="719" y="818.5"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="78" x="729" y="839.6387">ViewRegistry</text><line style="stroke:#181818;stroke-width:1.5;" x1="757" x2="827" y1="884.4531" y2="884.4531"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="122" x="635" y="867.4688"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="102" x="645" y="888.6074">PackageManager</text><line style="stroke:#181818;stroke-width:1.5;" x1="696" x2="706" y1="933.4219" y2="933.4219"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="70" x="706" y="916.4375"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="50" x="716" y="937.5762">Package</text><line style="stroke:#181818;stroke-width:1.5;" x1="696" x2="706" y1="982.3906" y2="982.3906"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="111" x="706" y="965.4063"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="91" x="716" y="986.5449">ThemePackage</text><line style="stroke:#181818;stroke-width:1.5;" x1="696" x2="706" y1="1031.3594" y2="1031.3594"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="101" x="706" y="1014.375"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="81" x="716" y="1035.5137">ModuleCache</text><line style="stroke:#181818;stroke-width:1.5;" x1="696" x2="696" y1="901.4375" y2="1031.3594"/><line style="stroke:#181818;stroke-width:1.5;" x1="817" x2="827" y1="1080.3281" y2="1080.3281"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="127" x="690" y="1063.3438"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="107" x="700" y="1084.4824">CommandInstaller</text><line style="stroke:#181818;stroke-width:1.5;" x1="817" x2="827" y1="1129.2969" y2="1129.2969"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="163" x="654" y="1112.3125"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="143" x="664" y="1133.4512">ProtocolHandlerInstaller</text><line style="stroke:#181818;stroke-width:1.5;" x1="817" x2="827" y1="1178.2656" y2="1178.2656"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="143" x="674" y="1161.2813"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="123" x="684" y="1182.4199">AutoUpdateManager</text><line style="stroke:#181818;stroke-width:1.5;" x1="817" x2="827" y1="1227.2344" y2="1227.2344"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="148" x="669" y="1210.25"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="128" x="679" y="1231.3887">WindowEventHandler</text><line style="stroke:#181818;stroke-width:1.5;" x1="743" x2="753" y1="1276.2031" y2="1276.2031"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="52" x="753" y="1259.2188"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="32" x="763" y="1280.3574">listen</text><line style="stroke:#181818;stroke-width:1.5;" x1="743" x2="743" y1="1244.2188" y2="1276.2031"/><line style="stroke:#181818;stroke-width:1.5;" x1="625" x2="827" y1="1325.1719" y2="1325.1719"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="124" x="501" y="1308.1875"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="104" x="511" y="1329.3262">GrammarRegistry</text><line style="stroke:#181818;stroke-width:1.5;" x1="505" x2="563" y1="1374.1406" y2="1374.1406"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="204" x="301" y="1357.1563"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="184" x="311" y="1378.2949">NodeTreeSitterLanguageMode</text><line style="stroke:#181818;stroke-width:1.5;" x1="393" x2="403" y1="1423.1094" y2="1423.1094"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="167" x="226" y="1406.125"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="147" x="236" y="1427.2637">TextMateLanguageMode</text><line style="stroke:#181818;stroke-width:1.5;" x1="393" x2="403" y1="1472.0781" y2="1472.0781"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="123" x="270" y="1455.0938"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="103" x="280" y="1476.2324">ScopeDescriptor</text><line style="stroke:#181818;stroke-width:1.5;" x1="393" x2="403" y1="1521.0469" y2="1521.0469"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="57" x="336" y="1504.0625"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="37" x="346" y="1525.2012">Token</text><line style="stroke:#181818;stroke-width:1.5;" x1="403" x2="413" y1="1423.1094" y2="1423.1094"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="98" x="413" y="1406.125"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="78" x="423" y="1427.2637">TreeIndenter</text><line style="stroke:#181818;stroke-width:1.5;" x1="403" x2="413" y1="1472.0781" y2="1472.0781"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="107" x="413" y="1455.0938"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="87" x="423" y="1476.2324">TokenizedLine</text><line style="stroke:#181818;stroke-width:1.5;" x1="403" x2="413" y1="1521.0469" y2="1521.0469"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="140" x="413" y="1504.0625"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="120" x="423" y="1525.2012">matcherForSelector</text><line style="stroke:#181818;stroke-width:1.5;" x1="403" x2="403" y1="1391.125" y2="1521.0469"/><line style="stroke:#181818;stroke-width:1.5;" x1="553" x2="563" y1="1570.0156" y2="1570.0156"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="123" x="430" y="1553.0313"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="103" x="440" y="1574.1699">ScopeDescriptor</text><line style="stroke:#181818;stroke-width:1.5;" x1="563" x2="573" y1="1374.1406" y2="1374.1406"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="208" x="573" y="1357.1563"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="188" x="583" y="1378.2949">WASMTreeSitterLanguageNode</text><line style="stroke:#181818;stroke-width:1.5;" x1="677" x2="687" y1="1423.1094" y2="1423.1094"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="58" x="687" y="1406.125"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="38" x="697" y="1427.2637">Parser</text><line style="stroke:#181818;stroke-width:1.5;" x1="677" x2="677" y1="1391.125" y2="1423.1094"/><line style="stroke:#181818;stroke-width:1.5;" x1="563" x2="600.5" y1="1472.0781" y2="1472.0781"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="167" x="600.5" y="1455.0938"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="147" x="610.5" y="1476.2324">TextMateLanguageMode</text><line style="stroke:#181818;stroke-width:1.5;" x1="674" x2="684" y1="1521.0469" y2="1521.0469"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="101" x="573" y="1504.0625"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="81" x="583" y="1525.2012">TokenIterator</text><line style="stroke:#181818;stroke-width:1.5;" x1="674" x2="684" y1="1570.0156" y2="1570.0156"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="96" x="578" y="1553.0313"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="76" x="588" y="1574.1699">NullGrammar</text><line style="stroke:#181818;stroke-width:1.5;" x1="684" x2="694" y1="1521.0469" y2="1521.0469"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="107" x="694" y="1504.0625"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="87" x="704" y="1525.2012">TokenizedLine</text><line style="stroke:#181818;stroke-width:1.5;" x1="684" x2="694" y1="1570.0156" y2="1570.0156"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="123" x="694" y="1553.0313"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="103" x="704" y="1574.1699">ScopeDescriptor</text><line style="stroke:#181818;stroke-width:1.5;" x1="684" x2="684" y1="1489.0625" y2="1570.0156"/><line style="stroke:#181818;stroke-width:1.5;" x1="563" x2="573" y1="1618.9844" y2="1618.9844"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="57" x="573" y="1602"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="37" x="583" y="1623.1387">Token</text><line style="stroke:#181818;stroke-width:1.5;" x1="563" x2="563" y1="1342.1563" y2="1618.9844"/><line style="stroke:#181818;stroke-width:1.5;" x1="827" x2="837" y1="345.7969" y2="345.7969"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="114" x="837" y="328.8125"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="94" x="847" y="349.9512">KemapManager</text><line style="stroke:#181818;stroke-width:1.5;" x1="827" x2="837" y1="394.7656" y2="394.7656"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="108" x="837" y="377.7813"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="88" x="847" y="398.9199">TolltipManager</text><line style="stroke:#181818;stroke-width:1.5;" x1="891" x2="901" y1="443.7344" y2="443.7344"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="61" x="901" y="426.75"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="41" x="911" y="447.8887">Tooltip</text><line style="stroke:#181818;stroke-width:1.5;" x1="891" x2="891" y1="411.75" y2="443.7344"/><line style="stroke:#181818;stroke-width:1.5;" x1="827" x2="837" y1="492.7031" y2="492.7031"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="102" x="837" y="475.7188"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="82" x="847" y="496.8574">StyleManager</text><line style="stroke:#181818;stroke-width:1.5;" x1="888" x2="898" y1="541.6719" y2="541.6719"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="144" x="898" y="524.6875"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="124" x="908" y="545.8262">createStylesElement</text><line style="stroke:#181818;stroke-width:1.5;" x1="888" x2="898" y1="590.6406" y2="590.6406"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="221" x="898" y="573.6563"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="201" x="908" y="594.7949">DEPRECATED_SYNTAX_SELECTORS</text><line style="stroke:#181818;stroke-width:1.5;" x1="888" x2="888" y1="509.6875" y2="590.6406"/><line style="stroke:#181818;stroke-width:1.5;" x1="827" x2="837" y1="639.6094" y2="639.6094"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="150" x="837" y="622.625"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="130" x="847" y="643.7637">ContextMenuManager</text><line style="stroke:#181818;stroke-width:1.5;" x1="912" x2="922" y1="688.5781" y2="688.5781"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="100" x="922" y="671.5938"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="80" x="932" y="692.7324">MenuHelpers</text><line style="stroke:#181818;stroke-width:1.5;" x1="912" x2="922" y1="737.5469" y2="737.5469"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="109" x="922" y="720.5625"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="89" x="932" y="741.7012">sortMenuItems</text><line style="stroke:#181818;stroke-width:1.5;" x1="912" x2="912" y1="656.5938" y2="737.5469"/><line style="stroke:#181818;stroke-width:1.5;" x1="827" x2="837" y1="786.5156" y2="786.5156"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="115" x="837" y="769.5313"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="95" x="847" y="790.6699">HistoryManager</text><line style="stroke:#181818;stroke-width:1.5;" x1="827" x2="837" y1="835.4844" y2="835.4844"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="138" x="837" y="818.5"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="118" x="847" y="839.6387">NotificationManager</text><line style="stroke:#181818;stroke-width:1.5;" x1="906" x2="916" y1="884.4531" y2="884.4531"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="86" x="916" y="867.4688"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="66" x="926" y="888.6074">Notification</text><line style="stroke:#181818;stroke-width:1.5;" x1="906" x2="906" y1="852.4688" y2="884.4531"/><line style="stroke:#181818;stroke-width:1.5;" x1="827" x2="837" y1="933.4219" y2="933.4219"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="84" x="837" y="916.4375"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="64" x="847" y="937.5762">StateStore</text><line style="stroke:#181818;stroke-width:1.5;" x1="827" x2="837" y1="982.3906" y2="982.3906"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="113" x="837" y="965.4063"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="93" x="847" y="986.5449">ThemeManager</text><line style="stroke:#181818;stroke-width:1.5;" x1="893.5" x2="903.5" y1="1031.3594" y2="1031.3594"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="134" x="903.5" y="1014.375"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="114" x="913.5" y="1035.5137">LessCompileCache</text><line style="stroke:#181818;stroke-width:1.5;" x1="893.5" x2="893.5" y1="999.375" y2="1031.3594"/><line style="stroke:#181818;stroke-width:1.5;" x1="827" x2="837" y1="1080.3281" y2="1080.3281"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="61" x="837" y="1063.3438"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="41" x="847" y="1084.4824">Project</text><line style="stroke:#181818;stroke-width:1.5;" x1="867.5" x2="877.5" y1="1129.2969" y2="1129.2969"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="79" x="877.5" y="1112.3125"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="59" x="887.5" y="1133.4512">watchPath</text><line style="stroke:#181818;stroke-width:1.5;" x1="867.5" x2="877.5" y1="1178.2656" y2="1178.2656"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="168" x="877.5" y="1161.2813"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="148" x="887.5" y="1182.4199">DefaultDirectoryProvider</text><line style="stroke:#181818;stroke-width:1.5;" x1="867.5" x2="877.5" y1="1227.2344" y2="1227.2344"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="57" x="877.5" y="1210.25"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="37" x="887.5" y="1231.3887">Model</text><line style="stroke:#181818;stroke-width:1.5;" x1="867.5" x2="877.5" y1="1276.2031" y2="1276.2031"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="151" x="877.5" y="1259.2188"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="131" x="887.5" y="1280.3574">GitRepositoryProvider</text><line style="stroke:#181818;stroke-width:1.5;" x1="867.5" x2="867.5" y1="1097.3125" y2="1276.2031"/><line style="stroke:#181818;stroke-width:1.5;" x1="827" x2="980.5" y1="1325.1719" y2="1325.1719"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="89" x="980.5" y="1308.1875"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="69" x="990.5" y="1329.3262">Workspace</text><line style="stroke:#181818;stroke-width:1.5;" x1="1015" x2="1025" y1="1374.1406" y2="1374.1406"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="178" x="837" y="1357.1563"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="158" x="847" y="1378.2949">RipgrepDirectorySearcher</text><line style="stroke:#181818;stroke-width:1.5;" x1="1015" x2="1025" y1="1423.1094" y2="1423.1094"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="176" x="839" y="1406.125"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="156" x="849" y="1427.2637">createWorkspaceElement</text><line style="stroke:#181818;stroke-width:1.5;" x1="1015" x2="1025" y1="1472.0781" y2="1472.0781"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="84" x="931" y="1455.0938"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="64" x="941" y="1476.2324">StateStore</text><line style="stroke:#181818;stroke-width:1.5;" x1="1015" x2="1025" y1="1521.0469" y2="1521.0469"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="51" x="964" y="1504.0625"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="31" x="974" y="1525.2012">Panel</text><line style="stroke:#181818;stroke-width:1.5;" x1="1015" x2="1025" y1="1570.0156" y2="1570.0156"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="51" x="964" y="1553.0313"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="31" x="974" y="1574.1699">Dock</text><line style="stroke:#181818;stroke-width:1.5;" x1="1025" x2="1035" y1="1374.1406" y2="1374.1406"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="173" x="1035" y="1357.1563"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="153" x="1045" y="1378.2949">DefaultDirectorySearcher</text><line style="stroke:#181818;stroke-width:1.5;" x1="1025" x2="1035" y1="1423.1094" y2="1423.1094"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="129" x="1035" y="1406.125"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="109" x="1045" y="1427.2637">WorkspaceCenter</text><line style="stroke:#181818;stroke-width:1.5;" x1="1025" x2="1035" y1="1472.0781" y2="1472.0781"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="108" x="1035" y="1455.0938"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="88" x="1045" y="1476.2324">PanelContainer</text><line style="stroke:#181818;stroke-width:1.5;" x1="1025" x2="1035" y1="1521.0469" y2="1521.0469"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="81" x="1035" y="1504.0625"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="61" x="1045" y="1525.2012">TextEditor</text><line style="stroke:#181818;stroke-width:1.5;" x1="1025" x2="1035" y1="1570.0156" y2="1570.0156"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="48" x="1035" y="1553.0313"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="28" x="1045" y="1574.1699">Task</text><line style="stroke:#181818;stroke-width:1.5;" x1="1025" x2="1025" y1="1342.1563" y2="1570.0156"/><line style="stroke:#181818;stroke-width:1.5;" x1="827" x2="827" y1="313.8125" y2="1325.1719"/><line style="stroke:#181818;stroke-width:1.5;" x1="216" x2="216" y1="264.8438" y2="296.8281"/><line style="stroke:#181818;stroke-width:1.5;" x1="111" x2="111" y1="215.875" y2="247.8594"/><line style="stroke:#181818;stroke-width:1.5;" x1="1218" x2="1228" y1="149.9219" y2="149.9219"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="132" x="1228" y="132.9375"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="112" x="1238" y="154.0762">Startup w/ Squirrel</text><line style="stroke:#181818;stroke-width:1.5;" x1="1218" x2="1218" y1="117.9375" y2="198.8906"/><line style="stroke:#181818;stroke-width:1.5;" x1="685" x2="1218" y1="63.9688" y2="63.9688"/><rect fill="#F1F1F1" height="33.9688" style="stroke:#181818;stroke-width:1.5;" width="89" x="640.5" y="10"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="69" x="650.5" y="31.1387">Initialization</text><line style="stroke:#181818;stroke-width:1.5;" x1="685" x2="685" y1="43.9688" y2="63.9688"/><!--SRC=[dLLRKzf057xFhzWtbHcjsawdu_0WXQXOOXaIj7rorkG8MvRTzEm6IdzzpoOX2K6cdRubt_dE_RBNndAqwnVZTTXG2Iku5B-v5LfvdGuBdJ1BwRFJPG4NYerHns0CYy1Ou_0jXwtViV1d9X115lnUcaeHvxQQXaZYbDaaKmemHshFiAFr95IYrpcbmuwYER0dZJ8vAX0orDVgLSpANmebrYaCmCGeKgknnDaNMF8qu8hFeC8YBQKLBTJ1si4D1yibLya4Pi9Ot5JuT3Ay8rm2jaIKwKP2ssoCm2ta8kDBM8AobMpWZoT-lnVvW-Vm-qFK-_OS-YE_7tsTX9Mx05JMjkcmEv0feDdwfd9O-6N_ZTrXHcFE7LfOcifNH1RyH53zMgbr6gA_bVoE53LkTgFeCY825et6jknHmBfTp0TjnMiv3UsCchAw-7cPDK9bTipZ1UcrjKkuJcrENMc3WKuo2NqUpy5hyjh6HhGHD2cfQ95fMNv0NBTwpMqy7tCxhviFhpoJTY2GU5GmqbY9fDatdHJxbF_T2Zk1L1ln1hSQrg6YdPQo8I2crR6MvSZk4tgPrTCqeUArkrAieB-YYIsrgs0ajGfKnRn5JkxtXgPBZKeWGe1GM0iuucgMkOOGkkLGMKa-L0bvgHsKinXGL0UKz08KZL8o4WeQMc_F92aiNVq1RpI68FE2DtqvQrLoJxqms0_wOSV_cADftex_2ZR7QGEHxuHwA0SgPoPbMMllRodl9EMEvyAaF8Q3unS2HrUXsl14f3E4z22ZDjhVQLwtl7cLk7tsnbo1T0UBNfMcsjuAltLskeLwpU1cKSi6Ebvurw0IzwnvOycLdGOZjgBRvrwLYxFByyltPnVdBs3vvV5KBPHUAnON2yoiMCA9Ttmx7j61p306bhY15Y-PkpGdtZrVSVTuETuLSt_7KN32GdyBCb-j16gLftl_61GaTgTjc6gRapz-EFqiB0i1AIZs67Xb8qWrrebGioisZMvEFtdRMRfYrCQ-9WUu8Ldu1m00]--></g></svg>

================
File: architecture/assets/package-preload.svg
================
<svg aria-roledescription="flowchart-v2" role="graphics-document document" viewBox="-7.5 -8 1384.578125 1139.25" style="max-width: 100%;" xmlns="http://www.w3.org/2000/svg" width="100%" id="graph-div" height="100%" xmlns:xlink="http://www.w3.org/1999/xlink"><style>@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css");'</style><style>#graph-div{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#ccc;}#graph-div .error-icon{fill:#a44141;}#graph-div .error-text{fill:#ddd;stroke:#ddd;}#graph-div .edge-thickness-normal{stroke-width:2px;}#graph-div .edge-thickness-thick{stroke-width:3.5px;}#graph-div .edge-pattern-solid{stroke-dasharray:0;}#graph-div .edge-pattern-dashed{stroke-dasharray:3;}#graph-div .edge-pattern-dotted{stroke-dasharray:2;}#graph-div .marker{fill:lightgrey;stroke:lightgrey;}#graph-div .marker.cross{stroke:lightgrey;}#graph-div svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#graph-div .label{font-family:"trebuchet ms",verdana,arial,sans-serif;color:#ccc;}#graph-div .cluster-label text{fill:#F9FFFE;}#graph-div .cluster-label span,#graph-div p{color:#F9FFFE;}#graph-div .label text,#graph-div span,#graph-div p{fill:#ccc;color:#ccc;}#graph-div .node rect,#graph-div .node circle,#graph-div .node ellipse,#graph-div .node polygon,#graph-div .node path{fill:#1f2020;stroke:#81B1DB;stroke-width:1px;}#graph-div .flowchart-label text{text-anchor:middle;}#graph-div .node .label{text-align:center;}#graph-div .node.clickable{cursor:pointer;}#graph-div .arrowheadPath{fill:lightgrey;}#graph-div .edgePath .path{stroke:lightgrey;stroke-width:2.0px;}#graph-div .flowchart-link{stroke:lightgrey;fill:none;}#graph-div .edgeLabel{background-color:hsl(0, 0%, 34.4117647059%);text-align:center;}#graph-div .edgeLabel rect{opacity:0.5;background-color:hsl(0, 0%, 34.4117647059%);fill:hsl(0, 0%, 34.4117647059%);}#graph-div .labelBkg{background-color:rgba(87.75, 87.75, 87.75, 0.5);}#graph-div .cluster rect{fill:hsl(180, 1.5873015873%, 28.3529411765%);stroke:rgba(255, 255, 255, 0.25);stroke-width:1px;}#graph-div .cluster text{fill:#F9FFFE;}#graph-div .cluster span,#graph-div p{color:#F9FFFE;}#graph-div div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:12px;background:hsl(20, 1.5873015873%, 12.3529411765%);border:1px solid rgba(255, 255, 255, 0.25);border-radius:2px;pointer-events:none;z-index:100;}#graph-div .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#ccc;}#graph-div :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}</style><g><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="10" viewBox="0 0 10 10" class="marker flowchart" id="flowchart-pointEnd"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 0 0 L 10 5 L 0 10 z"></path></marker><marker orient="auto" markerHeight="12" markerWidth="12" markerUnits="userSpaceOnUse" refY="5" refX="0" viewBox="0 0 10 10" class="marker flowchart" id="flowchart-pointStart"><path style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 0 5 L 10 10 L 10 0 z"></path></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="11" viewBox="0 0 10 10" class="marker flowchart" id="flowchart-circleEnd"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" r="5" cy="5" cx="5"></circle></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5" refX="-1" viewBox="0 0 10 10" class="marker flowchart" id="flowchart-circleStart"><circle style="stroke-width: 1; stroke-dasharray: 1, 0;" class="arrowMarkerPath" r="5" cy="5" cx="5"></circle></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="12" viewBox="0 0 11 11" class="marker cross flowchart" id="flowchart-crossEnd"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 1,1 l 9,9 M 10,1 l -9,9"></path></marker><marker orient="auto" markerHeight="11" markerWidth="11" markerUnits="userSpaceOnUse" refY="5.2" refX="-1" viewBox="0 0 11 11" class="marker cross flowchart" id="flowchart-crossStart"><path style="stroke-width: 2; stroke-dasharray: 1, 0;" class="arrowMarkerPath" d="M 1,1 l 9,9 M 10,1 l -9,9"></path></marker><g class="root"><g class="clusters"></g><g class="edgePaths"><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-iaw LE-ae" id="L-iaw-ae-0" d="M684.2890625,111L684.2890625,115.16666666666667C684.2890625,119.33333333333333,684.2890625,127.66666666666667,684.2890625,136C684.2890625,144.33333333333334,684.2890625,152.66666666666666,684.2890625,156.83333333333334L684.2890625,161"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-ae LE-pl1" id="L-ae-pl1-0" d="M684.2890625,224L684.2890625,228.16666666666666C684.2890625,232.33333333333334,684.2890625,240.66666666666666,684.2890625,249C684.2890625,257.3333333333333,684.2890625,265.6666666666667,684.2890625,269.8333333333333L684.2890625,274"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-pl1 LE-sg1" id="L-pl1-sg1-0" d="M684.2890625,313L684.2890625,319.1666666666667C684.2890625,325.3333333333333,684.2890625,337.6666666666667,684.2890625,350C684.2890625,362.3333333333333,684.2890625,374.6666666666667,684.2890625,380.8333333333333L684.2890625,387"></path></g><g class="edgeLabels"><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g transform="translate(684.2890625, 350)" class="edgeLabel"><g transform="translate(-67.6328125, -12)" class="label"><foreignObject height="24" width="135.265625"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">if in packageCache</span></div></foreignObject></g></g></g><g class="nodes"><g transform="translate(-7.5, 379)" class="root"><g class="clusters"><g id="sg1" class="cluster default flowchart-label"><rect height="736.25" width="1368.578125" y="8" x="8" ry="0" rx="0" style=""></rect><g transform="translate(680.8359375, 8)" class="cluster-label"><foreignObject height="24" width="22.90625"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">sg1</span></div></foreignObject></g></g></g><g class="edgePaths"><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-pl2 LE-tp1" id="L-pl2-tp1-0" d="M120.31384698275862,504L141.64825790229887,527.3333333333334C162.98266882183907,550.6666666666666,205.65149066091954,597.3333333333334,239.71116199712642,620.6666666666666C273.7708333333333,644,299.2213541666667,644,311.9466145833333,644L324.671875,644"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-pl2 LE-p1" id="L-pl2-p1-0" d="M126.94717741935483,465L147.17603326612902,448.875C167.40488911290322,432.75,207.8626008064516,400.5,244.85577956989246,384.375C281.8489583333333,368.25,315.3776041666667,368.25,332.1419270833333,368.25L348.90625,368.25"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-p1 LE-p1Pre" id="L-p1-p1Pre-0" d="M455.84375,368.25L464.0494791666667,368.25C472.2552083333333,368.25,488.6666666666667,368.25,501.0390625,368.25C513.4114583333334,368.25,521.7447916666666,368.25,525.9114583333334,368.25L530.078125,368.25"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-p1Pre LE-lk1" id="L-p1Pre-lk1-0" d="M658.0350903948536,324.75L676.7089294957113,285.0416666666667C695.382768596569,245.33333333333334,732.7304467982846,165.91666666666666,769.391265065809,126.20833333333333C806.0520833333334,86.5,842.0260416666666,86.5,860.0130208333334,86.5L878,86.5"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-lk1 LE-pcRead1" id="L-lk1-pcRead1-0" d="M1003.65625,75.73734901171304L1021.6432291666666,72.65612417642753C1039.6302083333333,69.57489934114203,1075.6041666666667,63.412449670571014,1097.7578125,61.25103615604022C1119.9114583333333,59.089622641509436,1128.2447916666667,60.92924528301887,1132.4114583333333,61.84905660377359L1136.578125,62.7688679245283"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-lk1 LE-fileRead1" id="L-lk1-fileRead1-0" d="M971.3751433486239,106L994.7423069571865,120.91666666666667C1018.1094705657492,135.83333333333334,1064.8437977828746,165.66666666666666,1099.500755398928,188.16666666666666C1134.1577130149813,210.66666666666666,1156.7373010299625,225.83333333333334,1168.0270950374531,233.41666666666666L1179.3168890449438,241"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-p1Pre LE-lm1" id="L-p1Pre-lm1-0" d="M667.4808487354086,324.75L684.5803947795072,299.875C701.6799408236056,275,735.8790329118028,225.25,772.4955060392348,200.375C809.1119791666666,175.5,848.1458333333334,175.5,867.6627604166666,175.5L887.1796875,175.5"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-lm1 LE-pcRead1" id="L-lm1-pcRead1-0" d="M993.0575367647059,156L1012.8109681372549,148.625C1032.564399509804,141.25,1072.071262254902,126.5,1095.9913602941176,118.3309748427673C1119.9114583333333,110.1619496855346,1128.2447916666667,108.57389937106917,1132.4114583333333,107.77987421383648L1136.578125,106.98584905660377"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-lm1 LE-fileRead1" id="L-lm1-fileRead1-0" d="M983.2437300955414,195L1004.6327959129512,204.83333333333334C1026.021861730361,214.66666666666666,1068.7999933651806,234.33333333333334,1094.355725849257,245.125786163522C1119.9114583333333,255.9182389937107,1128.2447916666667,257.8364779874214,1132.4114583333333,258.79559748427675L1136.578125,259.7547169811321"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-p1Pre LE-acss" id="L-p1Pre-acss-0" d="M655.5058077371696,411.75L674.6011939476413,458.0833333333333C693.6965801581131,504.4166666666667,731.8873525790565,597.0833333333334,759.8486242061949,643.4166666666666C787.8098958333334,689.75,805.5416666666666,689.75,814.4075520833334,689.75L823.2734375,689.75"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-p1Pre LE-rmm" id="L-p1Pre-rmm-0" d="M745.078125,368.25L749.2447916666666,368.25C753.4114583333334,368.25,761.7447916666666,368.25,794.3697916666666,368.25C826.9947916666666,368.25,883.9114583333334,368.25,940.828125,368.25C997.7447916666666,368.25,1054.6614583333333,368.25,1101.5614759513742,384.7083333333333C1148.461493569415,401.1666666666667,1185.3448621388302,434.0833333333333,1203.7865464235376,450.5416666666667L1222.2282307082453,467"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-acss LE-rmm" id="L-acss-rmm-0" d="M1058.3828125,689.75L1067.2486979166667,689.75C1076.1145833333333,689.75,1093.8463541666667,689.75,1122.6768767297046,659.125C1151.507399292743,628.5,1191.4366735854858,567.25,1211.4013107318572,536.625L1231.3659478782288,506"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-p1Pre LE-ls1" id="L-p1Pre-ls1-0" d="M695.360079887218,324.75L707.8130874060149,315.375C720.266094924812,306,745.172109962406,287.25,776.0691278978696,277.875C806.9661458333334,268.5,843.8541666666666,268.5,862.2981770833334,268.5L880.7421875,268.5"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-ls1 LE-pcRead1" id="L-ls1-pcRead1-0" d="M976.6305443548387,249L999.1218077956988,236.75C1021.613071236559,224.5,1066.5955981182794,200,1100.3766555666305,180.16666666666666C1134.1577130149813,160.33333333333334,1156.7373010299625,145.16666666666666,1168.0270950374531,137.58333333333334L1179.3168890449438,130"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-ls1 LE-fileRead1" id="L-ls1-fileRead1-0" d="M994.102125,288L1013.6814583333334,295.1666666666667C1033.2607916666666,302.3333333333333,1072.4194583333333,316.6666666666667,1096.1654583333334,322.37106918238993C1119.9114583333333,328.07547169811323,1128.2447916666667,325.1509433962264,1132.4114583333333,323.688679245283L1136.578125,322.22641509433964"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-p1Pre LE-ak1" id="L-p1Pre-ak1-0" d="M743.335005733945,411.75L747.7921922782874,413.5833333333333C752.2493788226299,415.4166666666667,761.163751911315,419.0833333333333,781.2810947056574,420.9166666666667C801.3984375,422.75,832.71875,422.75,848.37890625,422.75L864.0390625,422.75"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-p1Pre LE-am1" id="L-p1Pre-am1-0" d="M677.7436302264808,411.75L693.132712688734,428.4166666666667C708.5217951509873,445.0833333333333,739.2999600754937,478.4166666666667,771.8791467044135,495.0833333333333C804.4583333333334,511.75,838.8385416666666,511.75,856.0286458333334,511.75L873.21875,511.75"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-tp1 LE-tp1Pre" id="L-tp1-tp1Pre-0" d="M480.078125,644L484.2447916666667,644C488.4114583333333,644,496.7447916666667,644,515.7356770833334,644C534.7265625,644,564.375,644,579.19921875,644L594.0234375,644"></path><path marker-end="url(#flowchart-pointEnd)" style="fill:none;" class="edge-thickness-normal edge-pattern-solid flowchart-link LS-tp1Pre LE-csrol1" id="L-tp1Pre-csrol1-0" d="M681.1328125,629.7830925707547L695.95703125,624.9442438089623C710.78125,620.1053950471697,740.4296875,610.4276975235849,759.4205729166666,605.5888487617925C778.4114583333334,600.75,786.7447916666666,600.75,790.9114583333334,600.75L795.078125,600.75"></path></g><g class="edgeLabels"><g transform="translate(248.3203125, 644)" class="edgeLabel"><g transform="translate(-51.3515625, -12)" class="label"><foreignObject height="24" width="102.703125"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">call .preload()</span></div></foreignObject></g></g><g transform="translate(248.3203125, 368.25)" class="edgeLabel"><g transform="translate(-51.3515625, -12)" class="label"><foreignObject height="24" width="102.703125"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel">call .preload()</span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g transform="translate(0, 0)" class="label"><foreignObject height="0" width="0"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="edgeLabel"></span></div></foreignObject></g></g></g><g class="nodes"><g transform="translate(102.484375, 484.5)" id="flowchart-pl2-209476" class="node default default flowchart-label"><rect height="39" width="138.96875" y="-19.5" x="-69.484375" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-61.984375, -12)" style="" class="label"><rect></rect><foreignObject height="24" width="123.96875"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">preloadPackage()</span></div></foreignObject></g></g><g transform="translate(402.375, 644)" id="flowchart-tp1-209478" class="node default default flowchart-label"><rect height="39" width="155.40625" y="-19.5" x="-77.703125" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-70.203125, -12)" style="" class="label"><rect></rect><foreignObject height="24" width="140.40625"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">new ThemePackage</span></div></foreignObject></g></g><g transform="translate(402.375, 368.25)" id="flowchart-p1-209480" class="node default default flowchart-label"><rect height="39" width="106.9375" y="-19.5" x="-53.46875" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-45.96875, -12)" style="" class="label"><rect></rect><foreignObject height="24" width="91.9375"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">new Package</span></div></foreignObject></g></g><g transform="translate(637.578125, 368.25)" id="flowchart-p1Pre-209482" class="node default default flowchart-label"><rect height="87" width="215" y="-43.5" x="-107.5" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-100, -36)" style="" class="label"><rect></rect><foreignObject style="width: 200px; height: 72px;" height="72" width="200"><div style="display: table; white-space: break-spaces; max-width: 200px; width: 200px;" xmlns="http://www.w3.org/1999/xhtml">
    <span class="nodeLabel markdown-node-label"><p>this.preload() call:<br/>Does more than advertised here</p></span></div></foreignObject></g></g><g transform="translate(940.828125, 86.5)" id="flowchart-lk1-209484" class="node default default flowchart-label"><rect height="39" width="125.65625" y="-19.5" x="-62.828125" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-55.328125, -12)" style="" class="label"><rect></rect><foreignObject height="24" width="110.65625"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">.loadKeymaps()</span></div></foreignObject></g></g><g transform="translate(1244.078125, 86.5)" id="flowchart-pcRead1-209486" class="node default default flowchart-label"><rect height="87" width="215" y="-43.5" x="-107.5" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-100, -36)" style="" class="label"><rect></rect><foreignObject style="width: 200px; height: 72px;" height="72" width="200"><div style="display: table; white-space: break-spaces; max-width: 200px; width: 200px;" xmlns="http://www.w3.org/1999/xhtml">
    <span class="nodeLabel markdown-node-label"><p>Read from packagesCache:<br/>If bundled package &amp;&amp; in packagesCache</p></span></div></foreignObject></g></g><g transform="translate(1244.078125, 284.5)" id="flowchart-fileRead1-209488" class="node default default flowchart-label"><rect height="87" width="215" y="-43.5" x="-107.5" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-100, -36)" style="" class="label"><rect></rect><foreignObject style="width: 200px; height: 72px;" height="72" width="200"><div style="display: table; white-space: break-spaces; max-width: 200px; width: 200px;" xmlns="http://www.w3.org/1999/xhtml">
    <span class="nodeLabel markdown-node-label"><p>Read from file:<br/>If !bundled || !in packagesCache</p></span></div></foreignObject></g></g><g transform="translate(940.828125, 175.5)" id="flowchart-lm1-209490" class="node default default flowchart-label"><rect height="39" width="107.296875" y="-19.5" x="-53.6484375" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-46.1484375, -12)" style="" class="label"><rect></rect><foreignObject height="24" width="92.296875"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">.loadMenus()</span></div></foreignObject></g></g><g transform="translate(940.828125, 689.75)" id="flowchart-acss-209496" class="node default default flowchart-label"><rect height="39" width="235.109375" y="-19.5" x="-117.5546875" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-110.0546875, -12)" style="" class="label"><rect></rect><foreignObject height="24" width="220.109375"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">.activateCoreStartupServices()</span></div></foreignObject></g></g><g transform="translate(1244.078125, 486.5)" id="flowchart-rmm-209498" class="node default default flowchart-label"><rect height="39" width="168.84375" y="-19.5" x="-84.421875" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-76.921875, -12)" style="" class="label"><rect></rect><foreignObject height="24" width="153.84375"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">.requireMainModule()</span></div></foreignObject></g></g><g transform="translate(940.828125, 268.5)" id="flowchart-ls1-209502" class="node default default flowchart-label"><rect height="39" width="120.171875" y="-19.5" x="-60.0859375" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-52.5859375, -12)" style="" class="label"><rect></rect><foreignObject height="24" width="105.171875"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">.loadSettings()</span></div></foreignObject></g></g><g transform="translate(940.828125, 422.75)" id="flowchart-ak1-209508" class="node default default flowchart-label"><rect height="39" width="153.578125" y="-19.5" x="-76.7890625" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-69.2890625, -12)" style="" class="label"><rect></rect><foreignObject height="24" width="138.578125"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">.activateKeymaps()</span></div></foreignObject></g></g><g transform="translate(940.828125, 511.75)" id="flowchart-am1-209510" class="node default default flowchart-label"><rect height="39" width="135.21875" y="-19.5" x="-67.609375" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-60.109375, -12)" style="" class="label"><rect></rect><foreignObject height="24" width="120.21875"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">.activateMenus()</span></div></foreignObject></g></g><g transform="translate(637.578125, 644)" id="flowchart-tp1Pre-209512" class="node default default flowchart-label"><rect height="39" width="87.109375" y="-19.5" x="-43.5546875" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-36.0546875, -12)" style="" class="label"><rect></rect><foreignObject height="24" width="72.109375"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">.preload()</span></div></foreignObject></g></g><g transform="translate(940.828125, 600.75)" id="flowchart-csrol1-209514" class="node default default flowchart-label"><rect height="39" width="291.5" y="-19.5" x="-145.75" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-138.25, -12)" style="" class="label"><rect></rect><foreignObject height="24" width="276.5"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">.reigsterConfigSchemaFromMetadata()</span></div></foreignObject></g></g></g></g><g transform="translate(684.2890625, 55.5)" id="flowchart-iaw-209472" class="node default default flowchart-label"><rect height="111" width="215" y="-55.5" x="-107.5" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-100, -48)" style="" class="label"><rect></rect><foreignObject style="width: 200px; height: 96px;" height="96" width="200"><div style="display: table; white-space: break-spaces; max-width: 200px; width: 200px;" xmlns="http://www.w3.org/1999/xhtml">
    <span class="nodeLabel markdown-node-label"><p>initialize-application-window.js<br/>Called right after global 'atom' is set</p></span></div></foreignObject></g></g><g transform="translate(684.2890625, 192.5)" id="flowchart-ae-209473" class="node default default flowchart-label"><rect height="63" width="151.328125" y="-31.5" x="-75.6640625" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-68.1640625, -24)" style="" class="label"><rect></rect><foreignObject style="width: 136.328px; height: 48px;" height="48" width="136.328125"><div style="display: table-cell; white-space: nowrap; max-width: 200px;" xmlns="http://www.w3.org/1999/xhtml">
    <span class="nodeLabel markdown-node-label"><p>AtomEnvironment<br/>.preloadPackages()</p></span></div></foreignObject></g></g><g transform="translate(684.2890625, 293.5)" id="flowchart-pl1-209474" class="node default default flowchart-label"><rect height="39" width="145.453125" y="-19.5" x="-72.7265625" ry="0" rx="0" style="" class="basic label-container"></rect><g transform="translate(-65.2265625, -12)" style="" class="label"><rect></rect><foreignObject height="24" width="130.453125"><div style="display: inline-block; white-space: nowrap;" xmlns="http://www.w3.org/1999/xhtml"><span class="nodeLabel">preloadPackages()</span></div></foreignObject></g></g></g></g></g></svg>

================
File: architecture/assets/pulsar-overview.svg
================
<svg id="mermaid-svg" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width: 788.3984375px;" viewBox="-8 -8 788.3984375 852" role="graphics-document document" aria-roledescription="flowchart-v2" xmlns:xlink="http://www.w3.org/1999/xlink"><style>#mermaid-svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;fill:#333;}#mermaid-svg .error-icon{fill:#552222;}#mermaid-svg .error-text{fill:#552222;stroke:#552222;}#mermaid-svg .edge-thickness-normal{stroke-width:2px;}#mermaid-svg .edge-thickness-thick{stroke-width:3.5px;}#mermaid-svg .edge-pattern-solid{stroke-dasharray:0;}#mermaid-svg .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-svg .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-svg .marker{fill:#333333;stroke:#333333;}#mermaid-svg .marker.cross{stroke:#333333;}#mermaid-svg svg{font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:16px;}#mermaid-svg .label{font-family:"trebuchet ms",verdana,arial,sans-serif;color:#333;}#mermaid-svg .cluster-label text{fill:#333;}#mermaid-svg .cluster-label span,#mermaid-svg p{color:#333;}#mermaid-svg .label text,#mermaid-svg span,#mermaid-svg p{fill:#333;color:#333;}#mermaid-svg .node rect,#mermaid-svg .node circle,#mermaid-svg .node ellipse,#mermaid-svg .node polygon,#mermaid-svg .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-svg .flowchart-label text{text-anchor:middle;}#mermaid-svg .node .label{text-align:center;}#mermaid-svg .node.clickable{cursor:pointer;}#mermaid-svg .arrowheadPath{fill:#333333;}#mermaid-svg .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-svg .flowchart-link{stroke:#333333;fill:none;}#mermaid-svg .edgeLabel{background-color:#e8e8e8;text-align:center;}#mermaid-svg .edgeLabel rect{opacity:0.5;background-color:#e8e8e8;fill:#e8e8e8;}#mermaid-svg .labelBkg{background-color:rgba(232, 232, 232, 0.5);}#mermaid-svg .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-svg .cluster text{fill:#333;}#mermaid-svg .cluster span,#mermaid-svg p{color:#333;}#mermaid-svg div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:"trebuchet ms",verdana,arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-svg .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#mermaid-svg :root{--mermaid-font-family:"trebuchet ms",verdana,arial,sans-serif;}</style><g><marker id="flowchart-pointEnd" class="marker flowchart" viewBox="0 0 10 10" refX="10" refY="5" markerUnits="userSpaceOnUse" markerWidth="12" markerHeight="12" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowMarkerPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker><marker id="flowchart-pointStart" class="marker flowchart" viewBox="0 0 10 10" refX="0" refY="5" markerUnits="userSpaceOnUse" markerWidth="12" markerHeight="12" orient="auto"><path d="M 0 5 L 10 10 L 10 0 z" class="arrowMarkerPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker><marker id="flowchart-circleEnd" class="marker flowchart" viewBox="0 0 10 10" refX="11" refY="5" markerUnits="userSpaceOnUse" markerWidth="11" markerHeight="11" orient="auto"><circle cx="5" cy="5" r="5" class="arrowMarkerPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></circle></marker><marker id="flowchart-circleStart" class="marker flowchart" viewBox="0 0 10 10" refX="-1" refY="5" markerUnits="userSpaceOnUse" markerWidth="11" markerHeight="11" orient="auto"><circle cx="5" cy="5" r="5" class="arrowMarkerPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></circle></marker><marker id="flowchart-crossEnd" class="marker cross flowchart" viewBox="0 0 11 11" refX="12" refY="5.2" markerUnits="userSpaceOnUse" markerWidth="11" markerHeight="11" orient="auto"><path d="M 1,1 l 9,9 M 10,1 l -9,9" class="arrowMarkerPath" style="stroke-width: 2; stroke-dasharray: 1, 0;"></path></marker><marker id="flowchart-crossStart" class="marker cross flowchart" viewBox="0 0 11 11" refX="-1" refY="5.2" markerUnits="userSpaceOnUse" markerWidth="11" markerHeight="11" orient="auto"><path d="M 1,1 l 9,9 M 10,1 l -9,9" class="arrowMarkerPath" style="stroke-width: 2; stroke-dasharray: 1, 0;"></path></marker><g class="root"><g class="clusters"></g><g class="edgePaths"><path d="M302.8125,85L302.8125,89.16666666666667C302.8125,93.33333333333333,302.8125,101.66666666666667,302.8125,110C302.8125,118.33333333333333,302.8125,126.66666666666667,302.8125,130.83333333333334L302.8125,135" id="L-id1-id2-0" class=" edge-thickness-normal edge-pattern-solid flowchart-link LS-id1 LE-id2" style="fill:none;" marker-end="url(#flowchart-pointEnd)"></path><path d="M195.796875,208.8854378818737L175.2734375,214.9045315682281C154.75,220.92362525458248,113.703125,232.96181262729124,93.1796875,246.31423964697896C72.65625,259.6666666666667,72.65625,274.3333333333333,72.65625,281.6666666666667L72.65625,289" id="L-id2-id3-0" class=" edge-thickness-normal edge-pattern-solid flowchart-link LS-id2 LE-id3" style="fill:none;" marker-end="url(#flowchart-pointEnd)"></path><path d="M302.8125,220L302.8125,224.16666666666666C302.8125,228.33333333333334,302.8125,236.66666666666666,302.8125,245C302.8125,253.33333333333334,302.8125,261.6666666666667,302.8125,265.8333333333333L302.8125,270" id="L-id2-id4-0" class=" edge-thickness-normal edge-pattern-solid flowchart-link LS-id2 LE-id4" style="fill:none;" marker-end="url(#flowchart-pointEnd)"></path><path d="M409.828125,204.75869693396226L436.1588541666667,211.46558077830187C462.4895833333333,218.1724646226415,515.1510416666666,231.58623231132074,541.4817708333334,242.45978282232704C567.8125,253.33333333333334,567.8125,261.6666666666667,567.8125,265.8333333333333L567.8125,270" id="L-id2-id5-0" class=" edge-thickness-normal edge-pattern-solid flowchart-link LS-id2 LE-id5" style="fill:none;" marker-end="url(#flowchart-pointEnd)"></path><path d="M213.3319805194805,374L206.1620670995671,378.1666666666667C198.99215367965368,382.3333333333333,184.65232683982686,390.6666666666667,177.48241341991343,400.5833333333333C170.3125,410.5,170.3125,422,170.3125,427.75L170.3125,433.5" id="L-id4-id6-0" class=" edge-thickness-normal edge-pattern-solid flowchart-link LS-id4 LE-id6" style="fill:none;" marker-end="url(#flowchart-pointEnd)"></path><path d="M392.2930194805195,374L399.46293290043286,378.1666666666667C406.6328463203463,382.3333333333333,420.97267316017314,390.6666666666667,428.1425865800866,399C435.3125,407.3333333333333,435.3125,415.6666666666667,435.3125,419.8333333333333L435.3125,424" id="L-id4-id7-0" class=" edge-thickness-normal edge-pattern-solid flowchart-link LS-id4 LE-id7" style="fill:none;" marker-end="url(#flowchart-pointEnd)"></path><path d="M359.1762554190751,547L354.01797326589593,551.1666666666666C348.85969111271675,555.3333333333334,338.5431268063584,563.6666666666666,333.3848446531792,580.6666666666666C328.2265625,597.6666666666666,328.2265625,623.3333333333334,328.2265625,649C328.2265625,674.6666666666666,328.2265625,700.3333333333334,338.7278645833333,717.3775196856485C349.2291666666667,734.4217060379636,370.2317708333333,742.8434120759271,380.7330729166667,747.0542650949088L391.234375,751.2651181138906" id="L-id7-id9-0" class=" edge-thickness-normal edge-pattern-solid flowchart-link LS-id7 LE-id9" style="fill:none;" marker-end="url(#flowchart-pointEnd)"></path><path d="M542.8125,526.0022629053664L563.16015625,533.6685524211387C583.5078125,541.334841936911,624.203125,556.6674209684555,644.55078125,568.5003771508945C664.8984375,580.3333333333334,664.8984375,588.6666666666666,664.8984375,592.8333333333334L664.8984375,597" id="L-id7-id10-0" class=" edge-thickness-normal edge-pattern-solid flowchart-link LS-id7 LE-id10" style="fill:none;" marker-end="url(#flowchart-pointEnd)"></path><path d="M435.3125,547L435.3125,551.1666666666666C435.3125,555.3333333333334,435.3125,563.6666666666666,435.3125,573.5833333333334C435.3125,583.5,435.3125,595,435.3125,600.75L435.3125,606.5" id="L-id7-id8-0" class=" edge-thickness-normal edge-pattern-solid flowchart-link LS-id7 LE-id8" style="fill:none;" marker-end="url(#flowchart-pointEnd)"></path><path d="M435.3125,691.5L435.3125,697.25C435.3125,703,435.3125,714.5,439.0933641975309,724.4166666666666C442.8742283950617,734.3333333333334,450.4359567901235,742.6666666666666,454.21682098765433,746.8333333333334L457.99768518518516,751" id="L-id8-id9-0" class=" edge-thickness-normal edge-pattern-solid flowchart-link LS-id8 LE-id9" style="fill:none;" marker-end="url(#flowchart-pointEnd)"></path><path d="M664.8984375,701L664.8984375,705.1666666666666C664.8984375,709.3333333333334,664.8984375,717.6666666666666,654.3971354166666,726.0441863523151C643.8958333333334,734.4217060379636,622.8932291666666,742.8434120759271,612.3919270833334,747.0542650949088L601.890625,751.2651181138906" id="L-id10-id9-0" class=" edge-thickness-normal edge-pattern-solid flowchart-link LS-id10 LE-id9" style="fill:none;" marker-end="url(#flowchart-pointEnd)"></path></g><g class="edgeLabels"><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel"><g class="label" transform="translate(0, 0)"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g></g><g class="nodes"><g class="node default default flowchart-label" id="flowchart-id1-44" transform="translate(302.8125, 42.5)"><rect class="basic label-container" style="" rx="5" ry="5" x="-107.1953125" y="-42.5" width="214.390625" height="85"></rect><g class="label" style="" transform="translate(-99.6953125, -35)"><rect></rect><foreignObject width="199.390625" height="70" style="width: 199.391px; height: 70px;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; max-width: 200px;">
    <span class="nodeLabel markdown-node-label"><p>Initialization<br/><em>./src/main-process/main.js</em></p></span></div></foreignObject></g></g><g class="node default default flowchart-label" id="flowchart-id2-45" transform="translate(302.8125, 177.5)"><rect class="basic label-container" style="" rx="5" ry="5" x="-107.015625" y="-42.5" width="214.03125" height="85"></rect><g class="label" style="" transform="translate(-99.515625, -35)"><rect></rect><foreignObject width="199.03125" height="70" style="width: 199.031px; height: 70px;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; max-width: 200px;">
    <span class="nodeLabel markdown-node-label"><p>Startup<br/><em>./src/main-process/start.js</em></p></span></div></foreignObject></g></g><g class="node default default flowchart-label" id="flowchart-id3-47" transform="translate(72.65625, 322)"><rect class="basic label-container" style="" rx="5" ry="5" x="-72.65625" y="-33" width="145.3125" height="66"></rect><g class="label" style="" transform="translate(-65.15625, -25.5)"><rect></rect><foreignObject width="130.3125" height="51" style="width: 130.312px; height: 51px;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; max-width: 200px;">
    <span class="nodeLabel markdown-node-label"><p>Main Process Tests</p></span></div></foreignObject></g></g><g class="node default default flowchart-label" id="flowchart-id4-49" transform="translate(302.8125, 322)"><rect class="basic label-container" style="" rx="5" ry="5" x="-107.5" y="-52" width="215" height="104"></rect><g class="label" style="" transform="translate(-100, -44.5)"><rect></rect><foreignObject width="200" height="89" style="width: 200px; height: 89px;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table; white-space: break-spaces; max-width: 200px; width: 200px;">
    <span class="nodeLabel markdown-node-label"><p>Application Startup<br/><em>./src/main-process/atom-application.js</em></p></span></div></foreignObject></g></g><g class="node default default flowchart-label" id="flowchart-id5-51" transform="translate(567.8125, 322)"><rect class="basic label-container" style="" rx="5" ry="5" x="-107.5" y="-52" width="215" height="104"></rect><g class="label" style="" transform="translate(-100, -44.5)"><rect></rect><foreignObject width="200" height="89" style="width: 200px; height: 89px;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table; white-space: break-spaces; max-width: 200px; width: 200px;">
    <span class="nodeLabel markdown-node-label"><p>Startup w/ Squirrel<br/><em>./src/main-process/squirrel-update.js</em></p></span></div></foreignObject></g></g><g class="node default default flowchart-label" id="flowchart-id6-53" transform="translate(170.3125, 485.5)"><rect class="basic label-container" style="" rx="5" ry="5" x="-107.5" y="-52" width="215" height="104"></rect><g class="label" style="" transform="translate(-100, -44.5)"><rect></rect><foreignObject width="200" height="89" style="width: 200px; height: 89px;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table; white-space: break-spaces; max-width: 200px; width: 200px;">
    <span class="nodeLabel markdown-node-label"><p>Test Runner<br/><em>./src/initialize-test-window.js</em></p></span></div></foreignObject></g></g><g class="node default default flowchart-label" id="flowchart-id7-55" transform="translate(435.3125, 485.5)"><rect class="basic label-container" style="" rx="5" ry="5" x="-107.5" y="-61.5" width="215" height="123"></rect><g class="label" style="" transform="translate(-100, -54)"><rect></rect><foreignObject width="200" height="108" style="width: 200px; height: 108px;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table; white-space: break-spaces; max-width: 200px; width: 200px;">
    <span class="nodeLabel markdown-node-label"><p>Initialize Application Window<br/><em>./src/initialize-application-window.js</em></p></span></div></foreignObject></g></g><g class="node default default flowchart-label" id="flowchart-id9-57" transform="translate(496.5625, 793.5)"><rect class="basic label-container" style="" rx="5" ry="5" x="-105.328125" y="-42.5" width="210.65625" height="85"></rect><g class="label" style="" transform="translate(-97.828125, -35)"><rect></rect><foreignObject width="195.65625" height="70" style="width: 195.656px; height: 70px;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; max-width: 200px;">
    <span class="nodeLabel markdown-node-label"><p>'The World'<br/><em>./src/atom-environment.js</em></p></span></div></foreignObject></g></g><g class="node default default flowchart-label" id="flowchart-id10-59" transform="translate(664.8984375, 649)"><rect class="basic label-container" style="" rx="5" ry="5" x="-107.5" y="-52" width="215" height="104"></rect><g class="label" style="" transform="translate(-100, -44.5)"><rect></rect><foreignObject width="200" height="89" style="width: 200px; height: 89px;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table; white-space: break-spaces; max-width: 200px; width: 200px;">
    <span class="nodeLabel markdown-node-label"><p>ApplicationDelegate<br/><em>./src/application-delegate.js</em></p></span></div></foreignObject></g></g><g class="node default default flowchart-label" id="flowchart-id8-61" transform="translate(435.3125, 649)"><rect class="basic label-container" style="" rx="5" ry="5" x="-72.0859375" y="-42.5" width="144.171875" height="85"></rect><g class="label" style="" transform="translate(-64.5859375, -35)"><rect></rect><foreignObject width="129.171875" height="70" style="width: 129.172px; height: 70px;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: table-cell; white-space: nowrap; max-width: 200px;">
    <span class="nodeLabel markdown-node-label"><p>Clipboard<br/><em>./src/clipboard.js</em></p></span></div></foreignObject></g></g></g></g></g><style>@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css");</style></svg>

================
File: architecture/overview.md
================
# Pulsar's High Level Startup Overview

It's no secret that Pulsar since inherited from Atom, is a big and complex application.

With many discrete, moving aspects, that not all developers have a concrete grasp on.
The goal of this document is to make the architecture of Pulsar, as well as the logical flow
more understandable and approachable.

This will be accomplished through a series of illustrations detailing the functional decomposition and detailed logical flow of Pulsar and it's parts, as well as lists of what's accomplished in each part.

This document is aimed at those roughly familiar with the large scale goals and features of Pulsar, as well as those with a basic understanding of the package model used to power much of Pulsar's functionality.

![Pulsar Overview MermaidJS Image](./assets/pulsar-overview.svg "Pulsar Overview")

<details>
<summary>
MermaidJS to create image above
</summary>

```
flowchart TD
    id1("`Initialization
        *./src/main-process/main.js*`") --> id2("`Startup
                                            *./src/main-process/start.js*`")
    id2 --> id3("`Main Process Tests`")
    id2 --> id4("`Application Startup
                 *./src/main-process/atom-application.js*`")
    id2 --> id5("`Startup w/ Squirrel
                *./src/main-process/squirrel-update.js*`")
    id4 --> id6("`Test Runner
                *./src/initialize-test-window.js*`")
    id4 --> id7("`Initialize Application Window
                *./src/initialize-application-window.js*`")
    id7 --> id9("`'The World'
                *./src/atom-environment.js*`")
    id7 --> id10("`ApplicationDelegate
                *./src/application-delegate.js*`")
    id7 --> id8("`Clipboard
                *./src/clipboard.js*`")
    id8 --> id9
    id10 --> id9
```

</details>

---

To further outline what occurs in the steps above:

## Initialization

Startup of Pulsar occurs within `./src/main-process/main.js`.

Which Determines:
  - `resourcePath`
  - `devResourcePath`
  - `stableResourcePath`
  - `defaultRepositoryPath`

Which Sets:
  - Application Start Time

Which Does:
  - Initializes Startup of `./src/main-process/start.js`

## Startup

The more general startup handling of Pulsar occurs within `./src/main-process/start.js`.

Which Sets:
  - Shell Start Time
  - `app.allowRendererProcessReuse`: `false`
  - `app.commandLine.appendSwitch('enable-experimental-web-platform-features')`
  - `app.commandLine.appendSwitch('force-color-profile', config.get('core.colorProfile'))`
  - `app.setAppUserModelId()`
  - `app.on('open-file', $)`
  - `app.on('open-url', $)`

Which Does:
  - Normalizes the `resourcePath` and `devResourcePath`
  - Uses `Config` to locate and read the config file
  - `atomPaths.setAtomHome()`
  - `atomPaths.setUserData()`
  - May defer to `./src/main-process/squirrel-update.js` to startup if on Windows
  - May defer to `./spec/main-process/mocha-test-runner.js` to startup main process tests
  - May call `.open()` on `./src/main-process/atom-application.js`

## Application Startup

The proper startup of the Pulsar Application occurs within `./src/main-process/atom-application.js`.

Which Sets:
  - `APPLICATION_STATE_VERSION`
  - Global `atomApplication`

Which Does:
  - Does setup of the application socket
  - Handles deprecated benchmark startup
  - Ensures to return a new instance of `AtomApplication`
  - Registers basic application commands
  - Initializes:
    * `ApplicationMenu`
    * `AtomProtocolHandler`
    * `WindowStack`
    * `FileRecoveryService`
    * `Config`
    * `StorageFolder`
    * `AutoUpdateManager`
  - May startup the package test runner
  - May quit if asked to startup in benchmark mode
  - May open previously opened files/folders
  - May open new instance of Pulsar

## Initialize Application Window

Begins initialization of an individual Pulsar window, occurs within `./src/initialize-application-window.js`.

Which Determines:

Which Sets:
  - Sets the `global.atom` to a new instance of `AtomEnvironment`

Which Does:
  - triggers `.preloadPackages()`
  - Initializes:
    * Clipboard
    * AtomEnvironment
    * ApplicationDelegate

## 'The World'

'The World' refers to being within the Pulsar application, most of the application occurs within here.
This code lives within `./src/atom-environment.js`.

An important note about being initialized within the world, there is no access to the `atom`
global, until the initial constructor completes processing. Meaning great care must be taken
to ensure if `atom` is available within the initialized modules.

Which Sets:
  - `AtomEnvironment.version`: `1` | Possibly a reference to `APPLICATION_STATE_VERSION`?
  - `AtomEnvironment.saveStateDebounceInterval`: `1000`

Which Does:
  - Initializes:
    * Clipboard | Inherited from 'Initialize Application Window'
    * ApplicationDelegate | Inherited from 'Initialize Application Window'
    * DeserializerManager
    * ViewRegistry
    * NotificationManager
    * StateStore
    * Config
    * KeymapManager
    * TooltipManager
    * CommandRegistry
    * URIHandlerRegistry
    * GrammarRegistry
    * StyleManager
    * PackageManager
    * ThemeManager
    * MenuManager
    * ContextMenuManager
    * Project
    * CommandInstaller
    * ProtocolHandlerInstaller
    * TextEditorRegistry
    * Workspace
    * AutoUpdateManager
    * WindowEventHandler
    * HistoryManager

================
File: architecture/package-preload.md
================
# Package Preload

Pulsar's packages are preloaded, very early on within the startup cycle of Pulsar.

As it's called immediatly after the `atom` global is initialized, it's important to understand what steps occur during preloading, and what package's are affected.

![Package Preload Overview](./assets/package-preload.svg "Package Preload Overview")

---

<details>
<summary>
MermaidJS to create image above
</summary>

```
flowchart TD
    iaw["`
        initialize-application-window.js
        Called right after global 'atom' is set
    `"] -->
    ae["`
        AtomEnvironment
        .preloadPackages()
    `"] -->
    pl1["preloadPackages()"] -->|if in packageCache| sg1

    subgraph sg1
    direction LR
    pl2["preloadPackage()"]
    pl2 -->|"call .preload()"| tp1["new ThemePackage"]
    pl2 -->|"call .preload()"| p1["new Package"]

    p1 --> p1Pre["`
        this.preload() call:
        Does more than advertised here
    `"]

    p1Pre --> lk1[".loadKeymaps()"]
    lk1 --> pcRead1["`Read from packagesCache:
        If bundled package && in packagesCache`"]
    lk1 --> fileRead1["`Read from file:
        If !bundled || !in packagesCache`"]

    p1Pre --> lm1[".loadMenus()"]
    lm1 --> pcRead1
    lm1 --> fileRead1

    p1Pre --> acss[".activateCoreStartupServices()"]
    p1Pre --> rmm[".requireMainModule()"]

    acss --> rmm

    p1Pre --> ls1[".loadSettings()"]
    ls1 --> pcRead1
    ls1 --> fileRead1

    p1Pre --> ak1[".activateKeymaps()"]
    p1Pre --> am1[".activateMenus()"]

    tp1 --> tp1Pre[".preload()"]
    tp1Pre --> csrol1[".reigsterConfigSchemaFromMetadata()"]
    end
```

</details>

================
File: architecture/the-world.md
================
# 'The World'

While it's difficult to convey the full scope of how Pulsar works internally, just like the previous page [`overview.md`](./overview.md) detailed the general gist of how Pulsar starts up, this document provides a quick reference to how all the interal parts of Pulsar are connected.

This document is not at all comprehensive, and must ensure to be continually updated. Additionally, this image does not track outside dependency usage, nor dependence on every single internal module. Focusing mostly on modules that are either required during initialization, or are referenced during the constructor of their respective class.

<details>
<summary>
Details on the creation of this image
</summary>

This image has been created with Plant UML. A Live editor is available [here](https://www.plantuml.com/plantuml/uml).

The code used to create this image:

```uml
@startwbs
* Initialization
** Startup
***< Main Process Tests
*** Startup w/ Squirrel
***< Application Startup
****< Test Runner
**** Initialize Application Window
***** 'The World'
******< Config
******* ScopeDescriptor
****** KemapManager
****** TolltipManager
******* Tooltip
******< CommandRegistry
******< URIHandlerRegistry
****** StyleManager
******* createStylesElement
******* DEPRECATED_SYNTAX_SELECTORS
******< MenuManager
******* MenuHelpers
****** ContextMenuManager
******* MenuHelpers
******* sortMenuItems
******< TextEditorRegistry
******* TextEditor
******* ScopeDescriptor
****** HistoryManager
******< DeserializerManager
******< ViewRegistry
****** NotificationManager
******* Notification
****** StateStore
******< PackageManager
******* Package
******* ThemePackage
******* ModuleCache
****** ThemeManager
******* LessCompileCache
****** Project
******* watchPath
******* DefaultDirectoryProvider
******* Model
******* GitRepositoryProvider
******< CommandInstaller
******< ProtocolHandlerInstaller
******< AutoUpdateManager
******< WindowEventHandler
******* listen
******< GrammarRegistry
*******< NodeTreeSitterLanguageMode
******** TreeIndenter
********< TextMateLanguageMode
******** TokenizedLine
********< ScopeDescriptor
******** matcherForSelector
********< Token
******* WASMTreeSitterLanguageNode
******** Parser
******* TextMateLanguageMode
******** TokenizedLine
********< TokenIterator
******** ScopeDescriptor
********< NullGrammar
*******< ScopeDescriptor
******* Token
****** Workspace
******* DefaultDirectorySearcher
*******< RipgrepDirectorySearcher
******* WorkspaceCenter
*******< createWorkspaceElement
******* PanelContainer
*******< StateStore
******* TextEditor
*******< Panel
******* Task
*******< Dock
@endwbs
```

</details>

---

![Pulsar 'How Everything Connects' UML Image](./assets/how-everything-connects.svg "Pulsar 'How Everything Connects'")

================
File: build-instructions/build-status.md
================
# Atom build status

> **Note**: Since Atom's electron version is outdated, the electron badges are from old versions.

| System | Azure Pipelines | CircleCI | AppVeyor/Win | Dependencies |
|--------|--------|--------------|------------|--------------|
| [Atom](https://github.com/atom/atom) | [![Build status](https://github.visualstudio.com/Atom/_apis/build/status/Atom%20Production%20Branches?branch=master)](https://github.visualstudio.com/Atom/_build/latest?definitionId=32&branch=master) | | | [![Dependency Status](https://david-dm.org/atom/atom.svg)](https://david-dm.org/atom/atom) |
| [APM](https://github.com/atom/apm) | [![Build status](https://dev.azure.com/github/Atom/_apis/build/status/Atom%20Production%20Branches?branchName=master)](https://dev.azure.com/github/Atom/_build/latest?definitionId=32&branchName=master) | |
| [Electron](https://github.com/electron/electron) | | [![CircleCI Build Status](https://circleci.com/gh/electron/electron/tree/master.svg?style=shield)](https://circleci.com/gh/electron/electron/tree/master) | [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/4lggi9dpjc1qob7k/branch/master?svg=true)](https://ci.appveyor.com/project/electron-bot/electron-ljo26/branch/master) | [![Dependency Status](https://david-dm.org/electron/electron/dev-status.svg)](https://david-dm.org/electron/electron)

> **Note**: Some repositories have been merged with Atom.
> See <https://github.com/atom/atom/blob/master/packages/README.md> for details.
>
> Here are the packages, libraries, tools, and languages tested along with Atom, and so have no testing badges:
>
> - [about](https://github.com/atom/atom/tree/master/packages/about)
> - [autoflow](https://github.com/atom/atom/tree/master/packages/autoflow)
> - [deprecation-cop](https://github.com/atom/atom/tree/master/packages/deprecation-cop)
> - [dev-live-reload](https://github.com/atom/atom/tree/master/packages/dev-live-reload)
> - [exception-reporting](https://github.com/atom/atom/tree/master/packages/exception-reporting)
> - [git-diff](https://github.com/atom/atom/tree/master/packages/git-diff)
> - [go-to-line](https://github.com/atom/atom/tree/master/packages/go-to-line)
> - [grammar-selector](https://github.com/atom/atom/tree/master/packages/grammar-selector)
> - [line-ending-selector](https://github.com/atom/atom/tree/master/packages/line-ending-selector)
> - [link](https://github.com/atom/atom/tree/master/packages/link)
> - [ruby-on-rails](https://github.com/atom/atom/tree/master/packages/ruby-on-rails)
> - [update-package-dependencies](https://github.com/atom/atom/tree/master/packages/update-package-dependencies)
> - [welcome](https://github.com/atom/atom/tree/master/packages/welcome)
>
> The dependency badges might be irrelevant, so take them with a grain of salt (e.g. not very seriously).

## Packages

| Package | Github Actions | Dependencies |
|---|---|---|
| [About](https://github.com/atom/atom/tree/master/packages/about) |  | [![Dependency Status](https://david-dm.org/atom/about.svg)](https://david-dm.org/atom/about) |
| [Archive View](https://github.com/atom/archive-view) | [![build](https://github.com/atom/archive-view/workflows/CI/badge.svg)](https://github.com/atom/archive-view/actions) | [![Dependency Status](https://david-dm.org/atom/archive-view.svg)](https://david-dm.org/atom/archive-view) |
| [AutoComplete Atom API](https://github.com/atom/autocomplete-atom-api) | [![build](https://github.com/atom/autocomplete-atom-api/workflows/CI/badge.svg)](https://github.com/atom/autocomplete-atom-api/actions) | [![Dependency Status](https://david-dm.org/atom/autocomplete-atom-api.svg)](https://david-dm.org/atom/autocomplete-atom-api) |
| [AutoComplete CSS](https://github.com/atom/autocomplete-css) | [![build](https://github.com/atom/autocomplete-css/workflows/CI/badge.svg)](https://github.com/atom/autocomplete-css/actions) | [![Dependency Status](https://david-dm.org/atom/autocomplete-css.svg)](https://david-dm.org/atom/autocomplete-css) |
| [AutoComplete HTML](https://github.com/atom/autocomplete-html) | [![build](https://github.com/atom/autocomplete-html/workflows/CI/badge.svg)](https://github.com/atom/autocomplete-html/actions) | [![Dependency Status](https://david-dm.org/atom/autocomplete-html.svg)](https://david-dm.org/atom/autocomplete-html) |
| [AutoComplete+](https://github.com/atom/autocomplete-plus) | [![build](https://github.com/atom/autocomplete-plus/workflows/CI/badge.svg)](https://github.com/atom/autocomplete-plus/actions) | [![Dependency Status](https://david-dm.org/atom/autocomplete-plus.svg)](https://david-dm.org/atom/autocomplete-plus) |
| [AutoComplete Snippets](https://github.com/atom/autocomplete-snippets) | [![build](https://github.com/atom/autocomplete-snippets/workflows/CI/badge.svg)](https://github.com/atom/autocomplete-snippets/actions) | [![Dependency Status](https://david-dm.org/atom/autocomplete-snippets.svg)](https://david-dm.org/atom/autocomplete-snippets) |
| [AutoFlow](https://github.com/atom/atom/tree/master/packages/autoflow) |  | [![Dependency Status](https://david-dm.org/atom/autoflow.svg)](https://david-dm.org/atom/autoflow) |
| [AutoSave](https://github.com/atom/autosave) | [![build](https://github.com/atom/autosave/workflows/CI/badge.svg)](https://github.com/atom/autosave/actions) | [![Dependency Status](https://david-dm.org/atom/autosave.svg)](https://david-dm.org/atom/autosave) |
| [Background Tips](https://github.com/atom/background-tips) | [![build](https://github.com/atom/background-tips/workflows/CI/badge.svg)](https://github.com/atom/background-tips/actions) | [![Dependency Status](https://david-dm.org/atom/background-tips.svg)](https://david-dm.org/atom/background-tips) |
| [Bookmarks](https://github.com/atom/bookmarks) | [![build](https://github.com/atom/bookmarks/workflows/CI/badge.svg)](https://github.com/atom/bookmarks/actions) | [![Dependency Status](https://david-dm.org/atom/bookmarks.svg)](https://david-dm.org/atom/bookmarks) |
| [Bracket Matcher](https://github.com/atom/bracket-matcher) | [![build](https://github.com/atom/bracket-matcher/workflows/CI/badge.svg)](https://github.com/atom/bracket-matcher/actions) | [![Dependency Status](https://david-dm.org/atom/bracket-matcher.svg)](https://david-dm.org/atom/bracket-matcher) |
| [Command Palette](https://github.com/atom/command-palette) | [![build](https://github.com/atom/command-palette/workflows/CI/badge.svg)](https://github.com/atom/command-palette/actions) | [![Dependency Status](https://david-dm.org/atom/command-palette.svg)](https://david-dm.org/atom/command-palette) |
| [Deprecation Cop](https://github.com/atom/atom/tree/master/packages/deprecation-cop) |  | [![Dependency Status](https://david-dm.org/atom/deprecation-cop.svg)](https://david-dm.org/atom/deprecation-cop) |
| [Dev Live Reload](https://github.com/atom/atom/tree/master/packages/dev-live-reload) |  | [![Dependency Status](https://david-dm.org/atom/dev-live-reload.svg)](https://david-dm.org/atom/dev-live-reload) |
| [Encoding Selector](https://github.com/atom/encoding-selector) | [![build](https://github.com/atom/encoding-selector/workflows/CI/badge.svg)](https://github.com/atom/encoding-selector/actions) | [![Dependency Status](https://david-dm.org/atom/encoding-selector.svg)](https://david-dm.org/atom/encoding-selector) |
| [Exception Reporting](https://github.com/atom/atom/tree/master/packages/exception-reporting) |  | [![Dependency Status](https://david-dm.org/atom/exception-reporting.svg)](https://david-dm.org/atom/exception-reporting) |
| [Find and Replace](https://github.com/atom/find-and-replace) | [![build](https://github.com/atom/find-and-replace/workflows/CI/badge.svg)](https://github.com/atom/find-and-replace/actions) | [![Dependency Status](https://david-dm.org/atom/find-and-replace.svg)](https://david-dm.org/atom/find-and-replace) |
| [Fuzzy Finder](https://github.com/atom/fuzzy-finder) | [![build](https://github.com/atom/fuzzy-finder/workflows/CI/badge.svg)](https://github.com/atom/fuzzy-finder/actions) | [![Dependency Status](https://david-dm.org/atom/fuzzy-finder.svg)](https://david-dm.org/atom/fuzzy-finder) |
| [GitHub](https://github.com/atom/github) | [![Build Status](https://github.com/atom/github/workflows/ci/badge.svg)](https://github.com/atom/github/actions?query=workflow%3Aci+branch%3Amaster) | [![Dependency Status](https://david-dm.org/atom/github.svg)](https://david-dm.org/atom/github) |
| [Git Diff](https://github.com/atom/atom/tree/master/packages/) |  | [![Dependency Status](https://david-dm.org/atom/git-diff.svg)](https://david-dm.org/atom/git-diff) |
| [Go to Line](https://github.com/atom/atom/tree/master/packages/) |  | [![Dependency Status](https://david-dm.org/atom/go-to-line.svg)](https://david-dm.org/atom/go-to-line) |
| [Grammar Selector](https://github.com/atom/atom/tree/master/packages/grammar-selector) |  | [![Dependency Status](https://david-dm.org/atom/grammar-selector.svg)](https://david-dm.org/atom/grammar-selector) |
| [Image View](https://github.com/atom/image-view) | [![build](https://github.com/atom/image-view/workflows/CI/badge.svg)](https://github.com/atom/image-view/actions) | [![Dependency Status](https://david-dm.org/atom/image-view.svg)](https://david-dm.org/atom/image-view) |
| [Incompatible Packages](https://github.com/atom/incompatible-packages) |  | [![Dependency Status](https://david-dm.org/atom/incompatible-packages.svg)](https://david-dm.org/atom/incompatible-packages) |
| [Keybinding Resolver](https://github.com/atom/keybinding-resolver) | [![build](https://github.com/atom/keybinding-resolver/workflows/CI/badge.svg)](https://github.com/atom/keybinding-resolver/actions) | [![Dependency Status](https://david-dm.org/atom/keybinding-resolver.svg)](https://david-dm.org/atom/keybinding-resolver) |
| [Line Ending Selector](https://github.com/atom/atom/tree/master/packages/line-ending-selector) |  | [![Dependency Status](https://david-dm.org/atom/line-ending-selector.svg)](https://david-dm.org/atom/line-ending-selector) |
| [Link](https://github.com/atom/atom/tree/master/packages/link) |  | [![Dependency Status](https://david-dm.org/atom/link.svg)](https://david-dm.org/atom/link) |
| [Markdown Preview](https://github.com/atom/markdown-preview) | [![build](https://github.com/atom/markdown-preview/workflows/CI/badge.svg)](https://github.com/atom/markdown-preview/actions) | [![Dependency Status](https://david-dm.org/atom/markdown-preview.svg)](https://david-dm.org/atom/markdown-preview) |
| [Notifications](https://github.com/atom/notifications) | [![build](https://github.com/atom/notifications/workflows/CI/badge.svg)](https://github.com/atom/notifications/actions) | [![Dependency Status](https://david-dm.org/atom/notifications.svg)](https://david-dm.org/atom/notifications) |
| [Open on GitHub](https://github.com/atom/open-on-github) | [![build](https://github.com/atom/open-on-github/workflows/CI/badge.svg)](https://github.com/atom/open-on-github/actions) | [![Dependency Status](https://david-dm.org/atom/open-on-github.svg)](https://david-dm.org/atom/open-on-github) |
| [Package Generator](https://github.com/atom/package-generator) | [![build](https://github.com/atom/package-generator/workflows/CI/badge.svg)](https://github.com/atom/package-generator/actions) | [![Dependency Status](https://david-dm.org/atom/package-generator.svg)](https://david-dm.org/atom/package-generator) |
| [Settings View](https://github.com/atom/settings-view) | [![build](https://github.com/atom/settings-view/workflows/CI/badge.svg)](https://github.com/atom/settings-view/actions) | [![Dependency Status](https://david-dm.org/atom/settings-view.svg)](https://david-dm.org/atom/settings-view) |
| [Snippets](https://github.com/atom/snippets) | [![build](https://github.com/atom/snippets/workflows/CI/badge.svg)](https://github.com/atom/snippets/actions) | [![Dependency Status](https://david-dm.org/atom/snippets.svg)](https://david-dm.org/atom/snippets) |
| [Spell Check](https://github.com/atom/spell-check) | [![build](https://github.com/atom/spell-check/workflows/CI/badge.svg)](https://github.com/atom/spell-check/actions) | [![Dependency Status](https://david-dm.org/atom/spell-check.svg)](https://david-dm.org/atom/spell-check) |
| [Status Bar](https://github.com/atom/status-bar) | [![build](https://github.com/atom/status-bar/workflows/CI/badge.svg)](https://github.com/atom/status-bar/actions) | [![Dependency Status](https://david-dm.org/atom/status-bar.svg)](https://david-dm.org/atom/status-bar) |
| [Styleguide](https://github.com/atom/styleguide) | [![build](https://github.com/atom/styleguide/workflows/CI/badge.svg)](https://github.com/atom/styleguide/actions) | [![Dependency Status](https://david-dm.org/atom/styleguide.svg)](https://david-dm.org/atom/styleguide) |
| [Symbols View](https://github.com/atom/symbols-view) | [![build](https://github.com/atom/symbols-view/workflows/CI/badge.svg)](https://github.com/atom/symbols-view/actions) | [![Dependency Status](https://david-dm.org/atom/symbols-view.svg)](https://david-dm.org/atom/symbols-view) |
| [Tabs](https://github.com/atom/tabs) | [![build](https://github.com/atom/tabs/workflows/CI/badge.svg)](https://github.com/atom/tabs/actions) | [![Dependency Status](https://david-dm.org/atom/tabs.svg)](https://david-dm.org/atom/tabs) |
| [Timecop](https://github.com/atom/timecop) | [![build](https://github.com/atom/timecop/workflows/CI/badge.svg)](https://github.com/atom/timecop/actions) | [![Dependency Status](https://david-dm.org/atom/timecop.svg)](https://david-dm.org/atom/timecop) |
| [Tree View](https://github.com/atom/tree-view) | [![build](https://github.com/atom/tree-view/workflows/CI/badge.svg)](https://github.com/atom/tree-view/actions) | [![Dependency Status](https://david-dm.org/atom/tree-view.svg)](https://david-dm.org/atom/tree-view) |
| [Update Package Dependencies](https://github.com/atom/atom/tree/master/packages/update-package-dependencies) |  | [![Dependency Status](https://david-dm.org/atom/update-package-dependencies.svg)](https://david-dm.org/atom/update-package-dependencies) |
| [Welcome](https://github.com/atom/atom/tree/master/packages/welcome) |  | [![Dependency Status](https://david-dm.org/atom/welcome.svg)](https://david-dm.org/atom/welcome) |
| [Whitespace](https://github.com/atom/whitespace) | [![build](https://github.com/atom/whitespace/workflows/CI/badge.svg)](https://github.com/atom/whitespace/actions) | [![Dependency Status](https://david-dm.org/atom/whitespace.svg)](https://david-dm.org/atom/whitespace) |
| [Wrap Guide](https://github.com/atom/wrap-guide) | [![build](https://github.com/atom/wrap-guide/workflows/CI/badge.svg)](https://github.com/atom/wrap-guide/actions) | [![Dependency Status](https://david-dm.org/atom/wrap-guide.svg)](https://david-dm.org/atom/wrap-guide) |

## Libraries

| Library | Github Actions | Dependencies |
|---------|----------------|--------------|
| [Clear Cut](https://github.com/atom/clear-cut) | | [![Dependency Status](https://david-dm.org/atom/clear-cut.svg)](https://david-dm.org/atom/clear-cut) |
| [Event Kit](https://github.com/atom/event-kit) | [![build](https://github.com/atom/event-kit/workflows/CI/badge.svg)](https://github.com/atom/event-kit/actions) |  [![Dependency Status](https://david-dm.org/atom/event-kit.svg)](https://david-dm.org/atom/event-kit) |
| [First Mate](https://github.com/atom/first-mate) | [![build](https://github.com/atom/first-mate/workflows/CI/badge.svg)](https://github.com/atom/first-mate/actions) | [![Dependency Status](https://david-dm.org/atom/first-mate/status.svg)](https://david-dm.org/atom/first-mate) |
| [Fs Plus](https://github.com/atom/fs-plus) | [![build](https://github.com/atom/fs-plus/workflows/CI/badge.svg)](https://github.com/atom/fs-plus/actions) | [![Dependency Status](https://david-dm.org/atom/fs-plus.svg)](https://david-dm.org/atom/fs-plus) |
| [Grim](https://github.com/atom/grim) | [![build](https://github.com/atom/grim/workflows/CI/badge.svg)](https://github.com/atom/grim/actions) | [![Dependency Status](https://david-dm.org/atom/grim.svg)](https://david-dm.org/atom/grim) |
| [Jasmine Focused](https://github.com/atom/jasmine-focused) | | [![Dependency Status](https://david-dm.org/atom/jasmine-focused.svg)](https://david-dm.org/atom/jasmine-focused) |
| [Keyboard Layout](https://github.com/atom/keyboard-layout) | [![build](https://github.com/atom/keyboard-layout/workflows/CI/badge.svg)](https://github.com/atom/keyboard-layout/actions) | [![Dependency Status](https://david-dm.org/atom/keyboard-layout/status.svg)](https://david-dm.org/atom/keyboard-layout) |
| [Oniguruma](https://github.com/atom/node-oniguruma) | [![build](https://github.com/atom/node-oniguruma/workflows/CI/badge.svg)](https://github.com/atom/node-oniguruma/actions) | [![Dependency Status](https://david-dm.org/atom/node-oniguruma.svg)](https://david-dm.org/atom/node-oniguruma) |
| [PathWatcher](https://github.com/atom/node-pathwatcher) | [![build](https://github.com/atom/node-pathwatcher/workflows/ci/badge.svg)](https://github.com/atom/node-pathwatcher/actions) | [![Dependency Status](https://david-dm.org/atom/node-pathwatcher/status.svg)](https://david-dm.org/atom/node-pathwatcher) |
| [Property Accessors](https://github.com/atom/property-accessors) | | [![Dependency Status](https://david-dm.org/atom/property-accessors.svg)](https://david-dm.org/atom/property-accessors) |
| [Season](https://github.com/atom/season) | | [![Dependency Status](https://david-dm.org/atom/season.svg)](https://david-dm.org/atom/season) |
| [Superstring](https://github.com/atom/superstring) | [![build](https://github.com/atom/superstring/workflows/ci/badge.svg)](https://github.com/atom/superstring/actions) | [![Dependency Status](https://david-dm.org/atom/superstring.svg)](https://david-dm.org/atom/superstring) |
| [TextBuffer](https://github.com/atom/text-buffer) | [![build](https://github.com/atom/text-buffer/workflows/CI/badge.svg)](https://github.com/atom/text-buffer/actions) | [![Dependency Status](https://david-dm.org/atom/text-buffer.svg)](https://david-dm.org/atom/text-buffer) |
| [Underscore-Plus](https://github.com/atom/underscore-plus) | [![build](https://github.com/atom/underscore-plus/workflows/CI/badge.svg)](https://github.com/atom/underscore-plus/actions) | [![Dependency Status](https://david-dm.org/atom/underscore-plus.svg)](https://david-dm.org/atom/underscore-plus) |

## Tools
| Language | Github Actions | Dependencies |
|----------|----------------|--------------|
| [AtomDoc](https://github.com/atom/atomdoc) | [![build](https://github.com/atom/atomdoc/workflows/CI/badge.svg)](https://github.com/atom/atomdoc/actions) | [![Dependency Status](https://david-dm.org/atom/atomdoc.svg)](https://david-dm.org/atom/atomdoc)

## Languages

| Language | Github Actions |
|----------|----------------|
| [C/C++](https://github.com/atom/language-c) | [![build](https://github.com/atom/language-c/workflows/CI/badge.svg)](https://github.com/atom/language-c/actions) |
| [C#](https://github.com/atom/language-csharp) | [![build](https://github.com/atom/language-csharp/workflows/CI/badge.svg)](https://github.com/atom/language-csharp/actions) |
| [Clojure](https://github.com/atom/language-clojure) | [![build](https://github.com/atom/language-clojure/workflows/CI/badge.svg)](https://github.com/atom/language-clojure/actions) |
| [CoffeeScript](https://github.com/atom/language-coffee-script) | [![build](https://github.com/atom/language-coffee-script/workflows/CI/badge.svg)](https://github.com/atom/language-coffee-script/actions) |
| [CSS](https://github.com/atom/language-css) | [![build](https://github.com/atom/language-css/workflows/CI/badge.svg)](https://github.com/atom/language-css/actions) |
| [Git](https://github.com/atom/language-git) | [![build](https://github.com/atom/language-git/workflows/CI/badge.svg)](https://github.com/atom/language-git/actions) |
| [GitHub Flavored Markdown](https://github.com/atom/language-gfm) | [![build](https://github.com/atom/language-gfm/workflows/CI/badge.svg)](https://github.com/atom/language-gfm/actions) |
| [Go](https://github.com/atom/language-go) | [![build](https://github.com/atom/language-go/workflows/CI/badge.svg)](https://github.com/atom/language-go/actions) |
| [HTML](https://github.com/atom/language-html) | [![build](https://github.com/atom/language-html/workflows/CI/badge.svg)](https://github.com/atom/language-html/actions) |
| [Hyperlink](https://github.com/atom/language-hyperlink) | [![build](https://github.com/atom/language-hyperlink/workflows/CI/badge.svg)](https://github.com/atom/language-hyperlink/actions) |
| [Java](https://github.com/atom/language-java) | [![build](https://github.com/atom/language-java/workflows/build/badge.svg)](https://github.com/atom/language-java/actions) |
| [JavaScript](https://github.com/atom/language-javascript) | [![build](https://github.com/atom/language-javascript/workflows/ci/badge.svg)](https://github.com/atom/language-javascript/actions) |
| [JSON](https://github.com/atom/language-json) | [![build](https://github.com/atom/language-json/workflows/CI/badge.svg)](https://github.com/atom/language-json/actions) |
| [Less](https://github.com/atom/language-less) | [![build](https://github.com/atom/language-less/workflows/CI/badge.svg)](https://github.com/atom/language-less/actions) |
| [Make](https://github.com/atom/language-make) | [![build](https://github.com/atom/language-make/workflows/CI/badge.svg)](https://github.com/atom/language-make/actions) |
| [Mustache](https://github.com/atom/language-mustache) | [![build](https://github.com/atom/language-mustache/workflows/CI/badge.svg)](https://github.com/atom/language-mustache/actions) |
| [Objective-C](https://github.com/atom/language-objective-c) | [![build](https://github.com/atom/language-objective-c/workflows/CI/badge.svg)](https://github.com/atom/language-objective-c/actions) |
| [Pegjs](https://github.com/atom/language-pegjs) | |
| [Perl](https://github.com/atom/language-perl) | [![build](https://github.com/atom/language-perl/workflows/CI/badge.svg)](https://github.com/atom/language-perl/actions) |
| [PHP](https://github.com/atom/language-php) | [![build](https://github.com/atom/language-php/workflows/CI/badge.svg)](https://github.com/atom/language-php/actions) |
| [Property-List](https://github.com/atom/language-property-list) | [![build](https://github.com/atom/language-property-list/workflows/CI/badge.svg)](https://github.com/atom/language-property-list/actions) |
| [Puppet](https://github.com/atom/language-puppet) | [![build](https://github.com/atom/language-puppet/workflows/CI/badge.svg)](https://github.com/atom/language-puppet/actions) |
| [Python](https://github.com/atom/language-python) | [![build](https://github.com/atom/language-python/workflows/ci/badge.svg)](https://github.com/atom/language-python/actions) |
| [Ruby](https://github.com/atom/language-ruby) | [![build](https://github.com/atom/language-ruby/workflows/ci/badge.svg)](https://github.com/atom/language-ruby/actions) |
| [Ruby on Rails](https://github.com/atom/atom/tree/master/packages/ruby-on-rails) | |
| [Sass](https://github.com/atom/language-sass) | [![build](https://github.com/atom/language-sass/workflows/CI/badge.svg)](https://github.com/atom/language-sass/actions) |
| [Shellscript](https://github.com/atom/language-shellscript) | [![build](https://github.com/atom/language-shellscript/workflows/CI/badge.svg)](https://github.com/atom/language-shellscript/actions) |
| [Source](https://github.com/atom/language-source) | [![build](https://github.com/atom/language-source/workflows/CI/badge.svg)](https://github.com/atom/language-source/actions) |
| [SQL](https://github.com/atom/language-sql) | [![build](https://github.com/atom/language-sql/workflows/CI/badge.svg)](https://github.com/atom/language-sql/actions) |
| [Text](https://github.com/atom/language-text) | [![build](https://github.com/atom/language-text/workflows/CI/badge.svg)](https://github.com/atom/language-text/actions) |
| [TODO](https://github.com/atom/language-todo) | [![build](https://github.com/atom/language-todo/workflows/CI/badge.svg)](https://github.com/atom/language-todo/actions) |
| [TOML](https://github.com/atom/language-toml) | [![build](https://github.com/atom/language-toml/workflows/CI/badge.svg)](https://github.com/atom/language-toml/actions) |
| [TypeScript](https://github.com/atom/language-typescript) | [![build](https://github.com/atom/language-typescript/workflows/CI/badge.svg)](https://github.com/atom/language-typescript/actions) |
| [XML](https://github.com/atom/language-xml) | [![build](https://github.com/atom/language-xml/workflows/CI/badge.svg)](https://github.com/atom/language-xml/actions) |
| [YAML](https://github.com/atom/language-yaml) | [![build](https://github.com/atom/language-yaml/workflows/CI/badge.svg)](https://github.com/atom/language-yaml/actions) |

================
File: build-instructions/linux.md
================
See the [Hacking on Atom Core](https://flight-manual.atom.io/hacking-atom/sections/hacking-on-atom-core/#platform-linux) section in the [Atom Flight Manual](https://flight-manual.atom.io).

================
File: build-instructions/macOS.md
================
See the [Hacking on Atom Core](https://flight-manual.atom.io/hacking-atom/sections/hacking-on-atom-core/#platform-mac) section in the [Atom Flight Manual](https://flight-manual.atom.io).

================
File: build-instructions/windows.md
================
See the [Hacking on Atom Core](https://flight-manual.atom.io/hacking-atom/sections/hacking-on-atom-core/#platform-windows) section in the [Atom Flight Manual](https://flight-manual.atom.io).

================
File: contributing-to-packages.md
================
See https://flight-manual.atom.io/hacking-atom/sections/contributing-to-official-atom-packages/

================
File: contributing.md
================
# Contributing to Pulsar

:+1::tada: First off, thanks for taking the time to contribute! :tada::+1:

The following is a set of guidelines for contributing to Pulsar and its packages, which are hosted in the [pulsar-edit Organization](https://github.com/pulsar-edit) on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.

#### Table Of Contents

[Code of Conduct](#code-of-conduct)

[I don't want to read this whole thing, I just have a question!!!](#i-dont-want-to-read-this-whole-thing-i-just-have-a-question)

[What should I know before I get started?](#what-should-i-know-before-i-get-started)
  * [Pulsar and Packages](#pulsar-and-packages)
  * [Pulsar Design Decisions](#design-decisions)

[How Can I Contribute?](#how-can-i-contribute)
  * [Reporting Bugs](#reporting-bugs)
  * [Suggesting Enhancements](#suggesting-enhancements)
  * [Your First Code Contribution](#your-first-code-contribution)
  * [Pull Requests](#pull-requests)

[Styleguides](#styleguides)
  * [Git Commit Messages](#git-commit-messages)
  * [JavaScript Styleguide](#javascript-styleguide)
  * [CoffeeScript Styleguide](#coffeescript-styleguide)
  * [Specs Styleguide](#specs-styleguide)
  * [Documentation Styleguide](#documentation-styleguide)

[Additional Notes](#additional-notes)
  * [Issue and Pull Request Labels](#issue-and-pull-request-labels)

## Code of Conduct

This project and everyone participating in it is governed by the [Atom Code of Conduct](CODE_OF_CONDUCT.md). By participating, you are expected to uphold this code. Please report unacceptable behavior to [atom@github.com](mailto:atom@github.com).

## I don't want to read this whole thing I just have a question!!!

> **Note:** [Please don't file an issue to ask a question.](https://blog.atom.io/2016/04/19/managing-the-deluge-of-atom-issues.html) You'll get faster results by using the resources below.

We have an official message board with a detailed FAQ and where the community chimes in with helpful advice if you have questions.

* [Github Discussions, the official Atom message board](https://github.com/atom/atom/discussions)
* [Atom FAQ](https://flight-manual.atom.io/faq/)

## What should I know before I get started?

### Pulsar and Packages

Pulsar is a large open source project &mdash; it's made up of over [200 repositories](https://github.com/pulsar-edit). When you initially consider contributing to Pulsar, you might be unsure about which of those 200 repositories implements the functionality you want to change or report a bug for. This section should help you with that.

Pulsar is intentionally very modular. Nearly every non-editor UI element you interact with comes from a package, even fundamental things like tabs and the status-bar. These packages are packages in the same way that packages in the [Atom package repository](https://atom.io/packages) are packages, with one difference: they are bundled into the [default distribution](https://github.com/atom/atom/blob/10b8de6fc499a7def9b072739486e68530d67ab4/package.json#L58).

<a id="atom-packages-image"/>

![atom-packages](https://cloud.githubusercontent.com/assets/69169/10472281/84fc9792-71d3-11e5-9fd1-19da717df079.png)

To get a sense for the packages that are bundled with Atom, you can go to `Settings` > `Packages` within Atom and take a look at the Core Packages section.

Here's a list of the big ones:

* [pulsar-edit/pulsar](https://github.com/pulsar-edit/pulsar) - Pulsar Core! The core editor component is responsible for basic text editing (e.g. cursors, selections, scrolling), text indentation, wrapping, and folding, text rendering, editor rendering, file system operations (e.g. saving), and installation and auto-updating. You should also use this repository for feedback related to the [API](https://atom.io/docs/api/latest) and for large, overarching design proposals.
* [tree-view](https://github.com/pulsar-edit/tree-view) - file and directory listing on the left of the UI.
* [fuzzy-finder](https://github.com/pulsar-edit/fuzzy-finder) - the quick file opener.
* [find-and-replace](https://github.com/pulsar-edit/find-and-replace) - all search and replace functionality.
* [tabs](https://github.com/pulsar-edit/tabs) - the tabs for open editors at the top of the UI.
* [status-bar](https://github.com/pulsar-edit/status-bar) - the status bar at the bottom of the UI.
* [markdown-preview](https://github.com/pulsar-edit/markdown-preview) - the rendered markdown pane item.
* [settings-view](https://github.com/pulsar-edit/settings-view) - the settings UI pane item.
* [autocomplete-plus](https://github.com/pulsar-edit/autocomplete-plus) - autocompletions shown while typing. Some languages have additional packages for autocompletion functionality, such as [autocomplete-html](https://github.com/pulsar-edit/autocomplete-html).
* [git-diff](https://github.com/pulsar-edit/git-diff) - Git change indicators shown in the editor's gutter.
* [language-javascript](https://github.com/pulsar-edit/language-javascript) - all bundled languages are packages too, and each one has a separate package `language-[name]`. Use these for feedback on syntax highlighting issues that only appear for a specific language.
* [one-dark-ui](https://github.com/pulsar-edit/one-dark-ui) - the default UI styling for anything but the text editor. UI theme packages (i.e. packages with a `-ui` suffix) provide only styling and it's possible that a bundled package is responsible for a UI issue. There are other bundled UI themes, such as [one-light-ui](https://github.com/pulsar-edit/one-light-ui).
* [one-dark-syntax](https://github.com/pulsar-edit/one-dark-syntax) - the default syntax highlighting styles applied for all languages. There are other bundled syntax themes, such as [solarized-dark-syntax](https://github.com/pulsar-edit/solarized-dark-syntax). You should use these packages for reporting issues that appear in many languages, but disappear if you change to another syntax theme.
* [apm](https://github.com/pulsar-edit/apm) - the `apm` command line tool (Atom Package Manager). You should use this repository for any contributions related to the `apm` tool and for publishing packages.
* [atom.io](https://github.com/pulsar-edit/atom.io) - the repository for feedback on the [Atom.io website](https://atom.io) and the [Atom.io package API](https://github.com/atom/atom/blob/master/docs/apm-rest-api.md) used by [ppm](https://github.com/pulsar-edit/ppm).

There are many more, but this list should be a good starting point. For more information on how to work with Atom's official packages, see [Contributing to Atom Packages][contributing-to-official-atom-packages].

Also, because Atom is so extensible, it's possible that a feature you've become accustomed to in Atom or an issue you're encountering isn't coming from a bundled package at all, but rather a [community package](https://atom.io/packages) you've installed. Each community package has its own repository too.

#### Package Conventions

There are a few conventions that have developed over time around packages:

* Packages that add one or more syntax highlighting grammars are named `language-[language-name]`
    * Language packages can add other things besides just a grammar. Many offer commonly-used snippets. Try not to add too much though.
* Theme packages are split into two categories: UI and Syntax themes
    * UI themes are named `[theme-name]-ui`
    * Syntax themes are named `[theme-name]-syntax`
    * Often themes that are designed to work together are given the same root name, for example: `one-dark-ui` and `one-dark-syntax`
    * UI themes style everything outside of the editor pane &mdash; all of the green areas in the [packages image above](#atom-packages-image)
    * Syntax themes style just the items inside the editor pane, mostly syntax highlighting
* Packages that add [autocomplete providers](https://github.com/atom/autocomplete-plus/wiki/Autocomplete-Providers) are named `autocomplete-[what-they-autocomplete]` &mdash; ex: [autocomplete-css](https://github.com/atom/autocomplete-css)

### Design Decisions

When we make a significant decision in how we maintain the project and what we can or cannot support, we will document it in the [atom/design-decisions repository](https://github.com/atom/design-decisions). If you have a question around how we do things, check to see if it is documented there. If it is *not* documented there, please open a new topic on [Github Discussions, the official Atom message board](https://github.com/atom/atom/discussions) and ask your question.

## How Can I Contribute?

### Reporting Bugs

This section guides you through submitting a bug report for Atom. Following these guidelines helps maintainers and the community understand your report :pencil:, reproduce the behavior :computer: :computer:, and find related reports :mag_right:.

Before creating bug reports, please check [this list](#before-submitting-a-bug-report) as you might find out that you don't need to create one. When you are creating a bug report, please [include as many details as possible](#how-do-i-submit-a-good-bug-report). Fill out [the required template](https://github.com/atom/.github/blob/master/.github/ISSUE_TEMPLATE/bug_report.md), the information it asks for helps us resolve issues faster.

> **Note:** If you find a **Closed** issue that seems like it is the same thing that you're experiencing, open a new issue and include a link to the original issue in the body of your new one.

#### Before Submitting A Bug Report

* **Check the [debugging guide](https://flight-manual.atom.io/hacking-atom/sections/debugging/).** You might be able to find the cause of the problem and fix things yourself. Most importantly, check if you can reproduce the problem [in the latest version of Atom](https://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version), if the problem happens when you run Atom in [safe mode](https://flight-manual.atom.io/hacking-atom/sections/debugging/#check-if-the-problem-shows-up-in-safe-mode), and if you can get the desired behavior by changing [Atom's or packages' config settings](https://flight-manual.atom.io/hacking-atom/sections/debugging/#check-atom-and-package-settings).
* **Check the [faq](https://flight-manual.atom.io/faq/) and the [discussions](https://github.com/atom/atom/discussions)** for a list of common questions and problems.
* **Determine [which repository the problem should be reported in](#atom-and-packages)**.
* **Perform a [cursory search](https://github.com/search?q=+is%3Aissue+user%3Aatom)** to see if the problem has already been reported. If it has **and the issue is still open**, add a comment to the existing issue instead of opening a new one.

#### How Do I Submit A (Good) Bug Report?

Bugs are tracked as [GitHub issues](https://guides.github.com/features/issues/). After you've determined [which repository](#atom-and-packages) your bug is related to, create an issue on that repository and provide the following information by filling in [the template](https://github.com/atom/.github/blob/master/.github/ISSUE_TEMPLATE/bug_report.md).

Explain the problem and include additional details to help maintainers reproduce the problem:

* **Use a clear and descriptive title** for the issue to identify the problem.
* **Describe the exact steps which reproduce the problem** in as many details as possible. For example, start by explaining how you started Atom, e.g. which command exactly you used in the terminal, or how you started Atom otherwise. When listing steps, **don't just say what you did, but explain how you did it**. For example, if you moved the cursor to the end of a line, explain if you used the mouse, or a keyboard shortcut or an Atom command, and if so which one?
* **Provide specific examples to demonstrate the steps**. Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you're providing snippets in the issue, use [Markdown code blocks](https://help.github.com/articles/markdown-basics/#multiple-lines).
* **Describe the behavior you observed after following the steps** and point out what exactly is the problem with that behavior.
* **Explain which behavior you expected to see instead and why.**
* **Include screenshots and animated GIFs** which show you following the described steps and clearly demonstrate the problem. If you use the keyboard while following the steps, **record the GIF with the [Keybinding Resolver](https://github.com/atom/keybinding-resolver) shown**. You can use [this tool](https://www.cockos.com/licecap/) to record GIFs on macOS and Windows, and [this tool](https://github.com/colinkeenan/silentcast) or [this tool](https://github.com/GNOME/byzanz) on Linux.
* **If you're reporting that Atom crashed**, include a crash report with a stack trace from the operating system. On macOS, the crash report will be available in `Console.app` under "Diagnostic and usage information" > "User diagnostic reports". Include the crash report in the issue in a [code block](https://help.github.com/articles/markdown-basics/#multiple-lines), a [file attachment](https://help.github.com/articles/file-attachments-on-issues-and-pull-requests/), or put it in a [gist](https://gist.github.com/) and provide link to that gist.
* **If the problem is related to performance or memory**, include a [CPU profile capture](https://flight-manual.atom.io/hacking-atom/sections/debugging/#diagnose-runtime-performance) with your report.
* **If Chrome's developer tools pane is shown without you triggering it**, that normally means that you have a syntax error in one of your themes or in your `styles.less`. Try running in [Safe Mode](https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode) and using a different theme or comment out the contents of your `styles.less` to see if that fixes the problem.
* **If the problem wasn't triggered by a specific action**, describe what you were doing before the problem happened and share more information using the guidelines below.

Provide more context by answering these questions:

* **Can you reproduce the problem in [safe mode](https://flight-manual.atom.io/hacking-atom/sections/debugging/#diagnose-runtime-performance-problems-with-the-dev-tools-cpu-profiler)?**
* **Did the problem start happening recently** (e.g. after updating to a new version of Atom) or was this always a problem?
* If the problem started happening recently, **can you reproduce the problem in an older version of Atom?** What's the most recent version in which the problem doesn't happen? You can download older versions of Atom from [the releases page](https://github.com/atom/atom/releases).
* **Can you reliably reproduce the issue?** If not, provide details about how often the problem happens and under which conditions it normally happens.
* If the problem is related to working with files (e.g. opening and editing files), **does the problem happen for all files and projects or only some?** Does the problem happen only when working with local or remote files (e.g. on network drives), with files of a specific type (e.g. only JavaScript or Python files), with large files or files with very long lines, or with files in a specific encoding? Is there anything else special about the files you are using?

Include details about your configuration and environment:

* **Which version of Atom are you using?** You can get the exact version by running `atom -v` in your terminal, or by starting Atom and running the `Application: About` command from the [Command Palette](https://github.com/atom/command-palette).
* **What's the name and version of the OS you're using**?
* **Are you running Atom in a virtual machine?** If so, which VM software are you using and which operating systems and versions are used for the host and the guest?
* **Which [packages](#atom-and-packages) do you have installed?** You can get that list by running `apm list --installed`.
* **Are you using [local configuration files](https://flight-manual.atom.io/using-atom/sections/basic-customization/)** `config.cson`, `keymap.cson`, `snippets.cson`, `styles.less` and `init.js` to customize Atom? If so, provide the contents of those files, preferably in a [code block](https://help.github.com/articles/markdown-basics/#multiple-lines) or with a link to a [gist](https://gist.github.com/).
* **Are you using Atom with multiple monitors?** If so, can you reproduce the problem when you use a single monitor?
* **Which keyboard layout are you using?** Are you using a US layout or some other layout?

### Suggesting Enhancements

This section guides you through submitting an enhancement suggestion for Atom, including completely new features and minor improvements to existing functionality. Following these guidelines helps maintainers and the community understand your suggestion :pencil: and find related suggestions :mag_right:.

Before creating enhancement suggestions, please check [this list](#before-submitting-an-enhancement-suggestion) as you might find out that you don't need to create one. When you are creating an enhancement suggestion, please [include as many details as possible](#how-do-i-submit-a-good-enhancement-suggestion). Fill in [the template](https://github.com/atom/.github/blob/master/.github/ISSUE_TEMPLATE/feature_request.md), including the steps that you imagine you would take if the feature you're requesting existed.

#### Before Submitting An Enhancement Suggestion

* **Check the [debugging guide](https://flight-manual.atom.io/hacking-atom/sections/debugging/)** for tips — you might discover that the enhancement is already available. Most importantly, check if you're using [the latest version of Atom](https://flight-manual.atom.io/hacking-atom/sections/debugging/#update-to-the-latest-version) and if you can get the desired behavior by changing [Atom's or packages' config settings](https://flight-manual.atom.io/hacking-atom/sections/debugging/#check-atom-and-package-settings).
* **Check if there's already [a package](https://atom.io/packages) which provides that enhancement.**
* **Determine [which repository the enhancement should be suggested in](#atom-and-packages).**
* **Perform a [cursory search](https://github.com/search?q=+is%3Aissue+user%3Aatom)** to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.

#### How Do I Submit A (Good) Enhancement Suggestion?

Enhancement suggestions are tracked as [GitHub issues](https://guides.github.com/features/issues/). After you've determined [which repository](#atom-and-packages) your enhancement suggestion is related to, create an issue on that repository and provide the following information:

* **Use a clear and descriptive title** for the issue to identify the suggestion.
* **Provide a step-by-step description of the suggested enhancement** in as many details as possible.
* **Provide specific examples to demonstrate the steps**. Include copy/pasteable snippets which you use in those examples, as [Markdown code blocks](https://help.github.com/articles/markdown-basics/#multiple-lines).
* **Describe the current behavior** and **explain which behavior you expected to see instead** and why.
* **Include screenshots and animated GIFs** which help you demonstrate the steps or point out the part of Atom which the suggestion is related to. You can use [this tool](https://www.cockos.com/licecap/) to record GIFs on macOS and Windows, and [this tool](https://github.com/colinkeenan/silentcast) or [this tool](https://github.com/GNOME/byzanz) on Linux.
* **Explain why this enhancement would be useful** to most Atom users and isn't something that can or should be implemented as a [community package](#atom-and-packages).
* **List some other text editors or applications where this enhancement exists.**
* **Specify which version of Atom you're using.** You can get the exact version by running `atom -v` in your terminal, or by starting Atom and running the `Application: About` command from the [Command Palette](https://github.com/atom/command-palette).
* **Specify the name and version of the OS you're using.**

### Your First Code Contribution

Unsure where to begin contributing to Atom? You can start by looking through these `beginner` and `help-wanted` issues:

* [Beginner issues][beginner] - issues which should only require a few lines of code, and a test or two.
* [Help wanted issues][help-wanted] - issues which should be a bit more involved than `beginner` issues.

Both issue lists are sorted by total number of comments. While not perfect, number of comments is a reasonable proxy for impact a given change will have.

If you want to read about using Atom or developing packages in Atom, the [Atom Flight Manual](https://flight-manual.atom.io) is free and available online. You can find the source to the manual in [atom/flight-manual.atom.io](https://github.com/atom/flight-manual.atom.io).

#### Local development

Atom Core and all packages can be developed locally. For instructions on how to do this, see the following sections in the [Atom Flight Manual](https://flight-manual.atom.io):

* [Hacking on Atom Core][hacking-on-atom-core]
* [Contributing to Official Atom Packages][contributing-to-official-atom-packages]

### Pull Requests

The process described here has several goals:

- Maintain Atom's quality
- Fix problems that are important to users
- Engage the community in working toward the best possible Atom
- Enable a sustainable system for Atom's maintainers to review contributions

Please follow these steps to have your contribution considered by the maintainers:

1. Follow all instructions in [the template](PULL_REQUEST_TEMPLATE.md)
2. Follow the [styleguides](#styleguides)
3. After you submit your pull request, verify that all [status checks](https://help.github.com/articles/about-status-checks/) are passing <details><summary>What if the status checks are failing?</summary>If a status check is failing, and you believe that the failure is unrelated to your change, please leave a comment on the pull request explaining why you believe the failure is unrelated. A maintainer will re-run the status check for you. If we conclude that the failure was a false positive, then we will open an issue to track that problem with our status check suite.</details>

While the prerequisites above must be satisfied prior to having your pull request reviewed, the reviewer(s) may ask you to complete additional design work, tests, or other changes before your pull request can be ultimately accepted.

## Styleguides

### Git Commit Messages

* Use the present tense ("Add feature" not "Added feature")
* Use the imperative mood ("Move cursor to..." not "Moves cursor to...")
* Limit the first line to 72 characters or less
* Reference issues and pull requests liberally after the first line
* When only changing documentation, include `[ci skip]` in the commit title
* Consider starting the commit message with an applicable emoji:
    * :art: `:art:` when improving the format/structure of the code
    * :racehorse: `:racehorse:` when improving performance
    * :non-potable_water: `:non-potable_water:` when plugging memory leaks
    * :memo: `:memo:` when writing docs
    * :penguin: `:penguin:` when fixing something on Linux
    * :apple: `:apple:` when fixing something on macOS
    * :checkered_flag: `:checkered_flag:` when fixing something on Windows
    * :bug: `:bug:` when fixing a bug
    * :fire: `:fire:` when removing code or files
    * :green_heart: `:green_heart:` when fixing the CI build
    * :white_check_mark: `:white_check_mark:` when adding tests
    * :lock: `:lock:` when dealing with security
    * :arrow_up: `:arrow_up:` when upgrading dependencies
    * :arrow_down: `:arrow_down:` when downgrading dependencies
    * :shirt: `:shirt:` when removing linter warnings

### JavaScript Styleguide

All JavaScript code is linted with [Prettier](https://prettier.io/).

* Prefer the object spread operator (`{...anotherObj}`) to `Object.assign()`
* Inline `export`s with expressions whenever possible
  ```js
  // Use this:
  export default class ClassName {

  }

  // Instead of:
  class ClassName {

  }
  export default ClassName
  ```
* Place requires in the following order:
    * Built in Node Modules (such as `path`)
    * Built in Atom and Electron Modules (such as `atom`, `remote`)
    * Local Modules (using relative paths)
* Place class properties in the following order:
    * Class methods and properties (methods starting with `static`)
    * Instance methods and properties
* [Avoid platform-dependent code](https://flight-manual.atom.io/hacking-atom/sections/cross-platform-compatibility/)

### CoffeeScript Styleguide

* Set parameter defaults without spaces around the equal sign
    * `clear = (count=1) ->` instead of `clear = (count = 1) ->`
* Use spaces around operators
    * `count + 1` instead of `count+1`
* Use spaces after commas (unless separated by newlines)
* Use parentheses if it improves code clarity.
* Prefer alphabetic keywords to symbolic keywords:
    * `a is b` instead of `a == b`
* Avoid spaces inside the curly-braces of hash literals:
    * `{a: 1, b: 2}` instead of `{ a: 1, b: 2 }`
* Include a single line of whitespace between methods.
* Capitalize initialisms and acronyms in names, except for the first word, which
  should be lower-case:
  * `getURI` instead of `getUri`
  * `uriToOpen` instead of `URIToOpen`
* Use `slice()` to copy an array
* Add an explicit `return` when your function ends with a `for`/`while` loop and
  you don't want it to return a collected array.
* Use `this` instead of a standalone `@`
  * `return this` instead of `return @`
* Place requires in the following order:
    * Built in Node Modules (such as `path`)
    * Built in Atom and Electron Modules (such as `atom`, `remote`)
    * Local Modules (using relative paths)
* Place class properties in the following order:
    * Class methods and properties (methods starting with a `@`)
    * Instance methods and properties
* [Avoid platform-dependent code](https://flight-manual.atom.io/hacking-atom/sections/cross-platform-compatibility/)

### Specs Styleguide

- Include thoughtfully-worded, well-structured [Jasmine](https://jasmine.github.io/) specs in the `./spec` folder.
- Treat `describe` as a noun or situation.
- Treat `it` as a statement about state or how an operation changes state.

#### Example

```coffee
describe 'a dog', ->
 it 'barks', ->
 # spec here
 describe 'when the dog is happy', ->
  it 'wags its tail', ->
  # spec here
```

### Documentation Styleguide

* Use [AtomDoc](https://github.com/atom/atomdoc).
* Use [Markdown](https://daringfireball.net/projects/markdown).
* Reference methods and classes in markdown with the custom `{}` notation:
    * Reference classes with `{ClassName}`
    * Reference instance methods with `{ClassName::methodName}`
    * Reference class methods with `{ClassName.methodName}`

#### Example

```coffee
# Public: Disable the package with the given name.
#
# * `name`    The {String} name of the package to disable.
# * `options` (optional) The {Object} with disable options (default: {}):
#   * `trackTime`     A {Boolean}, `true` to track the amount of time taken.
#   * `ignoreErrors`  A {Boolean}, `true` to catch and ignore errors thrown.
# * `callback` The {Function} to call after the package has been disabled.
#
# Returns `undefined`.
disablePackage: (name, options, callback) ->
```

## Additional Notes

### Issue and Pull Request Labels

This section lists the labels we use to help us track and manage issues and pull requests. Most labels are used across all Atom repositories, but some are specific to `atom/atom`.

[GitHub search](https://help.github.com/articles/searching-issues/) makes it easy to use labels for finding groups of issues or pull requests you're interested in. For example, you might be interested in [open issues across `atom/atom` and all Atom-owned packages which are labeled as bugs, but still need to be reliably reproduced](https://github.com/search?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Abug+label%3Aneeds-reproduction) or perhaps [open pull requests in `atom/atom` which haven't been reviewed yet](https://github.com/search?utf8=%E2%9C%93&q=is%3Aopen+is%3Apr+repo%3Aatom%2Fatom+comments%3A0). To help you find issues and pull requests, each label is listed with search links for finding open items with that label in `atom/atom` only and also across all Atom repositories. We  encourage you to read about [other search filters](https://help.github.com/articles/searching-issues/) which will help you write more focused queries.

The labels are loosely grouped by their purpose, but it's not required that every issue has a label from every group or that an issue can't have more than one label from the same group.

Please open an issue on `atom/atom` if you have suggestions for new labels, and if you notice some labels are missing on some repositories, then please open an issue on that repository.

#### Type of Issue and Issue State

| Label name | `atom/atom` :mag_right: | `atom`‑org :mag_right: | Description |
| --- | --- | --- | --- |
| `enhancement` | [search][search-atom-repo-label-enhancement] | [search][search-atom-org-label-enhancement] | Feature requests. |
| `bug` | [search][search-atom-repo-label-bug] | [search][search-atom-org-label-bug] | Confirmed bugs or reports that are very likely to be bugs. |
| `question` | [search][search-atom-repo-label-question] | [search][search-atom-org-label-question] | Questions more than bug reports or feature requests (e.g. how do I do X). |
| `feedback` | [search][search-atom-repo-label-feedback] | [search][search-atom-org-label-feedback] | General feedback more than bug reports or feature requests. |
| `help-wanted` | [search][search-atom-repo-label-help-wanted] | [search][search-atom-org-label-help-wanted] | The Atom core team would appreciate help from the community in resolving these issues. |
| `beginner` | [search][search-atom-repo-label-beginner] | [search][search-atom-org-label-beginner] | Less complex issues which would be good first issues to work on for users who want to contribute to Atom. |
| `more-information-needed` | [search][search-atom-repo-label-more-information-needed] | [search][search-atom-org-label-more-information-needed] | More information needs to be collected about these problems or feature requests (e.g. steps to reproduce). |
| `needs-reproduction` | [search][search-atom-repo-label-needs-reproduction] | [search][search-atom-org-label-needs-reproduction] | Likely bugs, but haven't been reliably reproduced. |
| `blocked` | [search][search-atom-repo-label-blocked] | [search][search-atom-org-label-blocked] | Issues blocked on other issues. |
| `duplicate` | [search][search-atom-repo-label-duplicate] | [search][search-atom-org-label-duplicate] | Issues which are duplicates of other issues, i.e. they have been reported before. |
| `wontfix` | [search][search-atom-repo-label-wontfix] | [search][search-atom-org-label-wontfix] | The Atom core team has decided not to fix these issues for now, either because they're working as intended or for some other reason. |
| `invalid` | [search][search-atom-repo-label-invalid] | [search][search-atom-org-label-invalid] | Issues which aren't valid (e.g. user errors). |
| `package-idea` | [search][search-atom-repo-label-package-idea] | [search][search-atom-org-label-package-idea] | Feature request which might be good candidates for new packages, instead of extending Atom or core Atom packages. |
| `wrong-repo` | [search][search-atom-repo-label-wrong-repo] | [search][search-atom-org-label-wrong-repo] | Issues reported on the wrong repository (e.g. a bug related to the [Settings View package](https://github.com/atom/settings-view) was reported on [Atom core](https://github.com/atom/atom)). |

#### Topic Categories

| Label name | `atom/atom` :mag_right: | `atom`‑org :mag_right: | Description |
| --- | --- | --- | --- |
| `windows` | [search][search-atom-repo-label-windows] | [search][search-atom-org-label-windows] | Related to Atom running on Windows. |
| `linux` | [search][search-atom-repo-label-linux] | [search][search-atom-org-label-linux] | Related to Atom running on Linux. |
| `mac` | [search][search-atom-repo-label-mac] | [search][search-atom-org-label-mac] | Related to Atom running on macOS. |
| `documentation` | [search][search-atom-repo-label-documentation] | [search][search-atom-org-label-documentation] | Related to any type of documentation (e.g. [API documentation](https://atom.io/docs/api/latest/) and the [flight manual](https://flight-manual.atom.io/)). |
| `performance` | [search][search-atom-repo-label-performance] | [search][search-atom-org-label-performance] | Related to performance. |
| `security` | [search][search-atom-repo-label-security] | [search][search-atom-org-label-security] | Related to security. |
| `ui` | [search][search-atom-repo-label-ui] | [search][search-atom-org-label-ui] | Related to visual design. |
| `api` | [search][search-atom-repo-label-api] | [search][search-atom-org-label-api] | Related to Atom's public APIs. |
| `uncaught-exception` | [search][search-atom-repo-label-uncaught-exception] | [search][search-atom-org-label-uncaught-exception] | Issues about uncaught exceptions, normally created from the [Notifications package](https://github.com/atom/notifications). |
| `crash` | [search][search-atom-repo-label-crash] | [search][search-atom-org-label-crash] | Reports of Atom completely crashing. |
| `auto-indent` | [search][search-atom-repo-label-auto-indent] | [search][search-atom-org-label-auto-indent] | Related to auto-indenting text. |
| `encoding` | [search][search-atom-repo-label-encoding] | [search][search-atom-org-label-encoding] | Related to character encoding. |
| `network` | [search][search-atom-repo-label-network] | [search][search-atom-org-label-network] | Related to network problems or working with remote files (e.g. on network drives). |
| `git` | [search][search-atom-repo-label-git] | [search][search-atom-org-label-git] | Related to Git functionality (e.g. problems with gitignore files or with showing the correct file status). |

#### `atom/atom` Topic Categories

| Label name | `atom/atom` :mag_right: | `atom`‑org :mag_right: | Description |
| --- | --- | --- | --- |
| `editor-rendering` | [search][search-atom-repo-label-editor-rendering] | [search][search-atom-org-label-editor-rendering] | Related to language-independent aspects of rendering text (e.g. scrolling, soft wrap, and font rendering). |
| `build-error` | [search][search-atom-repo-label-build-error] | [search][search-atom-org-label-build-error] | Related to problems with building Atom from source. |
| `error-from-pathwatcher` | [search][search-atom-repo-label-error-from-pathwatcher] | [search][search-atom-org-label-error-from-pathwatcher] | Related to errors thrown by the [pathwatcher library](https://github.com/atom/node-pathwatcher). |
| `error-from-save` | [search][search-atom-repo-label-error-from-save] | [search][search-atom-org-label-error-from-save] | Related to errors thrown when saving files. |
| `error-from-open` | [search][search-atom-repo-label-error-from-open] | [search][search-atom-org-label-error-from-open] | Related to errors thrown when opening files. |
| `installer` | [search][search-atom-repo-label-installer] | [search][search-atom-org-label-installer] | Related to the Atom installers for different OSes. |
| `auto-updater` | [search][search-atom-repo-label-auto-updater] | [search][search-atom-org-label-auto-updater] | Related to the auto-updater for different OSes. |
| `deprecation-help` | [search][search-atom-repo-label-deprecation-help] | [search][search-atom-org-label-deprecation-help] | Issues for helping package authors remove usage of deprecated APIs in packages. |
| `electron` | [search][search-atom-repo-label-electron] | [search][search-atom-org-label-electron] | Issues that require changes to [Electron](https://electron.atom.io) to fix or implement. |

#### Pull Request Labels

| Label name | `atom/atom` :mag_right: | `atom`‑org :mag_right: | Description
| --- | --- | --- | --- |
| `work-in-progress` | [search][search-atom-repo-label-work-in-progress] | [search][search-atom-org-label-work-in-progress] | Pull requests which are still being worked on, more changes will follow. |
| `needs-review` | [search][search-atom-repo-label-needs-review] | [search][search-atom-org-label-needs-review] | Pull requests which need code review, and approval from maintainers or Atom core team. |
| `under-review` | [search][search-atom-repo-label-under-review] | [search][search-atom-org-label-under-review] | Pull requests being reviewed by maintainers or Atom core team. |
| `requires-changes` | [search][search-atom-repo-label-requires-changes] | [search][search-atom-org-label-requires-changes] | Pull requests which need to be updated based on review comments and then reviewed again. |
| `needs-testing` | [search][search-atom-repo-label-needs-testing] | [search][search-atom-org-label-needs-testing] | Pull requests which need manual testing. |

[search-atom-repo-label-enhancement]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aenhancement
[search-atom-org-label-enhancement]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aenhancement
[search-atom-repo-label-bug]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Abug
[search-atom-org-label-bug]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Abug
[search-atom-repo-label-question]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aquestion
[search-atom-org-label-question]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aquestion
[search-atom-repo-label-feedback]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Afeedback
[search-atom-org-label-feedback]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Afeedback
[search-atom-repo-label-help-wanted]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Ahelp-wanted
[search-atom-org-label-help-wanted]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Ahelp-wanted
[search-atom-repo-label-beginner]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Abeginner
[search-atom-org-label-beginner]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Abeginner
[search-atom-repo-label-more-information-needed]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Amore-information-needed
[search-atom-org-label-more-information-needed]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Amore-information-needed
[search-atom-repo-label-needs-reproduction]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aneeds-reproduction
[search-atom-org-label-needs-reproduction]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aneeds-reproduction
[search-atom-repo-label-triage-help-needed]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Atriage-help-needed
[search-atom-org-label-triage-help-needed]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Atriage-help-needed
[search-atom-repo-label-windows]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Awindows
[search-atom-org-label-windows]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Awindows
[search-atom-repo-label-linux]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Alinux
[search-atom-org-label-linux]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Alinux
[search-atom-repo-label-mac]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Amac
[search-atom-org-label-mac]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Amac
[search-atom-repo-label-documentation]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Adocumentation
[search-atom-org-label-documentation]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Adocumentation
[search-atom-repo-label-performance]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aperformance
[search-atom-org-label-performance]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aperformance
[search-atom-repo-label-security]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Asecurity
[search-atom-org-label-security]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Asecurity
[search-atom-repo-label-ui]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aui
[search-atom-org-label-ui]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aui
[search-atom-repo-label-api]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aapi
[search-atom-org-label-api]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aapi
[search-atom-repo-label-crash]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Acrash
[search-atom-org-label-crash]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Acrash
[search-atom-repo-label-auto-indent]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aauto-indent
[search-atom-org-label-auto-indent]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aauto-indent
[search-atom-repo-label-encoding]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aencoding
[search-atom-org-label-encoding]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aencoding
[search-atom-repo-label-network]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Anetwork
[search-atom-org-label-network]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Anetwork
[search-atom-repo-label-uncaught-exception]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Auncaught-exception
[search-atom-org-label-uncaught-exception]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Auncaught-exception
[search-atom-repo-label-git]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Agit
[search-atom-org-label-git]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Agit
[search-atom-repo-label-blocked]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Ablocked
[search-atom-org-label-blocked]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Ablocked
[search-atom-repo-label-duplicate]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aduplicate
[search-atom-org-label-duplicate]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aduplicate
[search-atom-repo-label-wontfix]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Awontfix
[search-atom-org-label-wontfix]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Awontfix
[search-atom-repo-label-invalid]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Ainvalid
[search-atom-org-label-invalid]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Ainvalid
[search-atom-repo-label-package-idea]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Apackage-idea
[search-atom-org-label-package-idea]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Apackage-idea
[search-atom-repo-label-wrong-repo]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Awrong-repo
[search-atom-org-label-wrong-repo]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Awrong-repo
[search-atom-repo-label-editor-rendering]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aeditor-rendering
[search-atom-org-label-editor-rendering]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aeditor-rendering
[search-atom-repo-label-build-error]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Abuild-error
[search-atom-org-label-build-error]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Abuild-error
[search-atom-repo-label-error-from-pathwatcher]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aerror-from-pathwatcher
[search-atom-org-label-error-from-pathwatcher]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aerror-from-pathwatcher
[search-atom-repo-label-error-from-save]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aerror-from-save
[search-atom-org-label-error-from-save]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aerror-from-save
[search-atom-repo-label-error-from-open]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aerror-from-open
[search-atom-org-label-error-from-open]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aerror-from-open
[search-atom-repo-label-installer]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Ainstaller
[search-atom-org-label-installer]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Ainstaller
[search-atom-repo-label-auto-updater]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Aauto-updater
[search-atom-org-label-auto-updater]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aauto-updater
[search-atom-repo-label-deprecation-help]: https://github.com/search?q=is%3Aopen+is%3Aissue+repo%3Aatom%2Fatom+label%3Adeprecation-help
[search-atom-org-label-deprecation-help]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Adeprecation-help
[search-atom-repo-label-electron]: https://github.com/search?q=is%3Aissue+repo%3Aatom%2Fatom+is%3Aopen+label%3Aelectron
[search-atom-org-label-electron]: https://github.com/search?q=is%3Aopen+is%3Aissue+user%3Aatom+label%3Aelectron
[search-atom-repo-label-work-in-progress]: https://github.com/search?q=is%3Aopen+is%3Apr+repo%3Aatom%2Fatom+label%3Awork-in-progress
[search-atom-org-label-work-in-progress]: https://github.com/search?q=is%3Aopen+is%3Apr+user%3Aatom+label%3Awork-in-progress
[search-atom-repo-label-needs-review]: https://github.com/search?q=is%3Aopen+is%3Apr+repo%3Aatom%2Fatom+label%3Aneeds-review
[search-atom-org-label-needs-review]: https://github.com/search?q=is%3Aopen+is%3Apr+user%3Aatom+label%3Aneeds-review
[search-atom-repo-label-under-review]: https://github.com/search?q=is%3Aopen+is%3Apr+repo%3Aatom%2Fatom+label%3Aunder-review
[search-atom-org-label-under-review]: https://github.com/search?q=is%3Aopen+is%3Apr+user%3Aatom+label%3Aunder-review
[search-atom-repo-label-requires-changes]: https://github.com/search?q=is%3Aopen+is%3Apr+repo%3Aatom%2Fatom+label%3Arequires-changes
[search-atom-org-label-requires-changes]: https://github.com/search?q=is%3Aopen+is%3Apr+user%3Aatom+label%3Arequires-changes
[search-atom-repo-label-needs-testing]: https://github.com/search?q=is%3Aopen+is%3Apr+repo%3Aatom%2Fatom+label%3Aneeds-testing
[search-atom-org-label-needs-testing]: https://github.com/search?q=is%3Aopen+is%3Apr+user%3Aatom+label%3Aneeds-testing

[beginner]:https://github.com/search?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3Abeginner+label%3Ahelp-wanted+user%3Aatom+sort%3Acomments-desc
[help-wanted]:https://github.com/search?q=is%3Aopen+is%3Aissue+label%3Ahelp-wanted+user%3Aatom+sort%3Acomments-desc+-label%3Abeginner
[contributing-to-official-atom-packages]:https://flight-manual.atom.io/hacking-atom/sections/contributing-to-official-atom-packages/
[hacking-on-atom-core]: https://flight-manual.atom.io/hacking-atom/sections/hacking-on-atom-core/

================
File: decisions/000-adr-template.md
================
---
# These are optional elements. Feel free to remove any of them.
status: {proposed | rejected | accepted | deprecated | … | superseded by ADR-0005 <0005-example.md>}
date: {YYYY-MM-DD when the decision was last updated}
deciders: {list everyone involved in the decision}
consulted: {list everyone whose opinions are sought (typically subject-matter experts); and with whom there is a two-way communication}
informed: {list everyone who is kept up-to-date on progress; and with whom there is a one-way communication}
---
# {short title of solved problem and solution}

## Context and Problem Statement

{Describe the context and problem statement, e.g., in free form using two to three sentences or in the form of an illustrative story.
 You may want to articulate the problem in form of a question and add links to collaboration boards or issue management systems.}

<!-- This is an optional element. Feel free to remove. -->
## Decision Drivers

* {decision driver 1, e.g., a force, facing concern, …}
* {decision driver 2, e.g., a force, facing concern, …}
* … <!-- numbers of drivers can vary -->

## Considered Options

* {title of option 1}
* {title of option 2}
* {title of option 3}
* … <!-- numbers of options can vary -->

## Decision Outcome

Chosen option: "{title of option 1}", because
{justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force {force} | … | comes out best (see below)}.

<!-- This is an optional element. Feel free to remove. -->
### Consequences

* Good, because {positive consequence, e.g., improvement of one or more desired qualities, …}
* Bad, because {negative consequence, e.g., compromising one or more desired qualities, …}
* … <!-- numbers of consequences can vary -->

<!-- This is an optional element. Feel free to remove. -->
## Validation

{describe how the implementation of/compliance with the ADR is validated. E.g., by a review or an ArchUnit test}

<!-- This is an optional element. Feel free to remove. -->
## Pros and Cons of the Options

### {title of option 1}

<!-- This is an optional element. Feel free to remove. -->
{example | description | pointer to more information | …}

* Good, because {argument a}
* Good, because {argument b}
<!-- use "neutral" if the given argument weights neither for good nor bad -->
* Neutral, because {argument c}
* Bad, because {argument d}
* … <!-- numbers of pros and cons can vary -->

### {title of other option}

{example | description | pointer to more information | …}

* Good, because {argument a}
* Good, because {argument b}
* Neutral, because {argument c}
* Bad, because {argument d}
* …

<!-- This is an optional element. Feel free to remove. -->
## More Information

{You might want to provide additional evidence/confidence for the decision outcome here and/or
 document the team agreement on the decision and/or
 define when and how this decision should be realized and if/when it should be re-visited and/or
 how the decision is validated.
 Links to other decisions and resources might appear here as well.}

================
File: decisions/001-change-of-build-method.md
================
---
status: accepted
date: 2022-08-01
---
# Removal of the old build scripts, V8 Snapshots, and migration to `yarn`

## Build scripts on Atom

It was _really difficult_ to understand the old build scripts. They basically
transpiled the old code and copied some dependencies on a directory called
`app`; then, some dependencies were installed, some other steps were run, like
creating some manifests and metadata; finally, this transpiled code was passed
through another script that basically generated a `mksnapshot` script command,
and everything was _manually packaged_ into an ASAR file.

The problems: the script was too big, it depended on `npm` < 7.0, it used to
fail constantly (needing multiple "clean" commands), it took too much time, and
basically the "snapshots" depended on the source file _structure_ on the disk -
if we decided to rename some file, or move some `require`s around, the script
would break; also, some of the dependencies of that script were also made
in-house, making for new work to keep in Pulsar

## Decision Drivers

* Easier to install dependencies
* Easier to build binaries, in a way that can work in the first run instead
of multiple retries
* Make it easier to build and start hacking the editor
* Faster to build and hack, specially after bumping dependencies

## Considered Options

* Rewrite the scripts
* Remove the scripts completely and migrate to electron-build

## Decision Outcome

Chosen option: "Remove the scripts". It makes things easier because we don't
need to keep any in-house packaging of Electron, ASAR creation, and
RPM/DEB/AppImage generation for Linux, or binaries for Mac / Windows.

### Consequences

* Faster editor bootstrap, and easier to bump dependencies, specially Electron
* The editor is _way slower_ to load
* We had some bugs because we are not using V8 Snapshots anymore - basically,
with V8 Snapshots, the global object `atom` was present where it wasn't supposed
to

================
File: decisions/002-remove-old-watcher-libraries.md
================
---
status: accepted
---
# Removal of experimental watchers on Pulsar

## Removal of @atom/watcher and others

Atom had four different ways of watching for filesystem changes. Two used an
in-house library called `@atom/watcher` - one for "polling" and other for
"experimental". It also had a different library to watch files for changes that
basically used the Tree-View package's watch mechanism

## Decision Drivers

* We don't know what "experimental watcher" means, and we have no way of knowing
* We don't want to support another "in-house" library to watch files, specially
considering that it's a binary library
* We know that tree-view _can use_ Pulsar's watcher mechanism to watch files,
meaning we enter somekind of weird loop

## Considered Options

* Use `nsfw` only
* Use `chokidar` only

## Decision Outcome

Use only `nsfw` library to watch for changes, and use the community version of
that library. Make the config for "watch" in Pulsar reflect that we only have
`nsfw` as an option (Native operating system APIs).

## Validation

Files are still being watched. Config failed to watch, but that's because of a
different issue - see ADR 001

## More Information

We still have another "watch" library called Pathwatcher. It is used by
TextBuffer, atom-keymap and tree-view. It may be possible to remove this library
to use only Pulsar's watch mechanism (it is available under the public API) so
every code will basically use the public API and they will all respect the
choice of what Pulsar defined, if we decide to introduce new file watcher
libraries in the future

================
File: decisions/003-use-global-pulsar-on-pathwatcher.md
================
---
status: rejected
---
# Make a compatibility layer on Pulsar's "pathwatcher"

## Remove the binary dependency on "pathwatcher" and a compatibility layer to use Pulsar's public API

The idea was to keep 100% API compatibility with Pathwatcher using Pulsar's public API (using `require('atom').watchPath` code). The experiment lives on [Pulsar
Pathwatcher](https://github.com/pulsar-edit/pulsar-pathwatcher) repository

## Decision Drivers

* Avoid another watch library
* Avoid another binary dependency

## Decision Outcome

Because of the cyclic dependency between TextBuffer and Pulsar, together with
the "exports" library and other issues, this experiment didn't go far. Some
infinite loops happened, sometimes the renderer process crashed, and sometimes
other weird issues appeared depending on the order things got loaded, so
this will probably be revisited in the future, if at all.

================
File: decisions/004-change-oniguruma-implementation.md
================
---
status: accepted
date: 2023-03-28
deciders: '@mauricioszabo, @confused-Techie, @savetheclocktower'
---
# Use a different Oniguruma implementation for TextMate grammars

## Current version of Oniguruma is in-house and crashes with Electron >= 21

To tokenize TextMate grammars, Pulsar uses a NPM binary library called
Oniguruma. Unfortunately, while we could make the native library work on
Electron versions 14 up to 20, when upgrading to Electron 21 it breaks because
of the new V8 Memory Model (sandboxed pointers).

## Considered Options

* Migrate to a pure-JS version of Oniguruma
* Migrate to [WASM Oniguruma](https://github.com/rebornix/wasm-oniguruma)
* Migrate to [VSCode Oniguruma](https://github.com/microsoft/vscode-oniguruma/)
* Migrate **all tokenization** to [VSCode Textmate](https://github.com/microsoft/vscode-textmate)

## Decision Outcome

Chosen option: "Migrate fo VSCode Oniguruma", because the pure JS version we found was not up-to-date with Oniguruma and could not parse most of the Regexp that our grammars need; second, WASM Oniguruma didn't see any update in the last 6 years, so we end up with vscode-oniguruma.

We basically duplicated the
[first-mate](https://github.com/pulsar-edit/first-mate/) repository and created
[second-mate](https://github.com/pulsar-edit/second-mate/), that uses the new
VSCode oniguruma version

## Pros and Cons of the Options

### Bump to Electron 23

It was confirmed that new vscode-oniguruma works with Electron 23.

### Faster

This is maybe counter-intuitive, but for some reason, the tokenizer got faster
when we migrated to vscode-oniguruma (by about 50% in some cases). We had also
lower deviation - the slowest case and the fastest one are now closer in time

### macOS problems

This broke Silicon macOS builds because if we use WASM, we need to add [Allow
JIT entitlement to the plist
file](https://github.com/pulsar-edit/pulsar/pull/454). We solved this, but with
this entitlement, Intel macOS builds also got slower ([Electron issue](https://github.com/electron/electron/issues/26143))

### Memory leaks

We found out that in some situations, we could have memory leaks - basically,
WASM doesn't have garbage collection like Node, so every time we created new
`OnigScanner` objects (discarding the old ones) that caused a new memory
allocation without any deallocation of the old memory.

To mitigate this, we basically implemented a cache of `OnigScanner`s - when
someone instantiates this class, it'll first see if a previous version was
instantiated, and if so, it'll reuse the same object. This doesn't _actually
solve_ the memory leak, but makes it controllable - TextMate grammars do not use
too many regular expressions, so everytime one opens Pulsar, even if the user
have multiple TextMate grammars only it'll only leak a couple kilobytes of
memory, so it's considered a non-issue for now.

## Usage of VSCode TextMate

VSCode TextMate is a library that basically highlights all code in VSCode. One
idea was to migrate away completely from `first-mate` and use this library as
the tokenizer. Unfortunately, `first-mate` is actually _more correct_ than
VSCode's implementation - for example, Pulsar is able to higlight XML namespaces
on attributes, like for example `<e foo:bar="attr">` (the `foo` gets
highlighted)

## Second-Mate, and VSCode-Oniguruma patches

VSCode-Oniguruma works a little bit differently than Atom's version. On VSCode's
version, when it doesn't find a match (length=0 on the result) VSCode's version
return a meaningless value on `start` and `end`, whereas Atom's return the
latest `end` from the previous match. We had to normalize this on Second-Mate.

Also, Atom's version of Oniguruma had an object called `OnigRegExp` that the new
library doesn't have. The only usage of that object was a method called `test` -
fortunatelly, this translates 100% do using `OnigScanner#findNextMatchSync`, so
we moved all usages to this new API - meaning, `second-mate` is 90% compatible
with `first-mate`, with the exception of the `firstLineRegex` and
`contentsRegex`, that now return an object of `OnigScanner` instead of
`OnigRegExp`.

================
File: decisions/005-remove-auto-update-functionality.md
================
---
status: accepted
date: 2023-08-10
deciders: '@confused-Techie, @Daeraxa, @savetheclocktower, @mauricioszabo'
---
# Remove original AutoUpdate Functionality

## Context and Problem Statement

To provide users with some form of autoupdate functionality, many thought we could
adopt the original method used by the Atom team, and de-facto method within Electron
applications, Squirrel. While Squirrel is great for AutoUpdating, it has some big
issues, mainly it requires that every platform has signed binaries, which can be
prohibitively expensive. Additionally, it only supports Windows and macOS.

## Decision Drivers

* Users need a way to fulfill AutoUpdate functionality

## Considered Options

* Sign Windows and macOS (Already do) binaries, and setup Squirrel.
* Remove AutoUpdate totally.
* Use core package to assist in update installation.

## Decision Outcome

Chosen option: "Use core package to assist in update installation", to allow similar
behavior, we opted to create a core package that could help alert users of updates
to Pulsar being available, while technically not actually preforming any installation.
This new core package was added to Pulsar in [`pulsar-edit/pulsar#656`](https://github.com/pulsar-edit/pulsar/pull/656).
This package alerts and assists in users installing new updates to Pulsar, while no
longer relying on any form of AutoUpdate functionality from Squirrel.

This means, that we can now remove all Squirrel and AutoUpdate functionality that's
built right into Pulsar, hopefully cutting down on startup time.

<!-- This is an optional element. Feel free to remove. -->
### Consequences

* Good, because this allows a semblence of AutoUpdate functionality without ever having to hit our own backend.
* Good, because it allows users to be more in control, and automatically notified of new versions.
* Good, because it sections off the logic to a package that can be disabled or replaced as needed.
* Bad, because it does not actually preform any autoupdates.

## Pros and Cons of the Options

### Sign Windows and macOS binaries, and setup Squirrel

This would return things to the status quo, of Atom AutoUpdate functionality.

* Good, because users would know what to expect.
* Good, because it would provide AutoUpdates to Windows and macOS users.
* Bad, because it would be prohibitively expensive, and would fail to work if we ever
didn't have the funds for expensive binary signing costs.
* Bad, because this would leave Linux users with still zero support for AutoUpdates.
* Bad, because it would add additional complexity into our CI for signing Windows binaries.

### Remove AutoUpdates totally

This is essentially, what we have been doing since we took over Atom. Provided zero methodology
for users to preform autoupdates within Pulsar.

* Good, because it requires zero effort on our end.
* Good, because there are no signing costs.
* Bad, because it provides users no method to easily update.
* Bad, because users would be misinformed about Atom's ability to autoupdate being lost.
* Bad, because autoupdates of some kind is an expected and standard feature in any modern application.

## More Information

This decision is not one taken lightly, and could still stir some controversy on best implementations.

There was also additional concerns about not deleting the code used for Squirrel's AutoUpdate functionality
in case we ever did want to return to that behavior, since it already works perfectly, if properly setup.

For that reason, instead of keeping the code within the repo, below will be details about where the code that comprises
of the Squirrel AutoUpdate logic will be kept within Git, so that it can always be retrieved if ever needed.

* Last Commit Before Removal: `bf60fbe6fc267b737a70d5d39c03cad1629ea128`
* PR Where it was Removed: [`pulsar-edit/pulsar#668`](https://github.com/pulsar-edit/pulsar/pull/668)

================
File: dev/README.md
================
# Development README

On this directory, we can include things that we found out how they work, and how do we want to handle that in the future

- [Tree Sitter](tree-sitter.md), the tokenizer for the Pulsar Text Editor

================
File: dev/testing.md
================
# Testing in Pulsar 

Testing is an important aspect of any large code-base. Pulsar has a suite of exhaustive tests built into the core of the editor located in `./spec`.

There is also the ability to tests packages built right into the editor, which will find all test suites within the `./packages` folders.

## Core Testing 

To run the editor test suite run `yarn start --test spec`.

Running this command uses `yarn` to run the `start` script within `package.json`. The start script starts up Pulsar using `electron` and passes the additional arguments to Pulsar.

At this point as the editor starts up it continuously checks its CLI arguments.

The testing framework to use to run the tests is determined in `./src/atom-application.js` by the `resolveTestRunnerPath` script, which will use the test specified by the package itself, or otherwise will default to the legacy test runner, of which is `./spec/jasmine-test-runner.js`.

Other test runners can be specified within a packages `package.json` like so:

```json 
  "atomTestRunner": "./test/runner"
```

This will then use whatever test runner is located in that file location, which commonly is used as `atom-mocha-test-runner`, which uses the alternate test runner located in `spec/main-process/mocha-test-runner.js`.

Otherwise once the test runner is determined later on in the application the tests are started via `./src/initialize-test-window.js` that starts the testing process itself.

## Package Testing 

*More Information Needed*

================
File: dev/tree-sitter.md
================
# Tree Sitter in Pulsar

Tree-sitter is a tokenizer that uses native modules. The idea is that a language generates an AST of the source code and then Pulsar will tokenize these on the editor with some rules on CSON files (that kind of resemble CSS selectors)

## Debugging a Grammar

Inside Pulsar's source code is possible to require Tree-Sitter and try to parse some grammar. To do this, run this code on Devtools:

```js
const Parser = require('tree-sitter');
const Java = require('tree-sitter-java');

const parser = new Parser();
parser.setLanguage(Java);

tree = parser.parse(`
class A {
  void func() {
    obj.func2("arg");
  }
}
`);
console.log(tree.rootNode.toString());
```

This will create a parser, set its language to Java, and try to parse the source code that we sent. This specific fragment of code will print:

```
(program
  (class_declaration
    name: (identifier)
    body: (class_body
      (method_declaration
        type: (void_type)
        name: (identifier)
        parameters: (formal_parameters)
        body: (block
          (expression_statement
            (method_invocation
              object: (identifier)
              name: (identifier)
              arguments: (argument_list
                (string_literal)))))))))
```

I did the pretty-print manually. Basically, it says that the "root node" is a `program` that contains a `class_declaration`. Following that, comes the class's name, then its body, etc etc.

## Modern tree-sitter

If you look at the AST above, you'll see that there are things inside parenthesis and things like `name: ` and `body: `. This second one is what Tree-Sitter now calls "field name", and Pulsar is not yet using this anywhere. This is problematic for multiple reasons, but the main one is that tokenization gets wrong: for example, in the code above, we want to tokenize `obj.func2("arg")` by marking `func2` as a function that's being called, but the AST for that fragment is:

```
(method_invocation
  object: (identifier)
  name: (identifier)
  arguments: (argument_list (string_literal)))
```

What disambiguates the method name from other things is the field name: `obj` have field name `object`, and `func2` have field name `name`. As Pulsar is not parsing this, the closest match we can get is:

```cson
  'method_invocation > identifier': 'entity.name.function'
```

But unfortunately, this does not solve the issue - both `obj` and `func2` are tokenized as functions in this case.

### Fixing this

`src/tree-sitter-language-mode.js` is where the syntax tree is walked to generate tokens. It basically have methods like `seek`, `_moveDown`, etc that `.push` some token into `containingNodeTypes` and other local fields. Later, these are tokenized via `_currentScopeId` that basically tries to match the rule we're in inside `this.languageLayer.grammar.scopeMap` data structure.

This data structure is defined in `src/syntax-scope-map.js`, and contains `anonymousScopeTable` (that is, AFAIK, a list of words that are tokenized always the same - think like "keywords" on the language) and a `namedScopeTable` (which, surprisingly, does not treat the "field name" even though it has `name` on it). This structure is basically a "leaf first" structure. So, tokenizing `obj.func("a string")`, we would get:

1. `method_invocation`, that gets `push`ed into `containingNodeTypes` then we "move down"
1. `identifier` (for `obj`), that also gets `push`ed into `identifier`
1. We check the tokenID then "move right"
1. `identifier` (for `func`), replaces the sibling's `identifier` that was pushed before, and we check tokenID, and "move right" again
1. Repeate the process from the beginning, but for `argument_list` instead of `method_invocation` (replace the sibling's `identifier` with `argument_list`, then move down to push `string_literal`)
1. Finally "move up", `pop`ing the `string_literal`, then `argument_list`, and finally `method_invocation`, and continue walking the rest of the AST

To get the Token ID, we walk though the data structure, checking things as we go. So for example, in this case, after `push`ing things for `obj`, we have inside `containingNodeTypes`: `['method_invocation', 'identifier']`. We have this same structure for `func`.

If we look at the `scopeMap` structure, inside `namedScopeTable`, we'll see something like:

```js
identifier: {
  parents: {
    method_invocation: {
      result: ["entity.name.function", ...]
    }
  }
}
```

And this is how the tokenizer is done. Is also how the bug appears: both `func` and `obj` have the same `containingNodeTypes`.


### Possible solution

To make `src/syntax-scope-map.js` aware of "named fields" (we can do that by checking the `cursor.currentFieldName` or by `push`ing the `this.treeCursor.currentFieldName`), then match things correctly.

We will also need to decide on a syntax on the CSON file to this format, and also parse this format inside the `namedScopeTable`.

Finally, we'll need to change the `get` method of the `SyntaxScopeMap` to match things correctly and get tokenization for things filtered by the field name.

================
File: native-profiling.md
================
# Profiling the Atom Render Process on macOS with Instruments

![Instruments](https://cloud.githubusercontent.com/assets/1789/14193295/d503db7a-f760-11e5-88bf-fe417c0cd913.png)

* Determine the version of Electron for your version of Atom.
  * Open the dev tools with `alt-cmd-i`
  * Evaluate `process.versions.electron` in the console.
* Based on this version, download the appropriate Electron symbols from the [releases](https://github.com/atom/electron/releases) page.
  * The file name should look like `electron-v1.X.Y-darwin-x64-dsym.zip`.
  * Decompress these symbols in your `~/Downloads` directory.
* Now create a time profile in Instruments.
  * Open `Instruments.app`.
  * Select `Time Profiler`
  * In Atom, determine the pid to attach to by evaluating `process.pid` in the dev tools console.
  * Attach to this pid via the menu at the upper left corner of the Instruments profiler.
  * Click record, do your thing.
  * Click stop.
  * The symbols should have been automatically located by Instruments (via Spotlight or something?), giving you a readable profile.

================
File: rfcs/000-template.md
================
# Feature title

## Status

Proposed

## Summary

One paragraph explanation of the feature.

## Motivation

Why are we doing this? What use cases does it support? What is the expected outcome?

## Explanation

Explain the proposal as if it was already implemented and you were describing it to an Atom user. That generally means:

- Introducing new named concepts.
- Explaining the feature largely in terms of examples.
- Explaining any changes to existing workflows.

## Drawbacks

Why should we *not* do this?

## Rationale and alternatives

- Why is this approach the best in the space of possible approaches?
- What other approaches have been considered and what is the rationale for not choosing them?
- What is the impact of not doing this?

## Unresolved questions

- What unresolved questions do you expect to resolve through the RFC process before this gets merged?
- What unresolved questions do you expect to resolve through the implementation of this feature before it is released in a new version of Atom?
- What related issues do you consider out of scope for this RFC that could be addressed in the future independently of the solution that comes out of this RFC?

================
File: rfcs/001-updatable-bundled-packages.md
================
# Updatable Bundled Packages

## Status

Proposed

## Summary

This feature will enable an opt-in subset of bundled Atom packages to be updated with `apm` outside of the Atom release cycle.  This will enable users to receive new functionality and bug fixes for some bundled packages as regularly as needed without waiting for them to be included in a new Atom release.  This is especially important for packages like [GitHub](https://github.com/atom/github/) and  [Teletype](https://github.com/atom/teletype/) which provide essential Atom functionality and could be improved independently of Atom.

## Motivation

Atom currently uses a monthly release cycle with staged Stable and Beta releases so that major issues get caught early in Beta before reaching the Stable release.  Because Atom releases updates monthly, this means that a new feature merged into `master` right after a new Atom release could take one month to reach the next Beta and then another month to reach Stable.

Since a large part of Atom's built-in functionality is provided by bundled packages, it makes sense to allow some of those packages to be updated independently of Atom's monthly release cycle so that users can receive new features and fixes whenever they become available.

Bundled packages are treated differently than community packages that you can install using `apm`:

- You are not prompted to update them when new versions are released on `apm`
- `apm` will warn you at the command line when you try to install or update a bundled package
- If a user intentionally installs a bundled package from `apm` the [dalek package](https://github.com/atom/dalek/) will show a warning in the "deprecations" view asking the user to remove the offending package

Despite all this, if the user *does* manually install an update to a bundled package using `apm`, it will be loaded into the editor and updated dutifully as new releases occur.  The only new functionality needed is to enable `apm` to check bundled packages for updates when those packages haven't yet been installed in the user's `~/.atom/packages` folder.

The primary use case for this improvement is enabling the GitHub package to ship improvements more frequently than Atom's release cycle since many of its improvements can be done without changes to Atom itself.  If this approach is proven to work well for the GitHub package, we might also consider using it to ship Teletype as a bundled Atom package.

## Explanation

Any bundled Atom package can opt in to new updates released via `apm` by adding `"coreUpdatable": true` to its `package.json` file.  This causes `apm` to consider it as part of the list of packages it checks for updates.  If a community (non-bundled) package sets this field to `true` or `false` it will be ignored as it's only relevant to bundled packages.

Atom shows update notifications for Updatable bundled packages whenever they are available so long as those updates support the engine version of the current Atom build.  Bundled package updates can also be found and installed in the Settings view's *Updates* tab.

The `dalek` package is aware of the new "Updatable" metadata and excludes updated bundled packages from its deprecation warnings.

### User Experience Examples

1. The user downloads and installs Atom 1.28.0 which includes GitHub package version 0.15.0.  Two weeks later, GitHub package 0.16.0 is released with a few new features.  The user is prompted to update to the new version and gets the new features even though Atom 1.29.0 hasn't been released yet.

2. The user downloads and installs Atom 1.28.0, including GitHub package 0.15.0, which was released two weeks prior.  Since that release the GitHub package has been updated to version 0.15.1 on `apm`.  When the user starts Atom for the first time they are prompted to update the GitHub package.

3. In the future, a user has an old install of Atom 1.28.0 and waits a long time between installing Atom updates.  The GitHub package releases version 0.25.0 but the user is not prompted to install it because the GitHub package has set `engines` in `package.json` to restrict to Atom 1.32.0 and above.

### Rules for Updatable Bundled Packages

Any package that opts into this behavior must adhere to these rules:

1. **Each release must ensure that its `engines` field in `package.json` reflects the necessary Atom version for the Atom, Electron, and Node.js APIs used in the package**.  This field defines the range of Atom versions in which the package is expected to work.  The field should always be set to the lowest possible Atom version that the package supports.

2. **Any new update to a bundled package *must* support current Stable *and* Beta releases**.  This enables the user to upgrade the package and continue to use it in side-by-side Stable and Beta installs on their machine.  If a package wants to use API features of a newer version of Atom while still supporting older Atom versions, it must do so in a way that is aware of the user's version and adjust itself accordingly.

3. **Atom's `package.json` *must* stay up to date with the latest supported version of the package** in the `master` and Beta release branches.  This ensures that the user always gets the latest version of the package in a new release and also benefits from its inclusion in Atom's snapshot.

For rule #3, it will be important to have automation to ensure that current Beta release and `master` are kept up to date with the latest compatible version of any updatable bundled package as it will be difficult for maintainers to do that manually.  This could be accomplished by a nightly CI run which is focused explicitly on bumping package dependencies in this manner.

## Drawbacks

### Possible API incompatibility

The primary drawback of this approach is that Updatable bundled packages might exhibit problems on older Atom versions due to missing or changed APIs in Atom, Electron, or Node.js.  The solution for these packages is to keep their `engines` field updated appropriately, but there's still a chance that some updates will slip through without the necessary engine version changes.  If this does occur and users are affected by it, the solution is to publish a new update which rolls back the package to the functionality of its previous release and then publish another new update with the new functionality restored and the proper `engines` version in place.

### Increased Atom startup time

Another major drawback is that the snapshotted code for the bundled package will no longer be used since a newer version has been installed.  This updated version of the package cannot be easily added back into Atom's snapshot so it could cause a noticeable drag on Atom's startup time.  Some quick measurements with Timecop show a 10x increase in GitHub package load time for bundled (snapshot) vs updated (non-snapshot) package code:

| GitHub Package Code              | Load Time |
|----------------------------------|-----------|
| **Bundled**                      | 52 ms     |
| **Updated (first load)**         | 5026 ms   |
| **Updated (subsequent loads)**   | 591 ms    |

There was no measurable effect on shell or window startup time, only package load time.  It seems that the transpilation phase of the first load of the package incurs a 100x increase in load time.  Pre-transpilation of the package code (either when shipped or when installed using `apm`) will be useful in mitigating this cost.  Further investigation into snapshotting package code will be needed to understand if the load time increase can be mitigated.

There is a possibility that the GitHub package could load parts of its codebase on demand to mitigate the increased startup time when not loaded as part of Atom's snapshot.  This approach is discussed in more detail at [atom/github#1522](https://github.com/atom/github/issues/1522).

### Incompatibility across Atom release channels

One other possible drawback is that an updated version of a bundled package might not be compatible across two different Atom channels.  For example, if the user installs a new update to a bundled package that only supports the current Atom Beta release or higher, the user will no longer have access to that package if they open Atom Stable.  However, this drawback is no different than what the user would face today installing a community package under the same circumstances, so this could be considered a general problem in the Atom package ecosystem.

Finally, one risk of this approach is that the Atom team forgets to update a bundled package to its latest appropriate version on `apm` just before a new release.  If this happens, the user will install a new Atom update and then be prompted to update a package that should have been snapshotted and shipped in-box.  To avoid this problem we could add some build automation that checks for the latest version of a bundled package to see if the current Atom build would be supported by it.

## Rationale and alternatives

This is the best approach for updating bundled packages because it allows those packages to take control of their own release cycle so long as they manage their Atom engine version correctly.  It also does so in a way that allows us to decide which packages can be updated independently, reducing the likelihood of problems for users.

The primary alternative to this approach is to speed up the Atom release cycle so that bundled Atom package updates will reach users more frequently.  This approach will be investigated independently of this RFC as it may still be valuable even with Updatable bundled packages.

## Unresolved questions

> - What unresolved questions do you expect to resolve through the RFC process before this gets merged?

Is it enough to just depend on the `engines` field of `package.json` to protect users from installing a package update that doesn't work with their version of Atom?

> - What unresolved questions do you expect to resolve through the implementation of this feature before it is released in a new version of Atom?

Is there any optimization we can use to reduce the performance hit of loading updated bundled packages?

> - What related issues do you consider out of scope for this RFC that could be addressed in the future independently of the solution that comes out of this RFC?

One issue that's out of scope for this RFC is how we ship new features and fixes to the core components of Atom (not its bundled packages) more frequently.  There are two options we can investigate to accomplish this:

- **Ship Atom updates more frequently, possibly every two weeks**

- **Introduce a channel for nightly builds which surface the latest changes every day**

Both of these possibilities will be covered in future RFCs as they could be implemented independently of the feature described in this RFC.

================
File: rfcs/002-atom-nightly-releases.md
================
# Atom Nightly Releases

## Status

Implemented in PR [#17538](https://github.com/atom/atom/pull/17538)

## Summary

This RFC proposes that Atom add a third official release channel which delivers new builds of Atom nightly from the `master` branch.  Nightly releases will allow new improvements to reach users long before a new Stable or Beta release is shipped.  This effort will also give us the opportunity to experiment with new release automation strategies that could eventually be used to speed up the Stable and Beta release cadence.

## Motivation

Atom currently uses a monthly release cycle with staged Stable and Beta releases so that major issues get caught early in Beta before reaching the Stable release.  Because Atom releases updates monthly, this means that a new feature merged into `master` right after a new Atom release could take one month to reach the next Beta and then another month to reach Stable.

This release process works well for delivering stable improvements to users on a regular basis but it results in friction for users who want to try out the latest Atom improvements and provide feedback.  If we deliver a nightly release channel, it will be possible to deliver new features and bug fixes on a regular basis and get valuable feedback to guide our work.

Today, a bleeding-edge user must manually pull Atom's `master` branch and compile their own build.  There is a source of `dev` builds from `master` across our CI services but those aren't made available to users as an official distribution.

## Explanation

A user who wants to use the latest improvements to Atom each day can go to atom.io, download the Atom Nightly release, and install it on their machine.  This release can be installed alongside Atom Stable and Atom Beta.

Each night when there are new commits to Atom's `master` branch, a scheduled CI build creates a new Atom Nightly release with packages for Windows, macOS, and Linux.  These packages are automatically uploaded to a new GitHub release on the `atom/atom-nightly-releases` repository using a monotonically-increasing nightly version based off of the version in `master` (e.g. `v1.29.0-nightly1`).

Every 4 hours, an Atom Nightly release installed on Windows or macOS checks for a new update by consulting Electron's [update.electronjs.org](update-electron) service.  If a new update is available, it is downloaded in the background and the user is notified to restart Atom once it's complete.  This update flow is the same as what users experience in Atom Stable or Beta releases but updates occur more frequently.

Linux users must manually download nightly releases for now as there isn't an easy way to automatically install new updates across the various Linux distributions.  We may consider providing updatable [AppImage](http://appimage.org/) packages in the future; this will be proposed in a separate RFC.

## Drawbacks

There isn't a major downside to this effort since it would run in parallel to the existing Atom release process without affecting it.

## Rationale and alternatives

This is a useful approach because it allows us to achieve a much more rapid feedback loop with highly engaged users to ensure that Atom is improving regularly.  It's the best approach because it allows us to get rapid feedback without sacrificing the stability of the Stable and Beta releases.

Another option is to speed up Atom's release cadence to ship Stable and Beta every two weeks (or more regularly).  This approach could shorten our feedback loop but at the expense of greater instability since new improvements would not have as much time to be polished before release.

The impact of not taking this approach is that we continue to have to wait 1-2 months to get feedback from users about new features or bugs in Stable and Beta releases.

## Unresolved questions

- **What should we call this release channel?**

  Some ideas:

  - Atom Nightly
  - Atom Reactor
  - Atom Dev - Currently the name of dev builds but it might make sense to leave that for "normal" builds from `master`

  According to a [Twitter poll](https://twitter.com/daviwil/status/1006545552987701248) with about 1,600 responses, 50% of the voters chose "Atom Nightly".  The final name will be determined before launch.

- **Will Electron's new autoUpdate service work for all Atom releases?**

  One outcome of this effort is to use the new [update.electronjs.org](update-electron) service for Atom's update checks so that we can deprecate on our own custom update service.  Building the Nightly channel on this service will allow us to evaluate it to see if it meets the needs of the Stable and Beta channels.

[update-electron]: https://github.com/electron/update.electronjs.org

================
File: rfcs/003-consolidate-core-packages.md
================
# Consolidate Core Atom Packages

## Status

Accepted

## Summary

Atom's official distribution is comprised of 92 core packages which provide its built-in functionality.  These packages currently live in their own independent repositories in the Atom organization, all with their own separate issues, PRs, releases, and CI configurations.  This RFC proposes that by consolidating most, if not all, of these core packages back into the `atom/atom` repo, we will see the following benefits:

- Less confusion for new contributors
- Simpler core package contribution experience
- Greatly reduced burden for maintainers

## Motivation

Let's cover each of the bullet points mentioned above:

### Less confusion for contributors

Imagine that a new contributor wants to add a small new feature to the `tree-view` package.  The first place they are likely to look is the `atom/atom` repository.  Scanning through the folders will lead to a dead end as nothing that looks like `tree-view` code can be found.  They might take one of the following steps next:

- By reading README.md, maybe they will decide to click the link to the Atom Flight Manual and _maybe_ find the [Contributing to Official Atom Packages](https://flight-manual.atom.io/hacking-atom/sections/contributing-to-official-atom-packages/) page there
- They could read the CONTRIBUTING.md file which [has a section](https://github.com/atom/atom/blob/master/CONTRIBUTING.md#atom-and-packages) that explains where to find the repos for core packages and how to contribute, but we don't really have a clear pointer to that in our README.md
- If they don't happen to find that page, they might use Google to search for "atom tree view" and find the atom/tree-view repo and _maybe_ read the CONTRIBUTING.md file which sends them to Atom's overall contribution documentation
- They might go to the Atom Forum or Slack community to ask how to contribute to a particular part of Atom and *hopefully* get a helpful response that points them in the right direction

Having all of the core Atom packages represented in a top-level `packages` folder, even if they all don't actually live in the repo, will go a long way to making the core package code more discoverable.

### Simpler core package contribution experience

Separating core Atom features out into individual repositories and delivering them to Atom builds via `apm` is a great idea in theory because it validates the Atom package ecosystem and gives developers many examples of how to develop an Atom package.  It also gives Atom developers real-world experience working with Atom's APIs so that we ensure community package authors have the same hackability that Atom developers enjoy.

On the other hand, having these packages live in separate repositories and released "independently" introduces a great deal of overhead when adding new features.  Here is a comparison of the current package development workflow contrasted to what we could achieve with consolidated packages:

#### Current Package Development Workflow

For example, to add a single feature to the `tree-view` package, one must:

1. Fork and clone the `tree-view` repository to their computer (making sure to pull the commit relevant to the version of Atom they are working with)
1. Run `apm install` and `apm link` inside of the repo folder
1. Make their desired changes to the code
1. Open a PR to the `tree-view` repo and wait for CI to pass and a maintainer to review it
1. Work with maintainers to get the PR approved and merged

After this is finished, an Atom maintainer must take the following steps:

1. Clone the `tree-view` repo
2. Run `apm publish` to publish a new release of the package
3. Edit `package.json` in the Atom repo to reflect the new version of `tree-view`
4. Commit and push the changes to the relevant branch where the change belongs (`master` or `1.nn-releases`)

#### Simplified Package Development

If we were to move `tree-view` (or any other core Atom package) back into `atom/atom`, the development workflow would look more like this:

1. Fork and clone `atom/atom` and switch to a release branch if necessary
1. Build Atom and launch it in dev mode
1. Make desired changes to the code in `packages/tree-view`
1. Open a PR on `atom/atom` and wait for CI to pass and a maintainer to review it
1. Work with maintainers to get the PR approved and merged

At this point, the change is merged into Atom and ready for inclusion in the next release.

### Greatly reduced burden for maintainers

Since packages all have their own repositories, this means that we have to watch 91 different repos for issues and pull requests.  This also means that we have to redirect issues filed on `atom/atom` to the appropriate repository when a user doesn't know where it belongs.  Even more importantly, there's not an easy way to prioritize and track issues across the Atom organization without using GitHub Projects.

Also, as mentioned above, there's the added duty of doing the package "version dance" when we merge any new PRs to a package repository: publish the package update, update `package.json` in Atom.  It's very easy to forget to do this and not have community contributions included in the next Atom release!

The more core packages live in `atom/atom`, the less work Atom maintainers have to do overall.

## Explanation

Many of Atom's core packages now live in the core `atom/atom` repository.  To the Atom user, this change will be imperceptible as these packages still show up in the list of Core Packages in the Settings View.  Users can still optionally disable these packages.

For maintainers and contributors, there will be less juggling of repositories and no more publishing of updates to these packages with `apm`:

Contributors now clone and build `atom/atom` to work on improvements to core packages.  They will no longer have to use `apm link` in dev mode to test changes they make to packages in the repo's `packages` folder.  Core packages that aren't consolidated still have folders under `packages` with README.md files that point to the home repository for that package.

When a contributor sends a PR to `atom/atom` that only affects files in a folder under `packages`, only the specs for the relevant package folders will be executed using Atom's CI scripts.  This means that a full Atom build will not be required when no Atom Core code is changed in a PR.  Package specs are also now run against all 3 OSes on Atom `master` and release builds.

Atom maintainers no longer have to publish new versions to consolidated core packages and then edit `package.json` to bump the package version in a particular Atom release branch (Stable, Beta, or `master`).  When a PR against a consolidated core package in `atom/atom` is merged, no version number change is required and the changes will immediately be a part of the next release from that branch.

## Drawbacks

One possible drawback of this approach is that there might be some initial confusion where core Atom packages live, especially if some are consolidated into `atom/atom` and others still live in their own repositories.  We will manage this confusion by doing the following:

- Include a `README.md` file in the `packages` folder which lists core packages that are not consolidated in the Atom repo.  This will enable users to find the home repositories of those packages.

- Archive the repositories for consolidated core packages, but only after migrating existing issues, merging or closing existing PRs, and updating the README.md to point to the new home of the package code.

Also, contributors will now have to fork, clone, and build `atom/atom` to contribute to core packages where they would previously just need to clone the package repository.  This might put added burden on them such as installing necessary build dependencies on their machine that they wouldn't otherwise need.  It is very likely we could simplify this process for them, though.

One final drawback is that it will now be harder to have single-package maintainers. We currently have 7 core packages where there is a maintainer who isn't a part of the core Atom maintainers team.  These maintainers generally are able to merge community PRs and make commits to those packages with their own judgement.  If we get rid of individual package repositories, do we now make those maintainers full Atom maintainers?

## Rationale and alternatives

The Motivation section explains most of the rationale, so this section will focus on the process of consolidating packages back into `atom/atom`. The set of packages we've chosen to consolidate were evaluated based on a few factors:

- Number of open issues and PRs (exclude any with > 10 open PRs)
- Time since last update (longer duration since last update is prioritized)
- Number of package-only maintainers on the repo (exclude any with package maintainers for now)

Using this criteria, all 91 packages have been evaluated and categorized to determine whether they are good candidates for consolidation:

#### Initial Consolidation Candidates

| Package | Open Issues | Open PRs | Outside Maintainers | Last Updated |
|---------|-------------|----------|---------------------| -------------|
| **[about]** | 2 | 0 | 0 | 7/11/18 |
| **[archive-view]** | 10 | 0 | 0 | 6/3/18 |
| **[atom-dark-syntax]** | 5 | 0 | 0 | 12/6/17 |
| **[atom-dark-ui]** | 1 | 2 | 0 | 2/13/18 |
| **[atom-light-syntax]** | 1 | 0 | 0 | 10/17/16 |
| **[atom-light-ui]** | 1 | 0 | 0 | 2/13/18 |
| **[autoflow]** | 17 | 4 | 0 | 4/17/18 |
| **[autosave]** | 13 | 0 | 0 | 9/16/17 |
| **[background-tips]** | 3 | 2 | 0 | 2/17/18 |
| **[base16-tomorrow-dark-theme]** | 5 | 0 | 0 | 1/10/17 |
| **[base16-tomorrow-light-theme]** | 1 | 0 | 0 | 1/10/17 |
| **[bookmarks]** | 19 | 4 | 0 | 12/10/17 |
| **[bracket-matcher]** | 74 | 8 | 0 | 3/20/18 |
| **[command-palette]** | 18 | 6 | 0 | 2/27/18 |
| **[dalek]** | 2 | 0 | 0 | 2/28/18 |
| **[deprecation-cop]** | 5 | 0 | 0 | 9/7/17 |
| **[dev-live-reload]** | 4 | 0 | 0 | 11/14/17 |
| **[encoding-selector]** | 11 | 2 | 0 | 4/19/18 |
| **[exception-reporting]** | 5 | 0 | 0 | 2/6/18 |
| **[git-diff]** | 38 | 1 | 0 | 1/18/18 |
| **[go-to-line]** | 5 | 2 | 0 | 1/25/18 |
| **[grammar-selector]** | 3 | 1 | 0 | 4/12/18 |
| **[image-view]** | 4 | 4 | 0 | 7/9/18 |
| **[incompatible-packages]** | 1 | 0 | 0 | 4/25/17 |
| **[keybinding-resolver]** | 11 | 3 | 0 | 7/6/18 |
| **[language-clojure]** | 13 | 3 | 0 | 1/26/18 |
| **[language-coffee-script]** | 9 | 2 | 0 | 11/1/17 |
| **[language-csharp]** | 1 | 1 | 0 | 4/27/18 |
| **[language-css]** | 6 | 7 | 0 | 6/11/18 |
| **[language-gfm]** | 52 | 9 | 0 | 6/15/18 |
| **[language-git]** | 4 | 2 | 0 | 4/18/17 |
| **[language-html]** | 11 | 4 | 0 | 7/5/18 |
| **[language-hyperlink]** | 2 | 3 | 0 | 10/25/17 |
| **[language-json]** | 1 | 0 | 0 | 5/11/18 |
| **[language-less]** | 5 | 1 | 0 | 6/11/18 |
| **[language-make]** | 7 | 3 | 0 | 11/26/16 |
| **[language-mustache]** | 0 | 0 | 0 | 2/5/18 |
| **[language-objective-c]** | 2 | 0 | 0 | 12/1/15 |
| **[language-php]** | 25 | 7 | 0 | 6/11/18 |
| **[language-property-list]** | 1 | 0 | 0 | 3/11/17 |
| **[language-python]** | 33 | 4 | 0 | 6/18/18 |
| **[language-ruby]** | 38 | 10 | 0 | 10/25/17 |
| **[language-ruby-on-rails]** | 9 | 6 | 0 | 12/7/17 |
| **[language-sass]** | 12 | 5 | 0 | 5/2/18 |
| **[language-shellscript]** | 12 | 3 | 0 | 6/18/18 |
| **[language-source]** | 0 | 0 | 0 | 1/6/15 |
| **[language-sql]** | 6 | 4 | 0 | 1/26/18 |
| **[language-text]** | 1 | 0 | 0 | 3/9/18 |
| **[language-todo]** | 10 | 6 | 0 | 1/26/18 |
| **[language-toml]** | 1 | 0 | 0 | 1/6/18 |
| **[language-typescript]** | 6 | 0 | 0 | 6/18/18 |
| **[language-xml]** | 2 | 1 | 0 | 6/12/17 |
| **[language-yaml]** | 8 | 2 | 0 | 3/9/18 |
| **[line-ending-selector]** | 10 | 0 | 0 | 5/18/18 |
| **[link]** | 0 | 1 | 0 | 11/14/17 |
| **[metrics]** | 1 | 2 | 0 | 7/5/18 |
| **[notifications]** | 29 | 8 | 0 | 3/22/18 |
| **[one-dark-syntax]** | 4 | 0 | 0 | 5/27/18 |
| **[one-dark-ui]** | 13 | 1 | 0 | 5/1/18 |
| **[one-light-syntax]** | 2 | 1 | 0 | 5/27/18 |
| **[one-light-ui]** | 2 | 0 | 0 | 5/1/18 |
| **[open-on-github]** | 8 | 3 | 0 | 11/21/17 |
| **[package-generator]** | 10 | 2 | 0 | 11/16/17 |
| **[status-bar]** | 25 | 3 | 0 | 11/6/17 |
| **[styleguide]** | 12 | 2 | 0 | 4/12/18 |
| **[tabs]** | 66 | 7 | 0 | 5/13/18 |
| **[timecop]** | 5 | 0 | 0 | 11/4/17 |
| **[update-package-dependencies]** | 0 | 0 | 0 | 12/10/17 |
| **[welcome]** | 0 | 0 | 0 | 11/21/17 |
| **[whitespace]** | 31 | 6 | 0 | 5/30/18 |
| **[wrap-guide]** | 3 | 4 | 0 | 11/27/17 |

#### Packages to be Consolidated Later

The following packages will not be consolidated until the stated reasons can be resolved or we decide on a consolidation strategy for them:

| Package | Open Issues | Open PRs | Outside Maintainers | Last Updated | Reason |
|---------|-------------|----------|---------------------|--------------|-------|
| **[find-and-replace]** | 219 | 17 | 0 | 6/4/18 | Too many open PRs |
| **[fuzzy-finder]** | 89 | 22 | 0 | 5/17/18 | Too many open PRs |
| **[github]** |  |  |  |  | Independent project |
| **[language-c]** | 53 | 15 | 0 | 7/10/18 | Too many open PRs |
| **[language-go]** | 12 | 2 | **1** | 6/18/18 | Package maintainer, possibly inactive? |
| **[language-java]** | 8 | 2 | **1** | 6/11/18 | Package maintainer |
| **[language-javascript]** | 66 | 12 | 0 | 7/6/18 | Too many open PRs |
| **[language-perl]** | 17 | 1 | **1** | 10/30/17 | Package maintainer, possibly inactive? |
| **[markdown-preview]** | 139 | 12 | 0 | 1/8/18 | Too many open PRs |
| **[settings-view]** | 137 | 18 | 0 | 5/17/18 | Too many open PRs |
| **[snippets]** | 57 | 4 | **1** | 4/17/18 | Package maintainer |
| **[solarized-dark-syntax]** | 8 | 3 | **1** | 5/27/18 | Package maintainer |
| **[solarized-light-syntax]** | 2 | 3 | **1** | 5/27/18 | Package maintainer |
| **[spell-check]** | 68 | 14 | **1** | 5/25/18 | Too many open PRs, package maintainer |
| **[symbols-view]** | 86 | 13 | 0 | 12/10/17 | Too many open PRs |
| **[tree-view]** | 210 | 36 | 0 | 3/21/18 | Too many open PRs |

#### Packages to Never Consolidate

These packages will not be consolidated because they would inhibit contributions from our friends in the Nuclide team at Facebook:

- **[autocomplete-atom-api]**
- **[autocomplete-css]**
- **[autocomplete-html]**
- **[autocomplete-plus]**
- **[autocomplete-snippets]**

### Consolidation Process

To consolidate a single core package repository back into `atom/atom`, the following steps will be taken:

1. All open pull requests on the package's repository must either be closed or merged before consolidation can proceed
1. The package repository's code in `master` will be copied over to Atom's `packages` folder in a subfolder bearing that package's name.
1. Atom's `package.json` file will be updated to change the package's `packageDependencies` entry to reference its local path with the following syntax: `"tree-view": "file:./packages/tree-view"`
1. A test build will be created locally to manually verify that the package loads and works correctly at first glance
1. The package specs for the newly-consolidated package will be run against the local Atom build
1. A PR will be sent to `atom/atom` to verify that CI passes with the introduction of the consolidated package
1. Once CI is clean and the PR is approved, the PR will be merged
1. The package's original repository will have all of its existing issues moved over to `atom/atom` using a bulk issue mover tool, assigning a label to those issues relative to the package name, like `packages/tree-view`
1. The package's original repository will have its README.md updated to point contributors to the code's new home in `atom/atom`
1. The package's original repository will now be archived on GitHub

### Alternative Approaches

One alternative approach would be to break this core Atom functionality out of packages and put it directly in the Atom codebase without treating them as packages.  This would simplify the development process even further but with the following drawbacks:

- The Atom team would have less regular exposure to Atom package development
- Users would no longer be able to disable core packages to replace their behavior with other packages (different tree views, etc)

## Unresolved questions

- Is there a good reason to not move the `language-*` packages into `atom/atom`?

  One concern here is that there exist projects which depend directly on these repositories for the TextMate syntax grammars they contain.  Moving the code into `atom/atom` would require that we notify the consumers of the grammars so that they can redirect their requests to the `atom/atom` repo.

- Should we use `git subtree` to migrate the entire commit history of these packages over or just depend on the history from a package's original repository?

  For now, we won't use `git subtree` due to the possibility that bringing over thousands of commits could cause unknown problems in the Atom repo.  We may try this for newly consolidated packages in the future if we decide that not having the package commit history is a sufficient impediment to problem investigations.

- What are the criteria we might use to eventually decide to move larger packages like `tree-view`, `settings-view`, and `find-and-replace` back into `atom/atom`?

- Will we be losing any useful data about these packages if we don't have standalone repositories anymore?

- Should we use this as an opportunity to remove any unnecessary packages from the core Atom distribution?

[about]: https://github.com/atom/about
[archive-view]: https://github.com/atom/archive-view
[atom-dark-syntax]: https://github.com/atom/atom-dark-syntax
[atom-dark-ui]: https://github.com/atom/atom-dark-ui
[atom-light-syntax]: https://github.com/atom/atom-light-syntax
[atom-light-ui]: https://github.com/atom/atom-light-ui
[autocomplete-atom-api]: https://github.com/atom/autocomplete-atom-api
[autocomplete-css]: https://github.com/atom/autocomplete-css
[autocomplete-html]: https://github.com/atom/autocomplete-html
[autocomplete-plus]: https://github.com/atom/autocomplete-plus
[autocomplete-snippets]: https://github.com/atom/autocomplete-snippets
[autoflow]: https://github.com/atom/autoflow
[autosave]: https://github.com/atom/autosave
[background-tips]: https://github.com/atom/background-tips
[base16-tomorrow-dark-theme]: https://github.com/atom/base16-tomorrow-dark-theme
[base16-tomorrow-light-theme]: https://github.com/atom/base16-tomorrow-light-theme
[bookmarks]: https://github.com/atom/bookmarks
[bracket-matcher]: https://github.com/atom/bracket-matcher
[command-palette]: https://github.com/atom/command-palette
[dalek]: https://github.com/atom/dalek
[deprecation-cop]: https://github.com/atom/deprecation-cop
[dev-live-reload]: https://github.com/atom/dev-live-reload
[encoding-selector]: https://github.com/atom/encoding-selector
[exception-reporting]: https://github.com/atom/exception-reporting
[find-and-replace]: https://github.com/atom/find-and-replace
[fuzzy-finder]: https://github.com/atom/fuzzy-finder
[git-diff]: https://github.com/atom/git-diff
[github]: https://github.com/atom/github
[go-to-line]: https://github.com/atom/go-to-line
[grammar-selector]: https://github.com/atom/grammar-selector
[image-view]: https://github.com/atom/image-view
[incompatible-packages]: https://github.com/atom/incompatible-packages
[keybinding-resolver]: https://github.com/atom/keybinding-resolver
[language-c]: https://github.com/atom/language-c
[language-clojure]: https://github.com/atom/language-clojure
[language-coffee-script]: https://github.com/atom/language-coffee-script
[language-csharp]: https://github.com/atom/language-csharp
[language-css]: https://github.com/atom/language-css
[language-gfm]: https://github.com/atom/language-gfm
[language-git]: https://github.com/atom/language-git
[language-go]: https://github.com/atom/language-go
[language-html]: https://github.com/atom/language-html
[language-hyperlink]: https://github.com/atom/language-hyperlink
[language-java]: https://github.com/atom/language-java
[language-javascript]: https://github.com/atom/language-javascript
[language-json]: https://github.com/atom/language-json
[language-less]: https://github.com/atom/language-less
[language-make]: https://github.com/atom/language-make
[language-mustache]: https://github.com/atom/language-mustache
[language-objective-c]: https://github.com/atom/language-objective-c
[language-perl]: https://github.com/atom/language-perl
[language-php]: https://github.com/atom/language-php
[language-property-list]: https://github.com/atom/language-property-list
[language-python]: https://github.com/atom/language-python
[language-ruby]: https://github.com/atom/language-ruby
[language-ruby-on-rails]: https://github.com/atom/language-ruby-on-rails
[language-sass]: https://github.com/atom/language-sass
[language-shellscript]: https://github.com/atom/language-shellscript
[language-source]: https://github.com/atom/language-source
[language-sql]: https://github.com/atom/language-sql
[language-text]: https://github.com/atom/language-text
[language-todo]: https://github.com/atom/language-todo
[language-toml]: https://github.com/atom/language-toml
[language-typescript]: https://github.com/atom/language-typescript
[language-xml]: https://github.com/atom/language-xml
[language-yaml]: https://github.com/atom/language-yaml
[line-ending-selector]: https://github.com/atom/line-ending-selector
[link]: https://github.com/atom/link
[markdown-preview]: https://github.com/atom/markdown-preview
[metrics]: https://github.com/atom/metrics
[notifications]: https://github.com/atom/notifications
[one-dark-syntax]: https://github.com/atom/one-dark-syntax
[one-dark-ui]: https://github.com/atom/one-dark-ui
[one-light-syntax]: https://github.com/atom/one-light-syntax
[one-light-ui]: https://github.com/atom/one-light-ui
[open-on-github]: https://github.com/atom/open-on-github
[package-generator]: https://github.com/atom/package-generator
[settings-view]: https://github.com/atom/settings-view
[snippets]: https://github.com/atom/snippets
[solarized-dark-syntax]: https://github.com/atom/solarized-dark-syntax
[solarized-light-syntax]: https://github.com/atom/solarized-light-syntax
[spell-check]: https://github.com/atom/spell-check
[status-bar]: https://github.com/atom/status-bar
[styleguide]: https://github.com/atom/styleguide
[symbols-view]: https://github.com/atom/symbols-view
[tabs]: https://github.com/atom/tabs
[timecop]: https://github.com/atom/timecop
[tree-view]: https://github.com/atom/tree-view
[update-package-dependencies]: https://github.com/atom/update-package-dependencies
[welcome]: https://github.com/atom/welcome
[whitespace]: https://github.com/atom/whitespace
[wrap-guide]: https://github.com/atom/wrap-guide

================
File: rfcs/004-decoration-ordering.md
================
# Decoration ordering

## Status

Accepted

## Summary

Order block decoration items in the DOM in a deterministic and controllable way.

## Motivation

When multiple block decorations are created at the same screen line, they are inserted into the DOM in an order determined by the sequence of their creation; from oldest to newest when `position` is set to `"before"`, from newest to oldest when `position` is set to `"after"`. While this is deterministic, it is limited: it isn't possible to insert decorations within a sequence of existing ones, and it's difficult to control the order of decorations when creating and destroying and moving markers around an editor.

We hit the need for this in [atom/github#1913](https://github.com/atom/github/pull/1913) when we have a block decoration for multiple consecutive collapsed file patches.

## Explanation

[TextEditor::decorateMarker()](https://atom.io/docs/api/v1.34.0/TextEditor#instance-decorateMarker) accepts an additional `order` parameter in its `decorationParams` argument when `type` is "block". When multiple block or overlay decorations occur at the same screen line, they are ordered within the DOM in increasing "order" value.

Block decorations with the same `order` property are rendered in the order they were created, oldest to newest. Block decorations with no `order` property are rendered after those with one, in the order in which they were created, oldest to newest.

## Drawbacks

This is a breaking change for co-located block decorations created with an "after" position - they'll now appear in the reverse order.

When multiple packages create block decorations at the same screen line, they'll need to coordinate their `order` values to have expected behavior. There may not even be a clear, universal answer about how block decorations from distinct packages _should_ be ordered.

This adds another situational parameter to `TextEditor::decorationMarker()`, which already has complicated arguments.

## Rationale and alternatives

Originally I wanted to address the package coordination problem with a similar approach to [the way context menu items are ordered](https://github.com/atom/atom/pull/16661), by allowing individual decorations to specify constraints: "before this block," "after this block," "next to this block" and so forth. I ultimately chose to write up the simpler proposal because:

* Block decoration collisions among packages seem much less likely than context menu collisions.
* Constraint satisfaction problems are complex. There would be a relatively high chance of introducing bugs and performance regressions.
* The order number approach is similar to the APIs already offered to order status bar tiles and custom gutters.

The alternative to having an explicit API for this is at all is to create and destroy decorations to achieve the desired order. That's possible, but requires a great deal of bookkeeping on the package's side to accomplish, especially as decorations are added and removed and text is edited.

## Unresolved questions

- Should overlay decorations respect an `order` parameter in a similar fashion?
- Should screen column effect decoration ordering at all?

================
File: rfcs/005-grammar-comment-delims.md
================
# Add comment delims to grammar declaration

## Status

Proposed

## Summary

Grammars currently only sort of declare their comment delims. E.g., TextMate JavaScript will say `'commentStart': '// '` (and not even in the same file as the grammar), and Tree-sitter says `comments: start: '// '` (in the same file; better). However, it is impossible to tell that `/* */` delimits JS block comments. This RFC is to request a grammar property to declare all comment delims a language supports.

## Motivation

It can be useful for a package to be able to treat comment characters abstractly.

My specific need is for the resolution of `BLOCK_COMMENT_START` and similar variables for LSP snippets. There is currently no way I know of to resolve this without hardcoding it for each language.

## Explanation

This RFC is to have both line and block delims a property of the grammar. E.g.,
```cson
# javascript.cson
comments:
    line: '//'
    start: '/*'
    end: '*/'
```

The lack of a property would indicate the grammar does not have it (e.g., HTML would omit the `line` property), or that a grammar has not been updated to comply with this spec. If the latter, it may be possible to partially extract this information from the existing implementations (e.g., even now we can tell that JS has `//` for line comment and HTML has `<!-- -->` for block comments).

This is similar to the current Tree-sitter grammars, but they currently mix line and block in the `start` key depending on if the language has line comments (so HTML has `start: '<!--', end: '-->'`, but JS has `start: '//'`).

## Drawbacks

Many community grammars would not get this property added to them. However, this feature can be considered a strict enhancement of the current status, and non compliant grammars can be accounted for. E.g., if a grammar still declares `start: '//'` but doesn't have an `end` property, then it can be reinterpreted as a line delim. Additionally, users would be quick to raise an issue here (:frowning_face:) or on the language repo (:slightly_smiling_face:) if they are trying to use a feature that relies on this and it doesn't work.

## Rationale and alternatives

#### Why is this approach the best in the space of possible approaches?
Tying all language specific data to the language file makes intuitive sense. This is stuff that will not change based on what the user wants (and already is tied directly to Tree-sitter language files).

#### What other approaches have been considered and what is the rationale for not choosing them?
It's possible to use the settings approach like for TextMate grammars. I find this unnecessarily separated though, especially for something like comment delims which shouldn't rely on what the user fancies.

However, I'm not set on requiring the TextMate grammars to have it in the file (doing so would require an update on the First mate side too*). It can still work in the settings file. This would also support the possible language that has multiple delim characters (if it exists), letting the user set their choice.

\* Maybe First mate should just add all properties from the file to the grammar it constructs, instead of a whitelist? It would save headaches around enhancing future grammar features.


#### What is the impact of not doing this?
  Getting the snippet variables working would require hard coding them for each language, which is impossible to do completely.

## Unresolved questions

####  What unresolved questions do you expect to resolve through the RFC process before this gets merged?
#### What unresolved questions do you expect to resolve through the implementation of this feature before it is released in a new version of Atom?
#### What related issues do you consider out of scope for this RFC that could be addressed in the future independently of the solution that comes out of this RFC?
What I would like is then for public TextEditor methods `getCommentDelims` and `getCommentDelimsForPoint`, which returns all the correct delims for the root grammar, or the one at the given point (accounting for embedded grammars ... though could be weird when the embedded grammar is only something like TODO or SQL syntax).

However, this future enhancement is not necessary for the current RFC. This RFC is about getting comment delim information tied to the Grammar object and is independant of any attempt to handle this information.

================
File: rfcs/005-pretranspile.md
================
# Pre-transpiled Atom packages

## Status

Proposed

## Summary

This feature will enable package authors to use conventional npm tooling and package.json conventions to take advantage of JavaScript transpilers like Babel or TypeScript.

## Motivation

Transpiling packages on _publish_ rather than _load_ will have great benefits for package authors:

* Standard `npm` tooling like `prepare` scripts will work for apm packages exactly as they work for npm packages. This will remove the need for custom transpiler pipeline modules like [atom-babel6-transpiler](https://github.com/atom/atom-babel6-transpiler) or [atom-typescript-transpiler](https://github.com/smhxx/atom-ts-transpiler) with their own, independent documentation, configuration and setup.
* Packages can move transpiler-related dependencies to `devDependencies` and trim installation bloat substantially. (as a data point, the TypeScript compiler is 30MB.)
* First-time package load will no longer take a hit from transpiling all of the source into the cache.

## Explanation

### Package publishing

During the `apm publish` call, apm will invoke [`npm pack`](https://docs.npmjs.com/cli/pack) to run all standard npm lifecycle hooks and prepare a `.tar.gz` file. apm then uploads the `.tar.gz` file to atom.io, which uploads it to an S3 bucket.

The `npm version` call will still be skipped if the `--tag` is provided, so manual publishing with `apm publish --tag` will still work as it does today.

### Package installation

When a user installs a package from atom.io, atom.io first checks to see if it has a precompiled tarball in its S3 bucket. If one is found, the artifact's public URL is returned as the `dist` field in the [API response](https://flight-manual.atom.io/atom-server-side-apis/sections/atom-package-server-api/#get-apipackagespackage_nameversionsversion_name). Otherwise, the existing logic is used to return the GitHub tag tarball URL that's returned now.

## Drawbacks

Doing this makes installing a package in production more different than loading it during development. This increases the number of variables that can cause issues between local development and the production of an `apm publish` artifact, like tweaking your `.npmignore` file properly.

## Rationale and alternatives

_Alternative: publish packages to Actual Npm.org._ We could identify Atom packages in the npm registry by the `engine` field we already use, which should keep regular npm from installing it by mistake. The downsides here are:

* It becomes harder to search for _just_ Atom packages; we'd have to hack npm search a bit.
* "Starring" would likely break.
* The transition path for existing users of apm and atom.io is not as smooth.
* Easier to typo `apm` and `npm` commands and have an undesirable outcome.

## Unresolved questions

Do we want to deprecate transpilation-on-demand for local development, as well? It may add a bit of friction for package development, but transpilers like TypeScript tend to offer a `--watch` option to transpile live, and it would let us eliminate a lot of complexity in the way Atom loads JavaScript.

================
File: rfcs/005-scope-naming.md
================
# Semantic scope naming

## Status

Proposed

## Summary

When deciding which scopes to apply, built-in grammars should be guided only by what would be useful to annotate. A suggested scope addition should be assessed by the semantic value it adds. It not be rejected if its _only_ drawback is that it would result in undesirable syntax highlighting for one of Atom’s built-in syntax themes.

## Motivation

Tree-sitter grammars are a unique opportunity to deliver more accurate scoping. They can identify constructs that would’ve been too ambiguous for a TM-style grammar.

Scopes themselves are immensely powerful; they’re hooks that allow weirdos like myself to customize Atom to my exact specifications. Not only for syntax themes, either; I’ve got lots of commands that behave in different ways based on the surrounding scope. The richer the scope descriptor, the better. (Within reasonable bounds, of course.)

## Explanation

I think this is best illustrated by example. [Here’s a ticket](https://github.com/atom/language-javascript/issues/615) from `language-javascript` about syntax highlighting of imports. For example:

```js
import { foo } from "thing";
```

For reference, the `language-babel` grammar scopes `foo` as `variable.other.readwrite.js`. I’d probably opt for something like `variable.import`; others may want to put it into the `support` namespace. There’s actually little cross-language consensus here.

But right now, that `foo` doesn’t have _any_ scope name applied in the tree-sitter JavaScript grammar, and this is by design. The explanation, as stated in the ticket, is that Atom wants to avoid marking a variable with a certain color if it doesn’t have the capability of making it the same color _throughout_ the document, across its various usages.

This is a fine design goal; I don’t think @maxbrunsfeld is wrong to argue for it. But I’d suggest that it isn’t a design goal for `language-javascript` or any other grammar; it’s a design goal for a _syntax theme_, and a grammar should not refrain from applying scopes in order to satisfy the design goals of a specific syntax theme.

This isn’t just a beard-stroking nitpick on my part. I can think of a handful of reasons why someone might want to be able to spot import names at a glance. It’s reasonable for someone to want `foo` in the example above to remain the same color throughout the file. It’s also reasonable, I think, to want `foo` to have a special color on the line where it’s introduced. Or to communicate that this token has special behavior — as it would if you have the [js-hyperclick](https://atom.io/packages/js-hyperclick) package installed and are in the habit of cmd-clicking package names to jump to the files where they’re defined.

I don’t mind that the One Dark syntax theme doesn’t want to give `foo` a special color; I mind that its decision is also binding on _all possible_ syntax themes. If that scope name is present, and it’s undesirable to a syntax theme, that theme can apply the overrides necessary to ignore it. But if that scope name is missing altogether, that constrains _all_ syntax themes, and I’m unable to write a syntax theme that behaves differently.

Thus, here’s what I propose:

If an issue or PR proposes adding a scope and can justify its presence somehow — including the goal of parity with its non-tree-sitter predecessor — an answer of “no, because the built-in syntax themes don’t want to highlight it that way” should become “OK, but only if someone does the associated work to ensure no visual regressions in the built-in syntax themes.” That someone could be the PR’s author or anyone else who has an interest in getting it landed.

This is tricky, of course — not only the coordination of PRs across packages, but also the need to apply overrides to all six (is it six? I think it’s six) of the built-in syntax themes. If all built-in themes are going to share an austere philosophy ([and it seems like that’s the plan](https://github.com/atom/atom/pull/18383#issuecomment-435460854)), then perhaps it makes sense for them to start sharing a core set of contextual rules. The only difference between them would be the specific color choices that they make.

## Drawbacks

The drawback is that what I’m suggesting is a lot of work. I don’t propose it lightly; I propose it because it strikes me as the least bad of all available choices.

## Rationale and alternatives

And what are those other choices?

1. The status quo, in which built-in grammars (like `language-javascript`’s tree-sitter grammar) are developed with goals that are tightly coupled to the goals of syntax themes. I think this would be a tragic lost opportunity. The fact that the `tree-sitter-javascript` parser groks ES6 and JSX means that lots of people no longer have to rely on a third-party grammar like `language-babel`. If I can’t get my syntax highlighting the way I want it because the built-in grammar applies scopes too sparsely, then my only recourse is to write my own tree-sitter grammar that adds in the mappings I want. That’s easier than writing a TM-style grammar, but it still involves some portion of the community dedicating their efforts to an effective fork of `language-javascript`, and for far more mundane reasons than the fork that produced `language-babel` in the first place.

2. A suggestion made by @Ben3eeE in [the issue that inspired this RFC](https://github.com/atom/language-javascript/issues/649): intentionally picking ornery scope names that don’t have implicit highlighting in the built-in syntax themes. That’s at least a way forward, but I think it abandons a hard-won lesson. TextMate’s attempt to devise a system of semantic scope names has borne quite a bit of fruit. It’s the reason why three major successor editors have signed on to the same conventions. Semantic naming acts as a kind of “middleware” that allows syntax themes and grammars to be unaware of each others’ implementation details. I _could_ write a PR that scopes our `foo` import from above with something like `import-specifier.identifier`, and I still might, but in choosing an arbitrary name I’m once again obligating syntax themes to care about a grammar’s implementation details.

3. Some sort of grand compromise that I don’t have the breadth of experience to envision on my own. I’m hoping for this one, actually. For instance, it occurs to me that the “variables shouldn’t ever be highlighted with different colors across different usages” problem is only a problem in languages where there’s no sigil to mark variables. PHP, Perl, and Less don’t have this problem because all variables begin with a symbol. Maybe the solution is to include some token like `without-sigil` in the scope name, and then the built-in themes can write a rule like `.syntax--without-sigil { color: @mono-1 !important }`.

## Unresolved questions

- Ideally, I’d love to have some sort of canonical scope document like [TextMate](https://macromates.com/manual/en/language_grammars#naming_conventions) and [Sublime Text](https://www.sublimetext.com/docs/3/scope_naming.html) have. But the future of TM-style scope naming seems to be up in the air. I think that they’re no less relevant in the era of tree-sitter grammars, but I bet others disagree.
- To what extent should tree-sitter grammars be expected to scope documents identically to their TM-style predecessors? Obviously not 100%, or else there’d be no gains. What’s the right balancing test?
- Atom has made some infrastructural choices that can complicate how scopes get applied and consumed. Are these permanent? For instance, if I wanted to implement Alternative 2 (as described above), I could choose a scope name like `meta.variable.import`, on the assumption that `meta.`-prefixed scope names won’t have syntax highlighting. But `meta.variable` gets caught by a `.syntax--variable` CSS selector just as much as it would if the scope name began with `variable`. The order and hierarchy implied in the scope name is not actually present. Syntax themes could write selectors more creatively to get around this — e.g., `*[class^="syntax--variable "]` instead of `.syntax--variable` — but I don’t think many do, and I can hardly blame them. Is this a limitation that Atom can evolve its way out of without breaking anything? Or are we stuck with it?
